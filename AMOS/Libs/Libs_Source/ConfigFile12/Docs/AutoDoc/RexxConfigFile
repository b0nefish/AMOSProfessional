@DATABASE "RexxConfigFile"

@NODE Main "RexxConfigFile.doc"
    @{" cf_AddArgument() " Link "cf_AddArgument()"}
    @{" cf_AddGroup() " Link "cf_AddGroup()"}
    @{" cf_AddHdrFlag() " Link "cf_AddHdrFlag()"}
    @{" cf_AddItem() " Link "cf_AddItem()"}
    @{" cf_ChangeArgument() " Link "cf_ChangeArgument()"}
    @{" cf_ChangeGroup() " Link "cf_ChangeGroup()"}
    @{" cf_ChangeItem() " Link "cf_ChangeItem()"}
    @{" cf_ChkHdrFlag() " Link "cf_ChkHdrFlag()"}
    @{" cf_ClearArgList() " Link "cf_ClearArgList()"}
    @{" cf_ClearGrpList() " Link "cf_ClearGrpList()"}
    @{" cf_ClearItemList() " Link "cf_ClearItemList()"}
    @{" cf_CloneArgument() " Link "cf_CloneArgument()"}
    @{" cf_CloneGroup() " Link "cf_CloneGroup()"}
    @{" cf_CloneItem() " Link "cf_CloneItem()"}
    @{" cf_Close() " Link "cf_Close()"}
    @{" cf_DisposeArgument() " Link "cf_DisposeArgument()"}
    @{" cf_DisposeGroup() " Link "cf_DisposeGroup()"}
    @{" cf_DisposeItem() " Link "cf_DisposeItem()"}
    @{" cf_FindArgument() " Link "cf_FindArgument()"}
    @{" cf_FindGroup() " Link "cf_FindGroup()"}
    @{" cf_FindItem() " Link "cf_FindItem()"}
    @{" cf_GetArgName() " Link "cf_GetArgName()"}
    @{" cf_GetArgOfItem() " Link "cf_GetArgOfItem()"}
    @{" cf_GetGrpName() " Link "cf_GetGrpName()"}
    @{" cf_GetGrpOfArg() " Link "cf_GetGrpOfArg()"}
    @{" cf_GetHdrOfGrp() " Link "cf_GetHdrOfGrp()"}
    @{" cf_GetItem() " Link "cf_GetItem()"}
    @{" cf_GetItemNum() " Link "cf_GetItemNum()"}
    @{" cf_GetItemOnly() " Link "cf_GetItemOnly()"}
    @{" cf_GetItemSType() " Link "cf_GetItemSType()"}
    @{" cf_GetItemType() " Link "cf_GetItemType()"}
    @{" cf_GetOMode() " Link "cf_GetOMode()"}
    @{" cf_GetPuddleSize() " Link "cf_GetPuddleSize()"}
    @{" cf_GetWBufSize() " Link "cf_GetWBufSize()"}
    @{" cf_LastArgument() " Link "cf_LastArgument()"}
    @{" cf_LastGroup() " Link "cf_LastGroup()"}
    @{" cf_LastItem() " Link "cf_LastItem()"}
    @{" cf_LockArgList() " Link "cf_LockArgList()"}
    @{" cf_LockGrpList() " Link "cf_LockGrpList()"}
    @{" cf_LockItemList() " Link "cf_LockItemList()"}
    @{" cf_NewArgItem() " Link "cf_NewArgItem()"}
    @{" cf_NewArgument() " Link "cf_NewArgument()"}
    @{" cf_NewGroup() " Link "cf_NewGroup()"}
    @{" cf_NewItem() " Link "cf_NewItem()"}
    @{" cf_NextArgument() " Link "cf_NextArgument()"}
    @{" cf_NextGroup() " Link "cf_NextGroup()"}
    @{" cf_NextItem() " Link "cf_NextItem()"}
    @{" cf_Open() " Link "cf_Open()"}
    @{" cf_Read() " Link "cf_Read()"}
    @{" cf_RemHdrFlag() " Link "cf_RemHdrFlag()"}
    @{" cf_RemoveArgument() " Link "cf_RemoveArgument()"}
    @{" cf_RemoveGroup() " Link "cf_RemoveGroup()"}
    @{" cf_RemoveItem() " Link "cf_RemoveItem()"}
    @{" cf_SetWBufSize() " Link "cf_SetWBufSize()"}
    @{" cf_UnlockArgList() " Link "cf_UnlockArgList()"}
    @{" cf_UnlockGrpList() " Link "cf_UnlockGrpList()"}
    @{" cf_UnlockItemList() " Link "cf_UnlockItemList()"}
    @{" cf_Write() " Link "cf_Write()"}
@ENDNODE

@NODE "cf_AddArgument()" "rexxconfigfile.library/cf_AddArgument"

@{b}   NAME@{ub}
	cf_AddArgument -- Adds an argument node to the argument list of a
			  group node.

@{b}   SYNOPSIS@{ub}
	cf_AddArgument(GrpNode,ArgNode)

	cf_AddArgument(GRPNODE/N/A,ARGNODE/N/A)

@{b}   FUNCTION@{ub}
	This function adds an argument node to the argument list of a
	group node.

@{b}   INPUTS@{ub}
	GrpNode - The group node for add to.
	ArgNode - Pointer to the argument node.

@{b}   EXAMPLE@{ub}
	...
	myNewArgNode = cf_CloneArgument(myArgNode)
	cf_AddArgument(myGrpNode, myNewArgNode)
	...

@{b}   SEE ALSO@{ub}
	@{"cf_AddGroup()" Link "cf_AddGroup()"}, @{"cf_AddItem()" Link "cf_AddItem()"}

@ENDNODE

@NODE "cf_AddGroup()" "rexxconfigfile.library/cf_AddGroup"

@{b}   NAME@{ub}
	cf_AddGroup -- Adds a group node to the grouplist of a header.

@{b}   SYNOPSIS@{ub}
	cf_AddGroup(Header,GrpNode)

	cf_AddGroup(HEADER/N/A,GRPNODE/N/A)

@{b}   FUNCTION@{ub}
	This function adds a group node to the group list of a header.

@{b}   INPUTS@{ub}
	Header - Pointer to the Header for add to.
	GrpNode - Pointer to the group node.

@{b}   EXAMPLE@{ub}
	...
	myNewGrpNode = cf_CloneGroup(myGrpNode)
	cf_AddGroup(myHeader, myNewGrpNode)
	...

@{b}   SEE ALSO@{ub}
	@{"cf_AddArgument()" Link "cf_AddArgument()"}, @{"cf_AddItem()" Link "cf_AddItem()"}

@ENDNODE

@NODE "cf_AddHdrFlag()" "rexxconfigfile.library/cf_AddHdrFlag"

@{b}   NAME@{ub}
	cf_AddHdrFlag -- Add a flag to the Header.

@{b}   SYNOPSIS@{ub}
	cf_AddHdrFlag(Header,Flag)

	cf_AddHdrFlag(HEADER/N/A,FLAG/A)

@{b}   FUNCTION@{ub}
	This function add a flag to the Header.

@{b}   INPUTS@{ub}
	Header - Pointer to the Header.
	Flag - Flag to add (see @{"cf_ChkHdrFlag()" Link "cf_ChkHdrFlag()"}).

@{b}   SEE ALSO@{ub}
	@{"cf_ChkHdrFlag()" Link "cf_ChkHdrFlag()"}, @{"cf_RemHdrFlag()" Link "cf_RemHdrFlag()"}

@ENDNODE

@NODE "cf_AddItem()" "rexxconfigfile.library/cf_AddItem"

@{b}   NAME@{ub}
	cf_AddItem -- Adds an item node to the item list of an argument
		      node.

@{b}   SYNOPSIS@{ub}
	cf_AddItem(ArgNode,ItemNode)

	cf_AddItem(ARGNODE/N/A,ITEMNODE/N/A)

@{b}   FUNCTION@{ub}
	This function adds an item node to the item list of an argument
	node.

@{b}   INPUTS@{ub}
	ArgNode - The argument node for add to.
	ItemNode - Pointer to the item node.

@{b}   EXAMPLE@{ub}
	...
	myNewItemNode = cf_CloneItem(myItemNode)
	cf_AddItem(myArgNode, myNewItemNode)
	...

@{b}   SEE ALSO@{ub}
	@{"cf_AddArgument()" Link "cf_AddArgument()"}, @{"cf_AddGroup()" Link "cf_AddGroup()"}

@ENDNODE

@NODE "cf_ChangeArgument()" "rexxconfigfile.library/cf_ChangeArgumentxconfigfile.library/cf_ChangeArgument"

@{b}   NAME@{ub}
	cf_ChangeArgument -- Changes the name of an argument node.

@{b}   SYNOPSIS@{ub}
	cf_ChangeArgument(ArgNode,Name)

	cf_ChangeArgument(ARGNODE/N/A,NAME/A)

@{b}   FUNCTION@{ub}
	This function changes the name of an argument node.

@{b}   INPUTS@{ub}
	ArgNode - The argument node.
	Name - The new name for the argument node.

@{b}   SEE ALSO@{ub}
	@{"cf_ChangeGroup()" Link "cf_ChangeGroup()"}, @{"cf_ChangeItem()" Link "cf_ChangeItem()"}

@ENDNODE

@NODE "cf_ChangeGroup()" "rexxconfigfile.library/cf_ChangeGroup"

@{b}   NAME@{ub}
	cf_ChangeGroup -- Changes the name of a groupnode.

@{b}   SYNOPSIS@{ub}
	cf_ChangeGroup(GrpNode,Name)

	cf_ChangeGroup(GRPNODE/N/A,NAME/A)

@{b}   FUNCTION@{ub}
	This function changes the name of a group node.

@{b}   INPUTS@{ub}
	GrpNode - The group node for add to.
	Name - The new name for the group node.

@{b}   SEE ALSO@{ub}
	@{"cf_ChangeArgument()" Link "cf_ChangeArgument()"}, @{"cf_ChangeItem()" Link "cf_ChangeItem()"}

@ENDNODE

@NODE "cf_ChangeItem()" "rexxconfigfile.library/cf_ChangeItem"

@{b}   NAME@{ub}
	cf_ChangeItem -- Changes the contents of an item node.

@{b}   SYNOPSIS@{ub}
	cf_ChangeItem(ItemNode,Contents [,Type] [,SpecialType])

	cf_ChangeItem(ITEMNODE/N/A,CONTENTS/A,TYPE,STYPE)

@{b}   FUNCTION@{ub}
	This function changes the contents of an item node.

@{b}   INPUTS@{ub}
	ItemNode - The item node for the changes.
	Contents - The new contents.
	Type - The new type (see @{"cf_NewItem()" Link "cf_NewItem()"}).
	SpecialType - The new special type (see @{"cf_NewItem()" Link "cf_NewItem()"}).

@{b}   EXAMPLE@{ub}
	...
	myItemNode = cf_NewItem(myArgNode, 1234567, CF_ITYP_NUMBER)
	cf_ChangeItem(myItemNode, 1, CF_ITYP_BOOL, CF_STYP_BOOL_ON)
	...

	In the CF file:

	[ExampleGroup]
	...
	ExampleArg=ON
	...

@{b}   SEE ALSO@{ub}
	@{"cf_ChangeArgument()" Link "cf_ChangeArgument()"}, @{"cf_ChangeGroup()" Link "cf_ChangeGroup()"}, @{"cf_NewItem()" Link "cf_NewItem()"}

@ENDNODE

@NODE "cf_ChkHdrFlag()" "rexxconfigfile.library/cf_ChkHdrFlag"

@{b}   NAME@{ub}
	cf_ChkHdrFlag -- Check wheather a flag in the Header is set.

@{b}   SYNOPSIS@{ub}
	IsSet = cf_ChkHdrFlag(Header,Flag)

	@{"BOOL" Link "INCLUDE:exec/types.h/Main" 68} cf_ChkHdrFlag(HEADER/N/A,FLAG/A)

@{b}   FUNCTION@{ub}
	This function check wheather a flag in the Header is set.

@{b}   INPUTS@{ub}
	Header - Pointer to the Header.
	Flag - Flag to check:

	    HFLG_SHORT_FILE     -- File is in short format.
	    HFLG_ASCII_FILE     -- File is in ascii format.
	    HFLG_CHANGED        -- File is changed (this will be set, if
				   you use functions like cf_Add/Change/
				   Clone... on the open file).
	    HFLG_WRITE_BY_CLOSE -- Writes the file by use of @{"cf_Close()" Link "cf_Close()"}.

@{b}   RESULT@{ub}
	IsSet - TRUE if the flags is set or FALSE if the flags not set.

@{b}   SEE ALSO@{ub}
	@{"cf_RemHdrFlag()" Link "cf_RemHdrFlag()"}, @{"cf_AddHdrFlag()" Link "cf_AddHdrFlag()"}

@ENDNODE

@NODE "cf_ClearArgList()" "rexxconfigfile.library/cf_ClearArgList"

@{b}   NAME@{ub}
	cf_ClearArgList -- Clears all argument and item nodes of a
			   group node.

@{b}   SYNOPSIS@{ub}
	cf_ClearArgList(GrpNode)

	cf_ClearArgList(GRPNODE/N/A)

@{b}   FUNCTION@{ub}
	This function clears all argument and item nodes of a group node.

@{b}   INPUTS@{ub}
	GrpNode - The group node for the argument list.

@{b}   SEE ALSO@{ub}
	@{"cf_ClearGrpList()" Link "cf_ClearGrpList()"}, @{"cf_ClearItemList()" Link "cf_ClearItemList()"}

@ENDNODE

@NODE "cf_ClearGrpList()" "rexxconfigfile.library/cf_ClearGrpList"

@{b}   NAME@{ub}
	cf_ClearGrpList -- Clears all group/argument/item nodes.

@{b}   SYNOPSIS@{ub}
	cf_ClearGrpList(Header)

	cf_ClearGrpList(HEADER/N/A)

@{b}   FUNCTION@{ub}
	This function clears all group/argument/item nodes.

@{b}   INPUTS@{ub}
	Header - The Header for group list.

@{b}   SEE ALSO@{ub}
	@{"cf_ClearArgList()" Link "cf_ClearArgList()"}, @{"cf_ClearItemList()" Link "cf_ClearItemList()"}

@ENDNODE

@NODE "cf_ClearItemList()" "rexxconfigfile.library/cf_ClearItemListexxconfigfile.library/cf_ClearItemList"

@{b}   NAME@{ub}
	cf_ClearItemList -- Clears all item nodes of an argument node.

@{b}   SYNOPSIS@{ub}
	cf_ClearItemList(ArgNode)

	cf_ClearItemList(ARGNODE/N/A)

@{b}   FUNCTION@{ub}
	This function clears all item nodes of an argument node.

@{b}   INPUTS@{ub}
	ArgNode - The argument node for the item list.

@{b}   SEE ALSO@{ub}
	@{"cf_ClearArgList()" Link "cf_ClearArgList()"}, @{"cf_ClearGrpList()" Link "cf_ClearGrpList()"}

@ENDNODE

@NODE "cf_CloneArgument()" "rexxconfigfile.library/cf_CloneArgumentexxconfigfile.library/cf_CloneArgument"

@{b}   NAME@{ub}
	cf_CloneArgument -- Copy an argument node with all item nodes.

@{b}   SYNOPSIS@{ub}
	NewArgNode = cf_CloneArgument(ArgNode)

	NEWARGNODE/N cf_CloneArgument(ARGNODE/N/A)

@{b}   FUNCTION@{ub}
	This function duplicates an argument node with all item nodes.
	Note the duplicated ArgNode is not added.

@{b}   INPUTS@{ub}
	ArgNode - The argument node to clone.

@{b}   RESULT@{ub}
	NewArgNode - The new argument node or NULL by failure.

@{b}   EXAMPLE@{ub}
	...
	myArgNode = cf_NewArgument(myGrpNode, "ExampleArgument")
	cf_AddArgument(myGrpNode, cf_CloneArgument(myArgNode))
	...

	In the CF file:

	...
	[ExampleGroup]

	...
	ExampleArgument=
	...
	ExampleArgument=
	...

@{b}   SEE ALSO@{ub}
	@{"cf_CloneGroup()" Link "cf_CloneGroup()"}, @{"cf_CloneItem()" Link "cf_CloneItem()"}

@ENDNODE

@NODE "cf_CloneGroup()" "rexxconfigfile.library/cf_CloneGroup"

@{b}   NAME@{ub}
	cf_CloneGroup -- Copy a group node with all argument and item nodes.

@{b}   SYNOPSIS@{ub}
	NewGrpNode = cf_CloneGroup(GrpNode)

	NEWGRPNODE/N cf_CloneGroup(GRPNDE/N/A)

@{b}   FUNCTION@{ub}
	This function duplicates a group node with all argument and item
	nodes. Note the duplicated GrpNode is not added.

@{b}   INPUTS@{ub}
	GrpNode - The group node to clone.

@{b}   RESULT@{ub}
	NewGrpNode - The new group node or NULL by failure.

@{b}   EXAMPLE@{ub}
	...
	myGrpNode = cf_NewGroup(myHeader, "ExampleGroup")
	cf_AddGroup(myHeader, cf_CloneGroup(myGrpNode))
	...

	In the CF file:

	...
	[ExampleGroup]
	...
	[ExampleGroup]
	...

@{b}   SEE ALSO@{ub}
	@{"cf_CloneArgument()" Link "cf_CloneArgument()"}, @{"cf_CloneItem()" Link "cf_CloneItem()"}

@ENDNODE

@NODE "cf_CloneItem()" "rexxconfigfile.library/cf_CloneItem"

@{b}   NAME@{ub}
	cf_CloneItem -- Copy an item node.

@{b}   SYNOPSIS@{ub}
	NewItemNode = cf_CloneItem(ItemNode)

	NEWITEMNODE/N cf_CloneItem(ITEMNODE/N/A)

@{b}   FUNCTION@{ub}
	This function duplicates an item node. Note the duplicated ItemNode
	is not added.

@{b}   INPUTS@{ub}
	ItemNode - The item node to clone.

@{b}   RESULT@{ub}
	NewItemNode - The new item node or NULL by failure.

@{b}   EXAMPLE@{ub}
	...
	myItemNode = cf_NewItem(myArgNode, "ExampleItem",ITYP_STRING)
	cf_AddItem(myArgNode, cf_CloneItem(myItemNode))
	...

	In the CF file:

	...
	[ExampleGroup]

	...
	ExampleArgument="ExampleItem","ExampleItem"
	...

@{b}   SEE ALSO@{ub}
	@{"cf_CloneGroup()" Link "cf_CloneGroup()"}, @{"cf_CloneArgument()" Link "cf_CloneArgument()"}

@ENDNODE

@NODE "cf_Close()" "rexxconfigfile.library/cf_Close"

@{b}   NAME@{ub}
	cf_Close -- Close a CF file.

@{b}   SYNOPSIS@{ub}
	cf_Close(Header)

	cf_Close(HEADER/N/A)

@{b}   FUNCTION@{ub}
	This function close the CF file, deletes the private memory pool
	and if the HFLG_WRITE_BY_CLOSE and HFLG_CHANGED flags set, the
	CF file will be write too.

@{b}   INPUTS@{ub}
	Header - The Header of the file to close.

@{b}   SEE ALSO@{ub}
	@{"cf_Open()" Link "cf_Open()"}, @{"cf_Read()" Link "cf_Read()"}, @{"cf_Write()" Link "cf_Write()"}

@ENDNODE

@NODE "cf_DisposeArgument()" "rexxconfigfile.library/cf_DisposeArgumentonfigfile.library/cf_DisposeArgument"

@{b}   NAME@{ub}
	cf_DisposeArgument -- Remove and dispose an argument node.

@{b}   SYNOPSIS@{ub}
	cf_DisposeArgument(ArgNode)

	cf_DisposeArgument(ARGNODE/N/A)

@{b}   FUNCTION@{ub}
	This function remove and dispose an argument node. The item list
	will also be cleared.

@{b}   INPUTS@{ub}
	ArgNode - The argument node to remove and dispose.

@{b}   NOTES@{ub}
	If the ArgNode already removed, the function only dispose the
	argument node.

@{b}   SEE ALSO@{ub}
	@{"cf_DisposeGroup()" Link "cf_DisposeGroup()"}, @{"cf_DisposeItem()" Link "cf_DisposeItem()"}

@ENDNODE

@NODE "cf_DisposeGroup()" "rexxconfigfile.library/cf_DisposeGroup"

@{b}   NAME@{ub}
	cf_DisposeGroup -- Remove and dispose a group node.

@{b}   SYNOPSIS@{ub}
	cf_DisposeGroup(GrpNode)

	cf_DisposeGroup(GRPNODE/N/A)

@{b}   FUNCTION@{ub}
	This function remove and dispose a group node. All argument nodes
	will also be cleared.

@{b}   INPUTS@{ub}
	GrpNode - The group node to remove and dispose.

@{b}   NOTES@{ub}
	If the GrpNode already removed, the function only dispose the
	group node.

@{b}   SEE ALSO@{ub}
	@{"cf_DisposeArgument()" Link "cf_DisposeArgument()"}, @{"cf_DisposeItem()" Link "cf_DisposeItem()"}

@ENDNODE

@NODE "cf_DisposeItem()" "rexxconfigfile.library/cf_DisposeItem"

@{b}   NAME@{ub}
	cf_DisposeItem -- Remove and dispose an item node.

@{b}   SYNOPSIS@{ub}
	cf_DisposeItem(ItemNode)

	cf_DisposeItem(ITEMNODE/N/A)

@{b}   FUNCTION@{ub}
	This function remove and dispose an item node.

@{b}   INPUTS@{ub}
	ItemNode - The item node to remove and dispose.

@{b}   NOTES@{ub}
	If the ItemNode already removed, the function only dispose the
	item node.

@{b}   SEE ALSO@{ub}
	@{"cf_DisposeGroup()" Link "cf_DisposeGroup()"}, @{"cf_DisposeArgument()" Link "cf_DisposeArgument()"}

@ENDNODE

@NODE "cf_FindArgument()" "rexxconfigfile.library/cf_FindArgument"

@{b}   NAME@{ub}
	cf_FindArgument -- Finds a specfic argument node. (case sensitive)

@{b}   SYNOPSIS@{ub}
	ArgNode = cf_FindArgument(GrpNode,Name)

	ARGNODE/N cf_FindArgument(GRPNODE/N/A,NAME/A)

@{b}   FUNCTION@{ub}
	This function finds a specfic argument node.

@{b}   INPUTS@{ub}
	GrpNode - The group node of the argument list to search.
	Name - Name of the argument node. 

@{b}   RESULT@{ub}
	ArgNode - The argument node or NULL.

@{b}   SEE ALSO@{ub}
	@{"cf_FindGroup()" Link "cf_FindGroup()"}, @{"cf_FindItem()" Link "cf_FindItem()"}

@ENDNODE

@NODE "cf_FindGroup()" "rexxconfigfile.library/cf_FindGroup"

@{b}   NAME@{ub}
	cf_FindGroup -- Finds a specfic group node. (case sensitive)

@{b}   SYNOPSIS@{ub}
	GrpNode = cf_FindGroup(Header,Name)

	GRPNODE/N cf_FindGroup(HEADER/N/A,NAME/A)

@{b}   FUNCTION@{ub}
	This function finds a specfic group node.

@{b}   INPUTS@{ub}
	Header - A pointer to the Header of the group list to search.
	Name - Name of the group node.

@{b}   RESULT@{ub}
	GrpNode - The group node or NULL.

@{b}   SEE ALSO@{ub}
	@{"cf_FindArgument()" Link "cf_FindArgument()"}, @{"cf_FindItem()" Link "cf_FindItem()"}

@ENDNODE

@NODE "cf_FindItem()" "rexxconfigfile.library/cf_FindItem"

@{b}   NAME@{ub}
	cf_FindItem -- Finds a specfic item node.

@{b}   SYNOPSIS@{ub}
	ItemNode = cf_FindItem(ArgNode,Contents,Type)

	ITEMNODE/A cf_FindItem(ARGNODE/N/A,CONTENTS/A,TYPE/A)

@{b}   FUNCTION@{ub}
	This function finds a specfic item node.

@{b}   INPUTS@{ub}
	ArgNode - The argument node of the item list to search.
	Contents - Contents of the item node.
	Type - The type of contents (see @{"cf_NewItem()" Link "cf_NewItem()"}).

@{b}   RESULT@{ub}
	ItemNode - The item node or NULL.

@{b}   SEE ALSO@{ub}
	@{"cf_FindArgument()" Link "cf_FindArgument()"}, @{"cf_FindGroup()" Link "cf_FindGroup()"}, @{"cf_NewItem()" Link "cf_NewItem()"}

@ENDNODE

@NODE "cf_GetArgName()" "rexxconfigfile.library/cf_GetArgName"

@{b}   NAME@{ub}
	cf_GetArgName -- Get the name of an argument node.

@{b}   SYNOPSIS@{ub}
	Name = cf_GetArgName(ArgNode)

	NAME cf_GetArgName(ARGNODE/N/A)

@{b}   FUNCTION@{ub}
	This function get the name of an argument node.

@{b}   INPUTS@{ub}
	ArgNode - The argument node.

@{b}   RESULT@{ub}
	Name - The name of an argument node.

@{b}   EXAMPLE@{ub}
	...
	myArgNode = cf_NewArgument(myGrpNode,"ExampleArgument")

	ArgName = cf_GetArgName(myArgNode)
	SAY 'The name of the argument node is' ArgName
	...

@{b}   SEE ALSO@{ub}
	@{"cf_GetGrpName()" Link "cf_GetGrpName()"}

@ENDNODE

@NODE "cf_GetArgOfItem()" "rexxconfigfile.library/cf_GetArgOfItem"

@{b}   NAME@{ub}
	cf_GetArgOfItem -- Get the parent node of an item node.

@{b}   SYNOPSIS@{ub}
	ArgNode = cf_GetArgOfItem(ItemNode)

	ARGNODE/N cf_GetArgOfItem(ITEMNODE/N/A)

@{b}   FUNCTION@{ub}
	This function gets the parent node (ArgNode) of an item node.

@{b}   INPUTS@{ub}
	ItemNode - The item node.

@{b}   RESULT@{ub}
	ArgNode - Pointer to the argument node.

@{b}   SEE ALSO@{ub}
	@{"cf_GetGrpOfArg()" Link "cf_GetGrpOfArg()"}, @{"cf_GetHdrOfGrp()" Link "cf_GetHdrOfGrp()"}

@ENDNODE

@NODE "cf_GetGrpName()" "rexxconfigfile.library/cf_GetGrpName"

@{b}   NAME@{ub}
	cf_GetGrpName -- Get the name of a group node.

@{b}   SYNOPSIS@{ub}
	Name = cf_GetGrpName(GrpNode)

	NAME cf_GetGrpName(GRPNODE/N/A)

@{b}   FUNCTION@{ub}
	This function get the name of a group node.

@{b}   INPUTS@{ub}
	GrpNode - The group node.

@{b}   RESULT@{ub}
	Name - The name of a group node.

@{b}   EXAMPLE@{ub}
	...
	myGrpNode = cf_NewGroup(myHeader,"ExampleGroup")

	GrpName = cf_GetGrpName(myGrpNode)
	SAY 'The name of the group node is' GrpName
	...

@{b}   SEE ALSO@{ub}
	@{"cf_GetArgName()" Link "cf_GetArgName()"}

@ENDNODE

@NODE "cf_GetGrpOfArg()" "rexxconfigfile.library/cf_GetGrpOfArg"

@{b}   NAME@{ub}
	cf_GetGrpOfArg -- Get the parent node of an argument node.

@{b}   SYNOPSIS@{ub}
	GrpNode = cf_GetGrpOfArg(ArgNode)

	GRPNODE/N cf_GetGrpOfArg(ARGNODE/N/A)

@{b}   FUNCTION@{ub}
	This function gets the parent node (GrpNode) of an argument node.

@{b}   INPUTS@{ub}
	ArgNode - The argument node.

@{b}   RESULT@{ub}
	GrpNode - Pointer to the group node.

@{b}   SEE ALSO@{ub}
	@{"cf_GetHdrOfGrp()" Link "cf_GetHdrOfGrp()"}, @{"cf_GetArgOfItem()" Link "cf_GetArgOfItem()"}

@ENDNODE

@NODE "cf_GetHdrOfGrp()" "rexxconfigfile.library/cf_GetHdrOfGrp"

@{b}   NAME@{ub}
	cf_GetHdrOfGrp -- Get the parent node of a group node.

@{b}   SYNOPSIS@{ub}
	Header = cf_GetHdrOfGrp(GrpNode)

	HEADER/N cf_GetHdrOfGrp(GRPNODE/N/A)

@{b}   FUNCTION@{ub}
	This function gets the parent node (Header) of a group node.

@{b}   INPUTS@{ub}
	GrpNode - The group node.

@{b}   RESULT@{ub}
	Header - Pointer to the header.

@{b}   SEE ALSO@{ub}
	@{"cf_GetGrpOfArg()" Link "cf_GetGrpOfArg()"}, @{"cf_GetArgOfItem()" Link "cf_GetArgOfItem()"}

@ENDNODE

@NODE "cf_GetItem()" "rexxconfigfile.library/cf_GetItem"

@{b}   NAME@{ub}
	cf_GetItem -- Get the contents of an item node or the default.

@{b}   SYNOPSIS@{ub}
	Contents = cf_GetItem(ItemNode,Type,Default)

	CONTENTS cf_GetItem(ITEMNODE/N/A,TYPE/A,STYPE/A)

@{b}   FUNCTION@{ub}
	This function gets the contents of an item node. If Type not equal
	with the type of the item node the functions return the default.

@{b}   INPUTS@{ub}
	ItemNode - The item node.
	Type - Contents type (see @{"cf_NewItem()" Link "cf_NewItem()"}).
	Default - Default contents.

@{b}   RESULT@{ub}
	Contents - The contents of the item node or the default.

@{b}   SEE ALSO@{ub}
	@{"cf_GetItemNum()" Link "cf_GetItemNum()"}

@ENDNODE

@NODE "cf_GetItemNum()" "rexxconfigfile.library/cf_GetItemNum"

@{b}   NAME@{ub}
	cf_GetItemNum -- Get the contents of an item node or the default.

@{b}   SYNOPSIS@{ub}
	Contents = cf_GetItemNum(ArgNode,Position,Type,Default)

	CONTENTS cf_GetItemNum(ARGNODE/N/A,POSITION/A,TYPE/A,STYPE/A)

@{b}   FUNCTION@{ub}
	This function gets the contents of an item node from the specific
	position. If Type not equal with the type of the item node the
	function returns the default.

@{b}   INPUTS@{ub}
	ArgNode - The argument node.
	Position - Position of the item node (from 1 to X).
	Type - Contents type (see c> pmid_AnimArgs . volume)?((ULONG)(*(pmid -> pmid_AnimArgs . volume))):(64UL)),
					ADTA_Cycles,          1UL,
					TAG_DONE );

			    if( pmid -> pmid_AnimArgs . verbose )
			    {
			      debug_printf( cb, "# sample %lx length %lu period %lu\n",
					    (pmid -> pmid_FirstFrameNode -> fn_Sample),
					    (pmid -> pmid_FirstFrameNode -> fn_SampleLength),
					    (pmid -> pmid_FirstFrameNode -> fn_y(myItemNode)
	Type = cf_GetItemType(myItemNode)

	SAY 'The contents of the item node is' Contents
	...

@{b}   SEE ALSO@{ub}
	cf_GetItemNum(), @{"cf_GetItem()" Link "cf_GetItem()"}

@ENDNODE

@NODE "cf_GetItemSType()" "rexxconfigfile.library/cf_GetItemSType"

@{b}   NAME@{ub}
	cf_GetItemSType -- Get the special type of an item node.

@{b}   SYNOPSIS@{ub}
	SpecialType = cf_GetItemSType(ItemNode)

	STYPE cf_GetItemSType(ITEMNODE/N/A)

@{b}   FUNCTION@{ub}
	This function returns the special type of an item node.

@{b}   INPUTS@{ub}
	ItemNode - The item node.

@{b}   RESULT@{ub}
	SpecialType - Special type (see @{"cf_NewItem()" Link "cf_NewItem()"}) or STYP_UNKOWN for
		      an unkown specialtype.

@{b}   SEE ALSO@{ub}
	@{"cf_GetItemType()" Link "cf_GetItemType()"}, @{"cf_NewItem()" Link "cf_NewItem()"}

@ENDNODE

@NODE "cf_GetItemType()" "rexxconfigfile.library/cf_GetItemType"

@{b}   NAME@{ub}
	cf_GetItemType -- Get the type of an item node.

@{b}   SYNOPSIS@{ub}
	Type = cf_GetItemType(ItemNode)

	TYPE cf_GetItemType(ITEMNODE/N/A)

@{b}   FUNCTION@{ub}
	This function returns the contents type of an item node.

@{b}   INPUTS@{ub}
	ItemNode - The item node.

@{b}   RESULT@{ub}
	Type - Contents type (see @{"cf_NewItem()" Link "cf_NewItem()"}) or ITYP_UNKOWN for
	       an unkown specialtype.

@{b}   SEE ALSO@{ub}
	@{"cf_GetItemSType()" Link "cf_GetItemSType()"}, @{"cf_NewItem()" Link "cf_NewItem()"}

@ENDNODE

@NODE "cf_GetOMode()" "rexxconfigfile.library/cf_GetOMode"

@{b}   NAME@{ub}
	cf_GetOMode -- Get the openmode from the header.

@{b}   SYNOPSIS@{ub}
	OMode = cf_GetOMode(Header)

	OMODE cf_GetOMode(HEADER/N/A)

@{b}   FUNCTION@{ub}
	This function gets the openmode from the Header.

@{b}   INPUTS@{ub}
	Header - Pointer to the Header.

@{b}   RESULT@{ub}
	OMode - openmode (see @{"cf_Open()" Link "cf_Open()"}).

@{b}   SEE ALSO@{ub}
	@{"cf_Open()" Link "cf_Open()"}

@ENDNODE

@NODE "cf_GetPuddleSize()" "rexxconfigfile.library/cf_GetPuddleSizeexxconfigfile.library/cf_GetPuddleSize"

@{b}   NAME@{ub}
	cf_GetPuddleSize -- Get the puddlesize from the header.

@{b}   SYNOPSIS@{ub}
	PuddleSize = cf_GetPuddleSize(Header)

	PUDDLESIZE cf_GetPuddleSize(HEADER/N/A)

@{b}   FUNCTION@{ub}
	This function gets the puddlesize from the Header.

@{b}   INPUTS@{ub}
	Header - Pointer to the Header.

@{b}   RESULT@{ub}
	PuddleSize - puddlesize.

@ENDNODE

@NODE "cf_GetWBufSize()" "rexxconfigfile.library/cf_GetWBufSize"

@{b}   NAME@{ub}
	cf_GetWBufSize -- Get the writebuffer size from the header.

@{b}   SYNOPSIS@{ub}
	WBufSize = cf_GetWBufSize(Header)

	WBUFSIZE cf_GetWBufSize(HEADER/N/A)

@{b}   FUNCTION@{ub}
	This functERROR_NO_FREE_STORE;
    }

@{b}    return( error );@{ub}
}


@{"LONG" Link "INCLUDE:exec/types.h/Main" 35} LoadPicture( struct ClassBase *cb, struct PicMovieInstData *pmid, @{"STRPTR" Link "INCLUDE:exec/types.h/Main" 53} fiize.

@ENDNODE

@NODE "cf_LastArgument()" "rexxconfigfile.library/cf_LastArgument"

@{b}   NAME@{ub}
	cf_LastArgument -- Returns the previous argument node.

@{b}   SYNOPSIS@{ub}
	LastArgNode = cf_LastArgument(ArgNode)

	LASTARGNODE/N cf_LastArgument(ARGNODE/N/A)

@{b}   FUNCTION@{ub}
	This function returns the previous argument node, or NULL if there
	are no more argument nodes in the list.

@{b}   INPUTS@{ub}
	ArgNode - The argument node.

@{b}   RESULT@{ub}
	LastArgNode - Last argument node or NULL.

@{b}   SEE ALSO@{ub}
	@{"cf_LastGroup()" Link "cf_LastGroup()"}, @{"cf_LastItem()" Link "cf_LastItem()"}, @{"cf_LockArgList()" Link "cf_LockArgList()"}

@ENDNODE

@NODE "cf_LastGroup()" "rexxconfigfile.library/cf_LastGroup"

@{b}   NAME@{ub}
	cf_LastGroup -- Returns the previous group node.

@{b}   SYNOPSIS@{ub}
	LastGrpNode = cf_LastGroup(GrpNode)

	LASTGRPNODE/N cf_LastGroup(GRPNODE/N/A)

@{b}   FUNCTION@{ub}
	This function returns the previous group node, or NULL if there are
	no more group nodes in the list.

@{b}   INPUTS@{ub}
	GrpNode - The group node.

@{b}   RESULT@{ub}
	LastGrpNode - Last group node or NULL.

@{b}   SEE ALSO@{ub}
	@{"cf_LastArgument()" Link "cf_LastArgument()"}, @{"cf_LastItem()" Link "cf_LastItem()"}, @{"cf_LockGrpList()" Link "cf_LockGrpList()"}

@ENDNODE

@NODE "cf_LastItem()" "rexxconfigfile.library/cf_LastItem"

@{b}   NAME@{ub}
	cf_LastItem -- Returns the previous item node.

@{b}   SYNOPSIS@{ub}
	LastItemNode = cf_LastItem(ItemNode)

	LASTITEMNODE/N cf_LastItem(ITEMNODE/N/A)

@{b}   FUNCTION@{ub}
	This function returns the previous item node, or NULL if there are
	no more item nodes in the list.

@{b}   INPUTS@{ub}
	ItemNode - The item node.

@{b}   RESULT@{ub}
	LastItemNode - Last item node or NULL.

@{b}   SEE ALSO@{ub}
	@{"cf_LastArgument()" Link "cf_LastArgument()"}, @{"cf_LastGroup()" Link "cf_LastGroup()"}, @{"cf_LockItemList()" Link "cf_LockItemList()"}

@ENDNODE

@NODE "cf_LockArgList()" "rexxconfigfile.library/cf_LockArgList"

@{b}   NAME@{ub}
	cf_LockArgList -- Locks the argument list of a group node for use.

@{b}   SYNOPSIS@{ub}
	FirstArgNode = cf_LockArgList(GrpNode)

	FIRSTARGNODE/N cf_LockArgList(GRPNODE/N/A)

@{b}   FUNCTION@{ub}
	This function locks the argument list of a group node for use, or
	NULL if the group node has no argument nodes. The pointer returned
	by this is NOT an actual ArgNode pointer - you should use one of the
	other ArgNode calls to get actual pointers to ArgNode structures
	(such as @{"cf_NextArgument()" Link "cf_NextArgument()"}), passing the value returned by
	cf_LockArgList() as the ArgNode value.

@{b}   INPUTS@{ub}
	GrpNode - The group node for the argument list.

@{b}   RESULT@{ub}
	FirstArgNode - First argument node of the group node or NULL.
		       NOT a valid node!

@{b}   EXAMPLE@{ub}
	...
	myArgNode = cf_LockArgList(myGrpNode)
	If myArgNode ~= 0 Then Do
	  Do While myArgNode ~= 0
	    myArgNode = cf_NextArgument(myArgNode)
	    ...
	  End
	  cf_UnlockArgList(myGrpNode)
	End
	...

@{b}   SEE ALSO@{ub}
	@{"cf_LockGrpList()" Link "cf_LockGrpList()"}, @{"cf_LockItemList()" Link "cf_LockItemList()"}, @{"cf_UnlockArgList()" Link "cf_UnlockArgList()"},
	@{"cf_NextArgument()" Link "cf_NextArgument()"}

@ENDNODE

@NODE "cf_LockGrpList()" "rexxconfigfile.library/cf_LockGrpList"

@{b}   NAME@{ub}
	cf_LockGrpList -- Locks the group list of the header for use.

@{b}   SYNOPSIS@{ub}
	FirstGrpNode = cf_LockGrpList(Header)

	FIRSTGRPNODE/N cf_LockGrpList(HEADER/N/A)

@{b}   FUNCTION@{ub}
	This function locks the group list of the header for use, or NULL
	if the header has no group nodes. The pointer returned by this is
	NOT an actual GrpNode pointer - you should use one of the other
	GrpNode calls to get actual pointers to GrpNode structures (such as
	@{"cf_NextGroup()" Link "cf_NextGroup()"}), passing the value returned by cf_LockGrpList()
	as the GrpNode value.

@{b}   INPUTS@{ub}
	Header - Pointer to the Header.

@{b}   RESULT@{ub}
	FirstGrpNode - First group node of the header or NULL.
		       NOT a valid node!

@{b}   EXAMPLE@{ub}
	...
	myGrpNode = cf_LockGrpList(myHeader)
	If myGrpNode ~= 0 Then Do
	  Do While myGrpNode ~= 0
	    myGrpNode = cf_NextGroup(myGrpNode)
	    ...
	  End
	  cf_UnlockGrpList(myHeader)
	End
	...

@{b}   SEE ALSO@{ub}
	@{"cf_LockArgList()" Link "cf_LockArgList()"}, @{"cf_LockItemList()" Link "cf_LockItemList()"}, @{"cf_UnlockGrpList()" Link "cf_UnlockGrpList()"},
	@{"cf_NextGroup()" Link "cf_NextGroup()"}

@ENDNODE

@NODE "cf_LockItemList()" "rexxconfigfile.library/cf_LockItemList"

@{b}   NAME@{ub}
	cf_LockItemList -- Locks the item list of an argument node for use.

@{b}   SYNOPSIS@{ub}
	FirstItemNode = cf_LockItemList(ArgNode)

	FIRSTITEMNODE/N cf_LockItemList(ARGNODE/N/A)

@{b}   FUNCTION@{ub}
	This function locks the item list of an argument node for use, or
	NULL if the argument node has no item nodes. The pointer returned by
	this is NOT an actual ItemNode pointer - you should use one of the
	other ItemNode calls to get actual pointers to ItemNode structures
	(such as @{"cf_NextItem()" Link "cf_NextItem()"}), passing the value returned by
	cf_LockItemList() as the ItemNode value.

@{b}   INPUTS@{ub}
	ArgNode - The argument node for item list.

@{b}   RESULT@{ub}
	FirstItemNode - First item node of the argument node or NULL.
			NOT a valid node!

@{b}   EXAMPLE@{ub}
	...
	myItemNode = cf_LockItemList(myArgNode)
	If myItemNode ~= 0 Then Do
	  Do While myItemNode ~= 0
	    myItemNode = cf_NextItem(myItemNode)
	    ...
	  End
	  cf_UnlockItemList(myArgNode)
	End
	...

@{b}   SEE ALSO@{ub}
	@{"cf_LockArgList()" Link "cf_LockArgList()"}, @{"cf_LockGrpList()" Link "cf_LockGrpList()"}, @{"cf_UnlockItemList()" Link "cf_UnlockItemList()"},
	@{"cf_NextItem()" Link "cf_NextItem()"}

@ENDNODE

@NODE "cf_NewArgItem()" "rexxconfigfile.library/cf_NewArgItem"

@{b}   NAME@{ub}
	cf_NewArgItem -- Creates a new argument node and a new item node.

@{b}   SYNOPSIS@{ub}
	ArgNode = cf_NewArgItem(GrpNode,Name,Contents [,Type][,SpecialType])

	ARGNODE/N cf_NewArgItem(GRPNODE/N/A,NAME/A,CONTENTS/A,TYPE,STYPE)

@{b}   FUNCTION@{ub}
	This function creates a new argument node and a new item node. The
	GrpNode must be a pointer to a group node.

@{b}   INPUTS@{ub}
	GrpNode - The group node for add to. (!!! not NULL !!!)
	Name - The name of the new argument node.
	Contents - The contents of the new item node.
	Type - Type of the contents.
	SpecialType - Special types for @{"cf_Write()" Link "cf_Write()"} or NULL for default.

@{b}   RESULT@{ub}
	ArgNode - The new argument node or NULL by failure.

@{b}   EXAMPLE@{ub}
	...
	
	cf_NewArgItem(myGrpNode,"ExampleArg","FooStr",ITYP_STRING)
	...

	In the CF file:

	...
	ExampleArg="FooStr"
	...

@{b}   SEE ALSO@{ub}
	@{"cf_NewGroup()" Link "cf_NewGroup()"}, @{"cf_NewItem()" Link "cf_NewItem()"}, @{"cf_NewArgument()" Link "cf_NewArgument()"}

@ENDNODE

@NODE "cf_NewArgument()" "rexxconfigfile.library/cf_NewArgument"

@{b}   NAME@{ub}
	cf_NewArgument -- Creates a new argument node.

@{b}   SYNOPSIS@{ub}
	ArgNode = cf_NewArgument(GrpNode,Name)

	ARGNODE/N cf_NewArgument(GRPNODE/N/A,NAME/A)

@{b}   FUNCTION@{ub}
	This function creates a new argument node. The GrpNode must be a
	pointer to a group node. 

@{b}   INPUTS@{ub}
	GrpNode - The group node for add to. (!!! not NULL !!!)
	Name - The name of the new argument node.

@{b}   RESULT@{ub}
	ArgNode - The new argument node or NULL by failure.

@{b}   EXAMPLE@{ub}
	...
	
	myArgNode = cf_NewArgument(myGrpNode,"ExampleArg")
	...

	In the CF file:

	...
	ExampleArg=
	...

@{b}   SEE ALSO@{ub}
	@{"cf_NewGroup()" Link "cf_NewGroup()"}, @{"cf_NewItem()" Link "cf_NewItem()"}, @{"cf_NewArgItem()" Link "cf_NewArgItem()"}

@ENDNODE

@NODE "cf_NewGroup()" "rexxconfigfile.library/cf_NewGroup"

@{b}   NAME@{ub}
	cf_NewGroup -- Creates a new group node.

@{b}   SYNOPSIS@{ub}
	GrpNode = cf_NewGroup(Header,Name)

	GRPNODE/N cf_NewGroup(HEADER/N/A,NAME/A)

@{b}   FUNCTION@{ub}
	This function creates a new group node. The Header must be a
	pointer to a @{"CFHeader" Link "INCLUDE:libraries/configfile.h/Main" 167} structure.

@{b}   INPUTS@{ub}
	Header - Pointer to the Header for add to. (!!! not NULL !!!)
	Name - Name of the new group node.

@{b}   RESULT@{ub}
	GrpNode - The new group node or NULL by failure.

@{b}   EXAMPLE@{ub}
	...
	
	myGrpNode = cf_NewGroup(myHeader,"ExampleGroup")
	cf_NewArgument(myGrpNode,"ExampleArg")
	...

	In the CF file:

	...
	[ExampleGroup]

	ExampleArg=
	...

@{b}   SEE ALSO@{ub}
	@{"cf_NewArgument()" Link "cf_NewArgument()"}, @{"cf_NewItem()" Link "cf_NewItem()"}, @{"cf_NewArgItem()" Link "cf_NewArgItem()"}

@ENDNODE

@NODE "cf_NewItem()" "rexxconfigfile.library/cf_NewItem"

@{b}   NAME@{ub}
	cf_NewItem -- Creates a new item node.

@{b}   SYNOPSIS@{ub}
	ItemNode = cf_NewItem(ArgNode,Contents [,Type] [,SpecialType])

	ITEMNODE/N cf_NewItem(ARGNODE/N/A,CONTENTS/A,TYPE,STYPE)

@{b}   FUNCTION@{ub}
	This function creates a new item node. The ArgNode must be a
	pointer to a argument node.

@{b}   INPUTS@{ub}
	ArgNode - The argument node for add to. (!!! not NULL !!!)
	Contents - The contents of the new item node.
	Type - Type of the contents.

	   ITYP_STRING -- String type (Contents is a NULL-terminated string)
	   ITYP_NUMBER -- Number type (Contents is long value e.g.
			  44253 or -23456)
	   ITYP_BOOL   -- Bool type   (Contents is long value TRUE or
			  FALSE)
	SpecialType - Special types for @{"cf_Write()" Link "cf_Write()"} or NULL for default.

	   ITYP_BOOL:

	     STYP_BOOL_YES  -- "YES/NO"
	     STYP_BOOL_TRUE -- "TRUE/FALSE"
	     STYP_BOOL_ON   -- "ON/OFF"

	   ITYP_NUMBER:

	     STYP_NUM_DEC   -- Decimal (e.g 24574)
	     STYP_NUM_HEX   -- Hexdecimal (e.g. $fDe2)
	     STYP_NUM_BIN   -- Binary (e.g. %10111)

@{b}   RESULT@{ub}
	ItemNode - The new group node or NULL by failure.

@{b}   EXAMPLE@{ub}
	...
	
	myArgNode = cf_NewArgument(myGrpNode,"ExampleArg")
	cf_NewItem(myArgNode,"Foo Str",ITYP_STRING)
	cf_NewItem(myArgNode,5467,ITYP_NUMBER,STYP_NUM_DEC)
	cf_NewItem(myArgNode,35678,ITYP_NUMBER,STYP_NUM_HEX)
	cf_NewItem(myArgNode,23,CF_ITYP_NUMBER,STYP_NUM_BIN)
	cf_NewItem(myArgNode,FALSE,ITYP_BOOL,STYP_NUM_ON)
	cf_NewItem(myArgNode,TRUE,ITYP_BOOL,STYP_NUM_ON)
	cf_NewItem(myArgNode,TRUE,ITYP_BOOL,STYP_NUM_YES)
	...

	In the CF file:

	...
	ExampleArg="Foo Str",5467,$865E,%10111,OFF,ON,YES
	...

@{b}   SEE ALSO@{ub}
	@{"cf_NewArgument()" Link "cf_NewArgument()"}, @{"cf_NewGroup()" Link "cf_NewGroup()"}, @{"cf_Write()" Link "cf_Write()"}, @{"cf_NewArgItem()" Link "cf_NewArgItem()"},
	@{"<libraries/configfile.h>" Link "INCLUDE:libraries/configfile.h/Main" 0}

@ENDNODE

@NODE "cf_NextArgument()" "rexxconfigfile.library/cf_NextArgument"

@{b}   NAME@{ub}
	cf_NextArgument -- Returns the next argument node.

@{b}   SYNOPSIS@{ub}
	NextArgNode = cf_NextArgument(ArgNode)

	NEXTARGNODE/N cf_NextArgument(ARGNODE/N/A)

@{b}   FUNCTION@{ub}
	This function returns the next argument node, or NULL if there are
	no more argument nodes in the list.

@{b}   INPUTS@{ub}
	ArgNode - The argument node.

@{b}   RESULT@{ub}
	NextArgNode - Next argument node or NULL.

@{b}   SEE ALSO@{ub}
	@{"cf_NextGroup()" Link "cf_NextGroup()"}, @{"cf_NextItem()" Link "cf_NextItem()"}, @{"cf_LockArgList()" Link "cf_LockArgList()"}

@ENDNODE

@NODE "cf_NextGroup()" "rexxconfigfile.library/cf_NextGroup"

@{b}   NAME@{ub}
	cf_NextGroup -- Returns the next group node.

@{b}   SYNOPSIS@{ub}
	NextGrpNode = cf_NextGroup(GrpNode)

	NEXTGRPNODE/N cf_NextGroup(GRPNODE/N/A)

@{b}   FUNCTION@{ub}
	This function returns the next group node, or NULL if there are no
	more group nodes in the list.

@{b}   INPUTS@{ub}
	GrpNode - The group node.

@{b}   RESULT@{ub}
	NextGrpNode - Next group node or NULL.

@{b}   SEE ALSO@{ub}
	@{"cf_NextArgument()" Link "cf_NextArgument()"}, @{"cf_NextItem()" Link "cf_NextItem()"}, @{"cf_LockGrpList()" Link "cf_LockGrpList()"}

@ENDNODE

@NODE "cf_NextItem()" "rexxconfigfile.library/cf_NextItem"

@{b}   NAME@{ub}
	cf_NextItem -- Returns the next item node.

@{b}   SYNOPSIS@{ub}
	NextItemNode = cf_NextItem(ItemNode)

	NEXTITEMNODE/N cf_NextItem(ITEMNODE/N/A)

@{b}   FUNCTION@{ub}
	This function returns the next item node, or NULL if there are no
	more item nodes in the list.

@{b}   INPUTS@{ub}
	ItemNode - The item node.

@{b}   RESULT@{ub}
	NextItemNode - Next item node or NULL.

@{b}   SEE ALSO@{ub}
	@{"cf_NextArgument()" Link "cf_NextArgument()"}, @{"cf_NextGroup()" Link "cf_NextGroup()"}, @{"cf_LockItemList()" Link "cf_LockItemList()"}

@ENDNODE

@NODE "cf_Open()" "rexxconfigfile.library/cf_Open"

@{b}   NAME@{ub}
	cf_Open -- Open a CF file.

@{b}   SYNOPSIS@{ub}
	Header = cf_Open(Name [,Mode] [,Flags] [,PuddleSize])

	HEADER/N cf_Open(NAME/A,OMODE,FLAGS,PUDDLESIZE)

@{b}   FUNCTION@{ub}
	This function create a memory pool with a specify puddlesize or
	default (2048 bytes), allocate pool memory for the header, open or
	create a new CF file and check which format type has the file (ascii
	or short format). And if the flag OFLG_READ_TOO set, the file will
	be read too.

@{b}   INPUTS@{ub}
	Name - Name and path of the CF file.
	Mode - Openmodes:

		OMODE_OLDFILE   - An existing file is opened. Did the file
				  not exists the function failed. (default)
		OMODE_NEWFILE   - A new file will be create.
		OMODE_READWRITE - Opens a file, but creates it if it didn't
				  exist.
	Flags - extra flags:

		OFLG_READ_TOO   - Reads the file directly after the
				  it is open. You didn't need use
				  @{"cf_Read()" Link "cf_Read()"}.

	PuddleSize - Size of the puddle or NULL for default (2048 bytes).

@{b}   RESULT@{ub}
	Header - a pointer to an initialized Header, or FALSE if the CF
		 file could not be opened. In the case of a FALSE return,
		 the RC var can be read to obtain more information on the
		 failure.

	RC (rexx variable) - contains an error string.

		 OERR_UNKOWN     - Unkown failure.
		 OERR_OPEN_FILE  - Couldn't open CF file.
		 OERR_READ_FILE  - Couldn't read CF file.
		 OERR_NO_FORMAT  - File isn't in CF format.
		 OERR_NO_SIZE    - File hasn't a size.
		 OERR_HEADER_MEM - No memory for Header.

		 @{"cf_Read()" Link "cf_Read()"} errors, only if the OFLG_READ_TOO flag set.

		 RERR_FORMAT       - File has an error in the format
				     structure.
		 RERR_UNKOWN_ITYPE - An unkown item type was found.

@{b}   EXAMPLE@{ub}
	Header = cf_Open("SYS:test.cfg",,OFLG_READ_TOO)
	If Header ~= '0' Then Do
	  ...
	  cf_Close(Header)
	End
	Else Do
	  Select
	    When RC = OERR_OPEN_FILE    Then EStr = "Couldn't open file!"
	    When RC = OERR_READ_FILE    Then EStr = "Couldn't read file!"
	    When RC = OERR_NO_FORMAT    Then EStr = "File isn't in format!"
	    When RC = OERR_NO_SIZE      Then EStr = "File hasn't a size!"
	    When RC = OERR_HEADER_MEM   Then EStr = "No memory for Header!"

	    When RC = RERR_FORMAT       Then EStr = "Error in the format!"
	    When RC = RERR_UNKOWN_ITYPE Then EStr = "Unkown item type!"
	    Otherwise EStr = "Unkown failure!"
	  End
	  Say "cf_Open:" EStr
	End

	...
	
@{b}   SEE ALSO@{ub}
	@{"cf_Close()" Link "cf_Close()"}, @{"cf_Read()" Link "cf_Read()"}, @{"cf_Write()" Link "cf_Write()"}, @{"exec.library/CreatePool()" Link "exec/CreatePool()"}

@ENDNODE

@NODE "cf_Read()" "rexxconfigfile.library/cf_Read"

@{b}   NAME@{ub}
	cf_Read -- Read a CF file.

@{b}   SYNOPSIS@{ub}
	Result = cf_Read(Header)

	@{"BOOL" Link "INCLUDE:exec/types.h/Main" 68} cf_Read(HEADER/N/A)

@{b}   FUNCTION@{ub}
	This function clears all nodes and read the CF file new. The
	HFLG_CHANGED flag in Header will be clear.

@{b}   INPUTS@{ub}
	Header - The Header of the file.

@{b}   RESULT@{ub}
	Result - TRUE for success or in case of FALSE return, the RC var
		 can be read to obtain more.

	RC (rexx variable) - contains an error string.

		 RERR_UNKOWN       - Unkown failure.
		 RERR_BUFFER_MEM   - No memory for buffer.
		 RERR_READ_FILE    - Couldn't read the file.
		 RERR_FORMAT       - File has an error in the format
				     structure.
		 RERR_UNKOWN_ITYPE - An unkown item type was found.

@{b}   SEE ALSO@{ub}
	@{"cf_Open()" Link "cf_Open()"}, @{"cf_Close()" Link "cf_Close()"}, @{"cf_Write()" Link "cf_Write()"}

@ENDNODE

@NODE "cf_RemHdrFlag()" "rexxconfigfile.library/cf_RemHdrFlag"

@{b}   NAME@{ub}
	cf_RemHdrFlag -- Remove a flag to the Header.

@{b}   SYNOPSIS@{ub}
	cf_RemHdrFlag(Header,Flag)

	cf_RemHdrFlag(HEADER/N/A,FLAG/A)

@{b}   FUNCTION@{ub}
	This function remove a flag to the Header.

@{b}   INPUTS@{ub}
	Header - Pointer to the Header.
	Flag - Flag to remove (see @{"cf_ChkHdrFlag()" Link "cf_ChkHdrFlag()"}).

@{b}   SEE ALSO@{ub}
	@{"cf_ChkHdrFlag()" Link "cf_ChkHdrFlag()"}, @{"cf_AddHdrFlag()" Link "cf_AddHdrFlag()"}

@ENDNODE

@NODE "cf_RemoveArgument()" "rexxconfigfile.library/cf_RemoveArgumentxconfigfile.library/cf_RemoveArgument"

@{b}   NAME@{ub}
	cf_RemoveArgument -- Remove an argument node.

@{b}   SYNOPSIS@{ub}
	cf_RemoveArgument(ArgNode)

	cf_RemoveArgument(ARGNODE/N/A)

@{b}   FUNCTION@{ub}
	This function remove an argument node. Note don't adds the removed
	ArgNode to another open CF file.

@{b}   INPUTS@{ub}
	ArgNode - The argument node to remove.

@{b}   SEE ALSO@{ub}
	@{"cf_RemoveGroup()" Link "cf_RemoveGroup()"}, @{"cf_RemoveItem()" Link "cf_RemoveItem()"}

@ENDNODE

@NODE "cf_RemoveGroup()" "rexxconfigfile.library/cf_RemoveGroup"

@{b}   NAME@{ub}
	cf_RemoveGroup -- Remove a group node.

@{b}   SYNOPSIS@{ub}
	cf_RemoveGroup(GrpNode)

	cf_RemoveGroup(GRPNODE/N/A)

@{b}   FUNCTION@{ub}
	This function remove a group node. Note don't adds the removed 
	GrpNode to another open CF file.

@{b}   INPUTS@{ub}
	GrpNode - The group node to remove.

@{b}   SEE ALSO@{ub}
	@{"cf_RemoveArgument()" Link "cf_RemoveArgument()"}, @{"cf_RemoveItem()" Link "cf_RemoveItem()"}

@ENDNODE

@NODE "cf_RemoveItem()" "rexxconfigfile.library/cf_RemoveItem"

@{b}   NAME@{ub}
	cf_RemoveItem -- Remove an item node.

@{b}   SYNOPSIS@{ub}
	cf_RemoveItem(ItemNode)

	cf_RemoveItem(ITEMNODE/N/A)

@{b}   FUNCTION@{ub}
	This function remove an item node. Note don't adds the removed 
	ItemNode to another open CF file.

@{b}   INPUTS@{ub}
	ItemNode - The item node to remove.

@{b}   SEE ALSO@{ub}
	@{"cf_RemoveGroup()" Link "cf_RemoveGroup()"}, @{"cf_RemoveArgument()" Link "cf_RemoveArgument()"}

@ENDNODE

@NODE "cf_SetWBufSize()" "rexxconfigfile.library/cf_SetWBufSize"

@{b}   NAME@{ub}
	cf_SetWBufSize -- Set the size of the writebuffer in the Header.

@{b}   SYNOPSIS@{ub}
	cf_SetWBufSize(Header,NewSize)

	cf_SetWBufSize(HEADER/N/A,NEWSIZE/A)

@{b}   FUNCTION@{ub}
	This function set the size of the writebuffer in the Header.

@{b}   INPUTS@{ub}
	Header - Pointer to the Header.
	NewSize - New size of the writebuffer (2048 - X bytes).
		  Note the size must be longword aligned.

@{b}   SEE ALSO@{ub}
	@{"cf_GetWBufSize()" Link "cf_GetWBufSize()"}

@ENDNODE

@NODE "cf_UnlockArgList()" "rexxconfigfile.library/cf_UnlockArgListexxconfigfile.library/cf_UnlockArgList"

@{b}   NAME@{ub}
	cf_UnlockArgList -- Unlocks the argument list of the group node.

@{b}   SYNOPSIS@{ub}
	cf_UnlockArgList(GrpNode)

	cf_UnlockArgList(GRPNODE/N/A)

@{b}   FUNCTION@{ub}
	This function unlocks the access on the argument list.

@{b}   INPUTS@{ub}
	GrpNode - The group node for the argument list.

@{b}   SEE ALSO@{ub}
	@{"cf_UnlockGrpList()" Link "cf_UnlockGrpList()"}, @{"cf_UnlockItemList()" Link "cf_UnlockItemList()"}, @{"cf_LockArgList()" Link "cf_LockArgList()"}

@ENDNODE

@NODE "cf_UnlockGrpList()" "rexxconfigfile.library/cf_UnlockGrpListexxconfigfile.library/cf_UnlockGrpList"

@{b}   NAME@{ub}
	cf_UnlockGrpList -- Unlocks the group list of the header.

@{b}   SYNOPSIS@{ub}
	cf_UnlockGrpList(Header)

	cf_UnlockGrpList(HEADER/N/A)

@{b}   FUNCTION@{ub}
	This function unlocks the access on the group list.

@{b}   INPUTS@{ub}
	Header - Pointer to the @{"CFHeader" Link "INCLUDE:libraries/configfile.h/Main" 167} structure.

@{b}   SEE ALSO@{ub}
	@{"cf_UnlockArgList()" Link "cf_UnlockArgList()"}, @{"cf_UnlockItemList()" Link "cf_UnlockItemList()"}, @{"cf_LockGrpList()" Link "cf_LockGrpList()"}

@ENDNODE

@NODE "cf_UnlockItemList()" "rexxconfigfile.library/cf_UnlockItemListxconfigfile.library/cf_UnlockItemList"

@{b}   NAME@{ub}
	cf_UnlockItemList -- Unlocks the item list of the argument node.

@{b}   SYNOPSIS@{ub}
	cf_UnlockItemList(ArgNode)

	cf_UnlockItemList(ARGNODE/N/A)

@{b}   FUNCTION@{ub}
	This function unlocks the access on the item list.

@{b}   INPUTS@{ub}
	ArgNode - The argument node for item list.

@{b}   SEE ALSO@{ub}
	@{"cf_UnlockArgList()" Link "cf_UnlockArgList()"}, @{"cf_UnlockGrpList()" Link "cf_UnlockGrpList()"}, @{"cf_LockItemList()" Link "cf_LockItemList()"}

@ENDNODE

@NODE "cf_Write()" "rexxconfigfile.library/cf_Write"

@{b}   NAME@{ub}
	cf_Write -- Write a CF file new.

@{b}   SYNOPSIS@{ub}
	Result = cf_Write(Header [,WriteMode])

	@{"BOOL" Link "INCLUDE:exec/types.h/Main" 68} cf_Write(HEADER/N/A,WMODE,FLAGS)

@{b}   FUNCTION@{ub}
	This function writes the CF file new. Note is the HFLG_CHANGED
	flag in Header flags not set the file will be not writes new.

@{b}   INPUTS@{ub}
	Header - The Header of the file to write.
	WMode - Write modes:

		WMODE_DEFAULT -- Writes the file in default format
				 from Header.
		WMODE_ASCII   -- Writes the file in ascii format.
		WMODE_SHORT   -- Writes the file in short format.

	Flags - Flags:

		WFLG_WRITE_ALWAYS -- cf_Write() checks not if the
				     HFLG_CHANGED flag set and
				     writes always the file.

@{b}   RESULT@{ub}
	Result - TRUE for success or in case of FALSE return, the RC var
		 can be read to obtain more.

	RC (rexx variable) - contains an error string.

		 WERR_UNKOWN        - Unkown failure.
		 WERR_ALLOC_WBUFFER - No memory for WriteBuffer.

@{b}   SEE ALSO@{ub}
	@{"cf_Open()" Link "cf_Open()"}, @{"cf_Close()" Link "cf_Close()"}, @{"cf_Read()" Link "cf_Read()"}

@ENDNODE

