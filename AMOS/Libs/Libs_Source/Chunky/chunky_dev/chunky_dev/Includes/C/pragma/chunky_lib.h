#ifndef _INCLUDE_CHUNKY_H
#define _INCLUDE_CHUNKY_H

/*
 * File generated by StormLink from chunky.fd
 * DO NOT EDIT
 * $VER: chunky.library 4.1 (18-Mar-99)
 */
#ifdef __cplusplus
extern "C" {
#endif
#pragma amicall(ChunkyBase, 0x1e, CHK_InitChunky(d0, d1))
#pragma amicall(ChunkyBase, 0x24, CHK_InitColours(a0))
#pragma amicall(ChunkyBase, 0x2a, CHK_FreeChunky(a0))
#pragma amicall(ChunkyBase, 0x30, CHK_DrawChunkyArea(a0, a1, d0, d1, d2, d3))
#pragma amicall(ChunkyBase, 0x36, CHK_DrawChunky(a0, a1, d0, d1))
#pragma amicall(ChunkyBase, 0x3c, CHK_InsertChunky(a0, a1, d0, d1))
#pragma amicall(ChunkyBase, 0x42, CHK_CreateChunkyFromBitMap(a0, d0, d1, d2, d3))
#pragma amicall(ChunkyBase, 0x48, CHK_CreateChunkyFromRastPort(a0, d0, d1, d2, d3))
#pragma amicall(ChunkyBase, 0x4e, CHK_SetDrMd(a0, d0))
#pragma amicall(ChunkyBase, 0x54, CHK_SetAPen(a0, d0))
#pragma amicall(ChunkyBase, 0x5a, CHK_SetOPen(a0, d0))
#pragma amicall(ChunkyBase, 0x60, CHK_SetABOPen(a0, d0, d1, d2))
#pragma amicall(ChunkyBase, 0x66, CHK_Move(a0, d0, d1))
#pragma amicall(ChunkyBase, 0x6c, CHK_WritePixel(a0, d0, d1, d2))
#pragma amicall(ChunkyBase, 0x72, CHK_ReadPixel(a0, d0, d1))
#pragma amicall(ChunkyBase, 0x78, CHK_Draw(a0, d0, d1))
#pragma amicall(ChunkyBase, 0x7e, CHK_DrawLine(a0, d0, d1, d2, d3))
#pragma amicall(ChunkyBase, 0x84, CHK_DrawRect(a0, d0, d1, d2, d3))
#pragma amicall(ChunkyBase, 0x8a, CHK_RectFill(a0, d0, d1, d2, d3))
#pragma amicall(ChunkyBase, 0x90, CHK_DrawEllipse(a0, d0, d1, d2, d3))
#pragma amicall(ChunkyBase, 0x96, CHK_SetRast(a0, d0))
#pragma amicall(ChunkyBase, 0x9c, CHK_SetSoftStyle(a0, d0))
#pragma amicall(ChunkyBase, 0xa2, CHK_SetFont(a0, a1))
#pragma amicall(ChunkyBase, 0xa8, CHK_TextLength(a0, a1, d0))
#pragma amicall(ChunkyBase, 0xae, CHK_Text(a0, a1))
#pragma amicall(ChunkyBase, 0xb4, CHK_TextCentre(a0, a1, d0))
#pragma amicall(ChunkyBase, 0xba, CHK_ChooseHardwareMode(d0))
#pragma amicall(ChunkyBase, 0xc0, CHK_DrawChunkyChunkyArea(a0, a1, d0, d1, d2, d3, d4, d5))
#pragma amicall(ChunkyBase, 0xc6, CHK_DrawChunkyChunky(a0, a1, d0, d1))
#pragma amicall(ChunkyBase, 0xcc, CHK_DrawTransparentRectangle(a0, d0, d1, d2, d3))
#pragma amicall(ChunkyBase, 0xd2, CHK_GetChunkyPort(a0, d0))
#pragma amicall(ChunkyBase, 0xd8, CHK_PutChunkyColours(a0, a1))
#pragma amicall(ChunkyBase, 0xde, CHK_DrawChunkyTiled(a0, a1, d0, d1, d2, d3))
#pragma amicall(ChunkyBase, 0xe4, CHK_C2POff())
#pragma amicall(ChunkyBase, 0xea, CHK_DrawChunkyWindowArea(a0, a1, d0, d1, d2, d3))
#pragma amicall(ChunkyBase, 0xf0, CHK_DrawChunkyWindow(a0, a1, d0, d1))
#pragma amicall(ChunkyBase, 0xf6, CHK_QueryUseOS())
#pragma amicall(ChunkyBase, 0xfc, CHK_CloneChunkyPort(a0))
#pragma amicall(ChunkyBase, 0x102, CHK_SetBPen(a0, d0))
#pragma amicall(ChunkyBase, 0x108, CHK_ClearChunky(a0))
#pragma amicall(ChunkyBase, 0x10e, CHK_CopyChunkyChunkyArea(a0, d0, d1, d2, d3))
#pragma amicall(ChunkyBase, 0x114, CHK_FlipChunkyPort(a0, d0))
#pragma amicall(ChunkyBase, 0x11a, CHK_EndScroll(a0))
#pragma amicall(ChunkyBase, 0x120, CHK_BeginScroll(a0, d0, d1, d2, d3))
#pragma amicall(ChunkyBase, 0x126, CHK_Scroll(a0, d0, d1, d2, d3, d4, d5))
// #pragma amicall(ChunkyBase, 0x12c, CHK_Rotate(a0, d0))
#pragma amicall(ChunkyBase, 0x132, CHK_Scale(a0, d0, d1))
#pragma amicall(ChunkyBase, 0x138, CHK_SimpleScale(a0, d0, d1))
#pragma amicall(ChunkyBase, 0x13e, CHK_ConvertCMAP(a0, a1, d0))
#pragma amicall(ChunkyBase, 0x144, CHK_SetRGB32(a0, d0, d1, d2, d3))
#pragma amicall(ChunkyBase, 0x14a, CHK_SetRGB4(a0, d0, d1, d2, d3))
#pragma amicall(ChunkyBase, 0x150, CHK_GetRGB32(a0, d0))
#pragma amicall(ChunkyBase, 0x156, CHK_GetRGB4(a0, d0, a1))
#pragma amicall(ChunkyBase, 0x15c, CHK_LoadRGB32(a0, a1))
#ifdef __cplusplus
};
#endif
#endif
