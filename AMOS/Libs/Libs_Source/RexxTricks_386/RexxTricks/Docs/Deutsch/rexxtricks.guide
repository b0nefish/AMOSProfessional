@database rexxtricks.guide

@Master rexxtricks.texi

@Width 76


This is the AmigaGuide® file rexxtricks.guide, produced by Makeinfo-1.55 from 
the input file rexxtricks.texi.


@Node Main "rexxtricks.guide"



##########################################################################

                    'rexxtricks.library' 38.6 (12.4.96)

   Copyright (C) 1994,95 Jürgen Kohrmeyer, <J_Kohrmeyer@wilam.north.de>

##########################################################################

   Die 'rexxtricks.library' ist eine ARexx-Funktionslibrary. Die Funktionen
lassen sich keinem bestimmten Anwendungsgebiet zuordnen, es ist vielmehr
eine Sammlung von Funktionen die ich schon immer beim Programmieren mit
ARexx vermißt habe.  Vorschläge für andere nützliche Funktionen sind
immer willkommen, also teilt mir Eure Wünsche bitte mit.


 @{" Copyright " Link "Copyright"}                  Copyright und sonstige rechtliche Dinge
 @{" History " Link "History"}                    Geschichtliche Entwicklung der Library
 @{" Danksagungen " Link "Danksagungen"}               Ich möchte mich bedanken bei...
 @{" Adresse des Autors " Link "Adresse des Autors"}         Wohin man Kommentare und Bugreports schickt
 @{" Systemvoraussetzungen " Link "Systemvoraussetzungen"}      68040, 18MB Ram ;-)
 @{" Installation " Link "Installation"}               Installation der Library
 @{" Funktionen der Library " Link "Funktionen der Library"}     Übersicht über die Funktionen der Library
 @{" Das VIEWLIST() Fenster " Link "Das VIEWLIST() Fenster"}     Bedienung des Auswahlfensters
 @{" Index " Link "Index"}                      Inhaltsverzeichnis


@EndNode

@Node "Copyright" "rexxtricks.guide/Copyright"
@Next "History"
@Prev "Main"
@Toc "Main"

Copyright und sonstige rechtliche Dinge
***************************************

   Die 'rexxtricks.library' ist FREEWARE, das Copyright liegt weiterhin beim
Autor, Jürgen Kohrmeyer. Die Library darf von jedem benutzt werden. Das
Archiv darf frei kopiert werden solange es unverändert weitergegeben, und
nur eine geringe Kopiergebühr erhoben wird. Die Weitergabe per DFUe wird
von mir befürwortet. Das Archiv darf in Public-Domain Sammlungen
aufgenommen werden, es darf jedoch @{b}*nicht*@{ub} auf Disketten vertrieben werden
die mehr als 3,- DM kosten! Dieses Limit gilt @{b}*insbesondere*@{ub} für deutsche
PD-Händler! Die 'rexxtricks.library' darf nur auf 'CD-ROM' vertrieben
werden, wenn der Preis für eine CD 30,- DM nicht übersteigt!

   Der Autor gibt keine Garantie für die Zuverlässigkeit der im Archiv
befindlichen Dateien! Sie benutzen die Library auf eigene Gefahr! Der Autor
kann nicht für irgendwelche Schäden haftbar gemacht werden, die durch die
Anwendung der 'rexxtricks.library' entstehen.


Programme die im Archiv enthalten sind:
--------------------------------------
Das ARexx-Programm 'FindGUI' verwendet das Programm 'Find'.
'FindGUI' ist Copyright (C) by Nils Görs.
'Find' ist Copyright (C) by Ralph Seichter.

Das Arexx-Programm 'RDBBackup' verwendet das Programm 'ReadRDB'.
'ReadRDB' ist Copyright (C) by Gérard Cornu.

'FindGUI' und 'RDBBackup' verwenden die 'triton.library'.
Die 'triton.library' ist Copyright (C) by Stefan Zeiger.


Programme die nicht im Archiv enthalten sind:
--------------------------------------------
Die Funktionen 'WHATIS' und 'WHATISTYPES' benutzen die 'whatis.library'.
Die 'whatis.library' ist Copyright (C) Sylvain Rougier und Pierre Carrette.

Die Funktionen 'FILEID_IDENTIFY', 'FILEID_GETHIGHID', 'FILEID_GETIDSTRING'
und 'FILEID_GETTYPES' benutzen die 'FileID.library'. Die 'FileID.library'
ist Copyright (C) Oliver Lange.

Die Funktion 'CRC32' verwendet die 32-Bit CRC-Tabelle die auch beim ZModem
Protokoll Verwendung findet. Diese Tabelle ist Copyright (C) by Gary S.
Brown. Der Quelltext der Funktion wurde dem Programm 'crc32' von Stephen
Satchell, Satchell Evaluations und Chuck Forsberg, Omen Technology entnommen.


@EndNode

@Node "History" "rexxtricks.guide/History"
@Next "Danksagungen"
@Prev "Copyright"
@Toc "Main"

Entstehungsgeschichte
*********************

@{b}V37.9ß@{ub}
        @{b}*@{ub} Erste Betaversion

@{b}V37.10ß@{ub}
        @{b}*@{ub} Schlimmer Bug im Dispatcher beseitigt, der Aufruf einer nicht
          bekannten Funktion führte zu Fehlern. Da ARexx selbst Funktionen
          an Libraries schickt, wenn diese sonst nicht bekannt sind, kam
          der ARexx-Interpreter durcheinander.

        @{b}*@{ub} Mehrere Enforcer-Hits beseitigt

@{b}V37.11ß@{ub}
        @{b}*@{ub} Die Funktion 'VIEWLIST' kann eine Liste jetzt aufsteigend
          sortiert anzeigen

        @{b}*@{ub} Neue Funktion 'QSORT' implementiert

        @{b}*@{ub} Neue Funktion 'BSEARCH' implementiert

        @{b}*@{ub} Neue Funktion 'SEQSEARCH' implementiert

@{b}V37.12ß@{ub}
        @{b}*@{ub} Bei der Funktion 'VIEWLIST' kann jetzt die Breite des Fensters
          angegeben werden

        @{b}*@{ub} Das Fenster der 'VIEWLIST'-Funktion hat eine Suchfunktion bekommen

        @{b}*@{ub} Die Tastaturbedienung des Fensters der 'VIEWLIST'-Funktion wurde
          stark erweitert

@{b}V37.13ß@{ub}
        @{b}*@{ub} Im Fenster der 'VIEWLIST'-Funktion lassen sich Einträge jetzt
          auch mit der Leertaste markieren

@{b}V37.14ß@{ub}
        @{b}*@{ub} 'SEQSEARCH' umbenannt in 'LSEARCH' für lineare Suche

        @{b}*@{ub} 'QSORT' kann jetzt auch eine Stem-Variable direkt sortieren

        @{b}*@{ub} Neue Funktion 'GETKEY' implementiert

@{b}V37.15@{ub}
        @{b}*@{ub} Erste öffentliche Release

        @{b}*@{ub} Kleinere interne Bugs beseitigt

        @{b}*@{ub} Neue Funktion 'MATCHPATTERN' implementiert

        @{b}*@{ub} 'QSORT', 'BSEARCH' und 'LSEARCH' können jetzt optional auch
          Groß- und Kleinbuchstaben unterscheiden

        @{b}*@{ub} Neue Dokumentation, jetzt auch als AmigaGuide

@{b}V37.16@{ub}
        @{b}*@{ub} Bug in der Funktion 'MAKEPATH' beseitigt

        @{b}*@{ub} Neue Funktion 'WHATIS' implementiert

        @{b}*@{ub} Neue Funktion 'WHATISTYPES' implementiert

@{b}V37.17@{ub}
        @{b}*@{ub} Neue Funktion 'GETDEFAULTPUBSCREEN' implementiert

        @{b}*@{ub} Neue Funktion 'SETDEFAULTPUBSCREEN' implementiert

        @{b}*@{ub} Neue Funktion 'GETPUBSCREENMODES' implementiert

        @{b}*@{ub} Neue Funktion 'SETPUBSCREENMODES' implementiert

        @{b}*@{ub} Neue Funktion 'PUBSCREENTOFRONT' implementiert

        @{b}*@{ub} Neue Funktion 'PUBSCREENTOBACK' implementiert

        @{b}*@{ub} Neue Funktion 'PUBSCREENLIST' implementiert

@{b}V37.18@{ub}
        @{b}*@{ub} Das Fenster der 'VIEWLIST'-Funktion hat ein Zoom-Gadget bekommen

        @{b}*@{ub} Die 'locale.library' wird jetzt vollständig unterstützt

        @{b}*@{ub} Neue Funktion 'CRC32' implementiert

@{b}V37.19@{ub}
        @{b}*@{ub} Einige interne Bugs beseitigt

@{b}V37.20@{ub}
        @{b}*@{ub} Neue Funktion 'READFILE' implementiert

        @{b}*@{ub} Neue Funktion 'WRITEFILE' implementiert

@{b}V37.21ß@{ub}
        @{b}*@{ub} Bug in der Funktion 'QSORT' entfernt, Strings mit mehr als 2048
          Zeichen wurden nicht korrekt sortiert

        @{b}*@{ub} Bug in der Dispatch-Funktion entfernt. Alle Funktionen, die auf
          Dateien zugreifen, lieferten einen Fehler wenn die angegebene
          Datei nicht existierte, und brachen damit das Script ab.

        @{b}*@{ub} Die Funktion 'READFILE' arbeitet jetzt schneller wenn genügend
          Speicher für die gesamte Datei vorhanden ist

        @{b}*@{ub} Neue Funktion 'COUNTCHARS' implementiert

@{b}V37.22ß@{ub}
        @{b}*@{ub} Erweiterung der Funktion 'VIEWLIST', anstelle der Gadgets
          'Benutzen' und 'Abbrechen' können jetzt beliebig viele Gadgets
          eingebunden werden

        @{b}*@{ub} Erweiterung der Funktion 'VIEWLIST', neues Gadget zum
          automatischen Markieren nach Muster

        @{b}*@{ub} Neue Funktion 'SEARCHPATTERN' implementiert

        @{b}*@{ub} Neue Funktion 'GETTOOLTYPEVALUE' implementiert

        @{b}*@{ub} Neue Funktion 'SETTOOLTYPEVALUE' implementiert

        @{b}*@{ub} Neue Funktion 'GETTOOLTYPES' implementiert

        @{b}*@{ub} Neue Funktion 'SETTOOLTYPES' implementiert

        @{b}*@{ub} Neue Funktion 'GETDEFAULTTOOL' implementiert

        @{b}*@{ub} Neue Funktion 'SETDEFAULTTOOL' implementiert

        @{b}*@{ub} Neue Funktion 'GETSTACK' implementiert

        @{b}*@{ub} Neue Funktion 'SETSTACK' implementiert

        @{b}*@{ub} Neue Funktion 'CREATEICON' implementiert

        @{b}*@{ub} Neue Funktion 'WBINFO' implementiert (Ab Kickstart 39.xx)

@{b}V37.23ß@{ub}
        @{b}*@{ub} Bug in der Funktion 'VIEWLIST' beseitigt, beim Markieren nach
          Muster kam die Anzeige teilweise durcheinander

        @{b}*@{ub} Im Listview-Fenster wird jetzt ein Busypointer angezeigt, wenn
          das Suchen oder Markieren länger dauert (Ab Kickstart 39.xx)

        @{b}*@{ub} Neue Funktion 'SUFFIXPART' implementiert

        @{b}*@{ub} Neue Funktion 'MAKESUFFIX' implementiert

@{b}V37.24@{ub}
        @{b}*@{ub} Bug in der Funktion 'BSEARCH' beseitigt, die Funktion gab
          manchmal fälschlicherweise einen Fehler zurück

        @{b}*@{ub} Im Listview-Fenster wird jetzt bei Auswahl der Funktionen
          'Suchen' und 'Nach Muster markieren' das Texteingabefeld
          aktiviert, wenn noch kein Muster eingegeben ist.

        @{b}*@{ub} Neues Argument 'start' bei der Funktion 'SEARCHPATTERN', damit
          kann angegeben werden ab welcher Zeile oder welchem Byte in der
          Datei gesucht werden soll.

        @{b}*@{ub} Neues Argument 'start' bei der Funktion 'BSEARCH'! Scripts, die
          für eine ältere Version der 'RexxTricks.library' geschrieben
          wurden, funktionieren weiterhin, dennoch sollte jeder seine
          Scripts an die neue Version anpassen!

@{b}V38.2@{ub}
        @{b}*@{ub} Neu übersetzt mit SAS/C V6.55

        @{b}*@{ub} Änderung des Datenformates bei sämtlichen Listen! Aus Gründen
          der Kompatibilität zu anderen ARexx-Anwendungen wird die Anzahl
          der Elemente ab der Version 38.2 in 'stemvar.0' gespeichert, die
          Daten beginnen bei 'stemvar.1'. Das alte Element 'stemvar.count'
          existiert nicht mehr! Alle alten Scripts, die von dieser
          Änderung betroffene Funktionen verwenden, sind nicht mehr
          lauffähig und müssen entsprechend geändert werden!

        @{b}*@{ub} Alle Funktionen können jetzt auch über ein Alias aufgerufen
          werden, indem man dem Funktionsnamen 'RXTR_' voranstellt. Dadurch
          ist es möglich gleichnamige Funktionen zu verwenden, wenn man die
          'rexxtricks.library' mit niedriger Priorität einbindet.

        @{b}*@{ub} Bug in der Funktion 'READFILE' beseitigt, die Funktion kann jetzt
          auch aus 'PIPE:' lesen

        @{b}*@{ub} Bug in der Funktion 'VIEWLIST' beseitigt, bei Abbruch wurde als
          Nummer des ausgewählten Gadgets nicht 0 zurückgegeben

        @{b}*@{ub} Bug in der Funktion 'VIEWLIST' beseitigt, auf einem Screen mit
          einer anderen Hintergrundfarbe als 0 konnte man fast nichts mehr
          erkennen

        @{b}*@{ub} Beim Listview-Fenster kann jetzt auch die Höhe und die linke
          obere Ecke angegeben werden, außerdem läßt sich die Position
          des verkleinerten Fensters bestimmen.

        @{b}*@{ub} Der Multiselect-Modus des Listview-Fensters kann jetzt
          abgeschaltet werden

        @{b}*@{ub} Im Listview-Fenster kann jetzt die Auswahl durch Doppelklick auf
          einen Eintrag beendet werden, als ausgewähltes Gadget wird dann
          1 zurückgegeben

        @{b}*@{ub} Neues Gadget 'Umschalten' im Listview-Fenster, damit kann die
          Markierung aller Einträge umgschaltet werden.

        @{b}*@{ub} Die Funktion 'LSEARCH' kann jetzt auch nach Namensmustern suchen,
          Namensmuster werden durch das Argument 'PATTERN' eingeschaltet.

        @{b}*@{ub} Neue Funktion 'REXXTRICKSVERSION' implementiert

@{b}V38.3@{ub}
        @{b}*@{ub} Bug in der Funktion 'QSORT()' beseitigt. Das Sortieren mit
          Speichern der Ergebnisse in eine neue Variable (destvar) brachte
          den Rechner in vielen Fällen zum Absturz.

        @{b}*@{ub} Bug beseitigt, der die Versionserkennung durch den Installer
          verhinderte. Im RomTag der Library war der Versionsstring nicht
          korrekt eingetragen.

@{b}V38.4@{ub}
        @{b}*@{ub} Bug in der Funktion 'VIEWLIST()' beseitigt. Beim Vergrößern des
          Fensters mit dem Zoom-Gadget wurde zu langer Text nicht
          abgeschnitten, und der Rollbalken dadurch überschrieben.

        @{b}*@{ub} Bug in der Funktion 'GETTOOLTYPES()' beseitigt. Bei einem Icon
          ohne Tooltypes brach die Funktion mit einem Fehler ab.

        @{b}*@{ub} Bug in der Funktion 'READFILE()' beseitigt. Beim Lesen einer
          leeren Datei wurde 'stemvar.0' auf den Wert 1 anstatt auf 0
          gesetzt.

@{b}V38.5@{ub}
        @{b}*@{ub} Neue Funktion 'READLINES'

        @{b}*@{ub} Neue Funktion 'WRITELINES'

        @{b}*@{ub} Neue Funktion 'STEMCOPY'

        @{b}*@{ub} Neue Funktion 'STEMREMOVE'

        @{b}*@{ub} Neue Funktion 'RAND'

        @{b}*@{ub} Neue Funktion 'READCLIPBOARD'

        @{b}*@{ub} Neue Funktion 'WRITECLIPBOARD'

        @{b}*@{ub} Neue Funktion 'SCSI_MANUFACTURER'

        @{b}*@{ub} Neue Funktion 'SCSI_PRODUCT'

        @{b}*@{ub} Neue Funktion 'SCSI_REVISION'

        @{b}*@{ub} Neue Funktion 'SCSI_DEVICETYPE'

        @{b}*@{ub} Neue Funktion 'SCSI_TESTREADY'

@{b}V38.6@{ub}
        @{b}*@{ub} Englische Dokumentation

        @{b}*@{ub} Bug in der Funktion 'VIEWLIST' entfernt, bei aktiviertem Fenster
          funktionierte kein MouseBlanker

        @{b}*@{ub} Erweiterung der Funktion 'QSORT' durch mehrere neue Optionen

        @{b}*@{ub} Die Funktion 'SEARCHPATTERN' speichert nun die gefundene Zeile in
          der ARexx Variablen 'RESULT'.

        @{b}*@{ub} Neue Funktion 'FILEID_IDENTIFY'

        @{b}*@{ub} Neue Funktion 'FILEID_GETHIGHID'

        @{b}*@{ub} Neue Funktion 'FILEID_GETIDSTRING'

        @{b}*@{ub} Neue Funktion 'FILEID_GETTYPES'

        @{b}*@{ub} Neue Funktion 'UUDECODE'

        @{b}*@{ub} Neue Funktion 'UUENCODE'

        @{b}*@{ub} Neue Funktion 'STEMINSERT'

        @{b}*@{ub} Neue Funktion 'GETDIR'


@EndNode

@Node "Danksagungen" "rexxtricks.guide/Danksagungen"
@Next "Adresse des Autors"
@Prev "History"
@Toc "Main"

Danksagungen
************

Ich möchte mich bedanken bei:

@{b}"Gérard Cornu"@{ub} für sein hervorragendes Programm 'ReadRDB'.

@{b}"Hermann 'Uso' Doerries"@{ub} für seine großartige Arbeit und für 'Wilam', das
beste Mailbox-System. :-)

@{b}"Nils Görs"@{ub} für 'FindGUI' und seine anderen Skripts, Ideen,
Bugmeldungen, Testen der Beta-Versionen ...

@{b}"Ralph Seichter"@{ub} für sein hervorragendes Programm 'Find'.

@{b}"Stefan Zeiger"@{ub} für 'Triton', eines der besten GUI-Layout Systeme.

Allen anderen, die mir ihre Ideen mitgeteilt, oder Fehler gemeldet haben.


@EndNode

@Node "Adresse des Autors" "rexxtricks.guide/Adresse des Autors"
@Next "Systemvoraussetzungen"
@Prev "Danksagungen"
@Toc "Main"

Adresse des Autors
******************

   Der Autor ist unter folgenden Adressen erreichbar, bitte vorzugsweise
die E-Mail Adresse benutzen:

@{b}Postanschrift:@{ub}
          Jürgen Kohrmeyer
          Oststraße 2
          49143 Bissendorf
          
          GERMANY

@{b}Telefon:@{ub}
          +49-5402-5195

@{b}E-Mail:@{ub}
          j_kohrmeyer@wilam.north.de

@{b}Support-Mailbox:@{ub}
          WILAM Mailboxsystem Wildeshausen
          
          Port 1 - +49-4431-92081 : USR DualStandard V.34
          Port 2 - +49-4431-92082 : ZyXel 19.2k
          Port 3 - +49-4431-92082 : ISDN X.75
          
          Login mit Username MD, Download per Menüauswahl


@EndNode

@Node "Systemvoraussetzungen" "rexxtricks.guide/Systemvoraussetzungen"
@Next "Installation"
@Prev "Adresse des Autors"
@Toc "Main"

Systemvoraussetzungen
*********************

   Die 'rexxtricks.library' benötigt mindestens Kickstart und Workbench
2.04.  Der ARexx-Interpreter @{b}RexxMast@{ub} muß vor der Verwendung gestartet
werden.

   Die Funktionen 'WHATIS' und 'WHATISTYPES' benutzen die 'whatis.library'.
Die 'whatis.library' muß sich dazu im logischen Verzeichnis @{b}LIBS:@{ub} befinden.

   Die 'whatis.library' sollte man in jeder gut sortierten Mailbox mit
Amiga-Filebereich bekommen. Die Version 4.0 der Library befindet sich auch
auf der AmigaLibDisk 995 der Fred Fish Serie.


@EndNode

@Node "Installation" "rexxtricks.guide/Installation"
@Next "Funktionen der Library"
@Prev "Systemvoraussetzungen"
@Toc "Main"

Installation
************

   Kopieren Sie die @{b}'rexxtricks.library'@{ub} ins logische Verzeichnis @{b}LIBS:@{ub}.
Zur Unterstützung einer anderen Sprache als Deutsch wird die Datei
@{b}rexxtricks.catalog@{ub} benötigt, kopieren Sie die Datei nach @{b}LOCALE:catalogs@{ub}
ins entsprechende Unterverzeichnis. Zur Zeit ist leider nur ein englischer
Catalog verfügbar.

   Die Verwendung der Library setzt voraus daß der ARexx-Interpreter zuvor
gestartet wurde. Das Programm, das den Arexx-Interpreter startet, befindet
sich in der Schublade @{b}SYS:System@{ub} und heißt @{b}RexxMast@{ub}. Falls dieses Programm
in Ihrem System nicht automatisch gestartet wird müssen Sie es manuell
starten. Die einfachste Methode ist es aber, das Programm @{b}RexxMast@{ub} in der
Batchdatei @{b}S:User-Startup@{ub} aufzurufen. Dadurch wird ARexx bei jedem Start
des Rechners automatisch aufgerufen und im System installiert.

   Zum Starten des ARexx-Interpreters fügen Sie folgende Zeile in Ihre
@{b}S:User-Startup@{ub} ein:

     SYS:System/RexxMast >NIL:


@EndNode

@Node "Funktionen der Library" "rexxtricks.guide/Funktionen der Library"
@Next "Das VIEWLIST() Fenster"
@Prev "Installation"
@Toc "Main"

Die Funktionen der 'rexxtricks.library' 38.6 (12.4.96)
******************************************************


@{b}AmigaDOS-Funktionen@{ub}

 @{" GETENV() " Link "GETENV()"}                Environment-Variable auslesen
 @{" SETENV() " Link "SETENV()"}                Environment-Variable einstellen
 @{" UNSETENV() " Link "UNSETENV()"}              Environment-Variable löschen

 @{" PATHPART() " Link "PATHPART()"}              Verzeichnis eines Pfades ermitteln
 @{" FILEPART() " Link "FILEPART()"}              Dateiname eines Pfades ermitteln
 @{" MAKEPATH() " Link "MAKEPATH()"}              Pfad aus Verzeichnis- und Datei zusammensetzen

 @{" SUFFIXPART() " Link "SUFFIXPART()"}            Endung eines Dateinamens ermitteln
 @{" MAKESUFFIX() " Link "MAKESUFFIX()"}            Dateinamen mit neuer Endung versehen

 @{" GETCOMMENT() " Link "GETCOMMENT()"}            Dateikommentar auslesen
 @{" SETCOMMENT() " Link "SETCOMMENT()"}            Dateikommentar einstellen

 @{" GETPROTECTION() " Link "GETPROTECTION()"}         Schutzbits einer Datei auslesen
 @{" SETPROTECTION() " Link "SETPROTECTION()"}         Schutzbits einer Datei einstellen

 @{" MATCHPATTERN() " Link "MATCHPATTERN()"}          String mit Namensmuster vergleichen
 @{" SEARCHPATTERN() " Link "SEARCHPATTERN()"}         Datei nach Namensmuster durchsuchen

 @{" GETKEY() " Link "GETKEY()"}                Auf einen Tastendruck warten

 @{" GETDIR() " Link "GETDIR()"}                Verzeichnis in Stem-Variable einlesen

 @{" READFILE() " Link "READFILE()"}              Textdatei in Stem-Variable einlesen
 @{" WRITEFILE() " Link "WRITEFILE()"}             Stem-Variable als Textdatei speichern
 @{" READLINES() " Link "READLINES()"}             Teil einer Textdatei in Stem-Variable einlesen
 @{" WRITELINES() " Link "WRITELINES()"}            Textdatei teilweise überschreiben, Zeilen einfügen


@{b}SCSI-Funktionen@{ub}

 @{" SCSI_DEVICETYPE() " Link "SCSI_DEVICETYPE()"}       Typ eines SCSI-Gerätes ermitteln, DISK, TAPE etc.
 @{" SCSI_MANUFACTURER() " Link "SCSI_MANUFACTURER()"}     Hersteller eines SCSI-Gerätes ermitteln
 @{" SCSI_PRODUCT() " Link "SCSI_PRODUCT()"}          Produktbezeichnung eines SCSI-Gerätes ermitteln
 @{" SCSI_REVISION() " Link "SCSI_REVISION()"}         Revision eines SCSI-Gerätes ermitteln
 @{" SCSI_TESTREADY() " Link "SCSI_TESTREADY()"}        Feststellen, ob ein SCSI-Gerät betriebsbereit ist


@{b}Clipboard-Funktionen@{ub}

 @{" READCLIPBOARD() " Link "READCLIPBOARD()"}         Text aus dem Clipboard einlesen
 @{" WRITECLIPBOARD() " Link "WRITECLIPBOARD()"}        Text im Clipboard speichern


@{b}Listen-Funktionen@{ub}

 @{" QSORT() " Link "QSORT()"}                 Liste mit QuickSort sortieren
 @{" BSEARCH() " Link "BSEARCH()"}               String mit Binärsuche suchen
 @{" LSEARCH() " Link "LSEARCH()"}               String mit Linearsuche suchen

 @{" STEMCOPY() " Link "STEMCOPY()"}              Stem-Variable ganz oder teilweise kopieren
 @{" STEMINSERT() " Link "STEMINSERT()"}            Elemente in eine Stem-Variable einfügen
 @{" STEMREMOVE() " Link "STEMREMOVE()"}            Elemente einer Stem-Variablen entfernen

 @{" VIEWLIST() " Link "VIEWLIST()"}              Liste im Auswahlfenster anzeigen


@{b}Publicscreen-Funktionen@{ub}

 @{" GETDEFAULTPUBSCREEN() " Link "GETDEFAULTPUBSCREEN()"}   Default-Publicscreen ermitteln
 @{" SETDEFAULTPUBSCREEN() " Link "SETDEFAULTPUBSCREEN()"}   Neuen Default-Publicscreen einstellen

 @{" GETPUBSCREENMODES() " Link "GETPUBSCREENMODES()"}     Publicscreen-Modi ermitteln
 @{" SETPUBSCREENMODES() " Link "SETPUBSCREENMODES()"}     Neue Publicscreen-Modi einstellen

 @{" PUBSCREENTOFRONT() " Link "PUBSCREENTOFRONT()"}      Publicscreen nach vorne bringen
 @{" PUBSCREENTOBACK() " Link "PUBSCREENTOBACK()"}       Publicscreen nach hinten legen

 @{" PUBSCREENLIST() " Link "PUBSCREENLIST()"}         Liste aller Publicscreens erstellen

 @{" BEEP() " Link "BEEP()"}                  Bildschirm blitzen


@{b}Icon-Funktionen@{ub}

 @{" GETTOOLTYPEVALUE() " Link "GETTOOLTYPEVALUE()"}      Argument eines Tooltypes ermitteln
 @{" SETTOOLTYPEVALUE() " Link "SETTOOLTYPEVALUE()"}      Argument eines Tooltypes einstellen

 @{" GETTOOLTYPES() " Link "GETTOOLTYPES()"}          Tooltypes eines Icons ermitteln
 @{" SETTOOLTYPES() " Link "SETTOOLTYPES()"}          Tooltypes eines Icons neu einstellen

 @{" GETDEFAULTTOOL() " Link "GETDEFAULTTOOL()"}        Standardprogramm eines Icons ermitteln
 @{" SETDEFAULTTOOL() " Link "SETDEFAULTTOOL()"}        Standardprogramm eines Icons einstellen

 @{" GETSTACK() " Link "GETSTACK()"}              Stackgröße eines Icons ermitteln
 @{" SETSTACK() " Link "SETSTACK()"}              Stackgröße eines Icons einstellen

 @{" CREATEICON() " Link "CREATEICON()"}            Ein neues Icon erstellen
 @{" WBINFO() " Link "WBINFO()"}                Icon-Informationsfenster der Workbench öffnen


@{b}Sonstige Funktionen@{ub}

 @{" WHATIS() " Link "WHATIS()"}                Dateityp mit Hilfe der 'whatis.library' ermitteln
 @{" WHATISTYPES() " Link "WHATISTYPES()"}           Alle Dateitypen der 'whatis.library' ermitteln

 @{" FILEID_IDENTIFY() " Link "FILEID_IDENTIFY()"}       Dateityp mit Hilfe der 'FileID.library' ermitteln
 @{" FILEID_GETHIGHID() " Link "FILEID_GETHIGHID()"}      Größte ID-Nummer der 'FileID.library' ermitteln
 @{" FILEID_GETIDSTRING() " Link "FILEID_GETIDSTRING()"}    Zu einer ID-Nummer gehörende Beschreibung ermitteln
 @{" FILEID_GETTYPES() " Link "FILEID_GETTYPES()"}       Alle Dateitypen der 'FileID.library' ermitteln

 @{" UUDECODE() " Link "UUDECODE()"}              uuencodete Datei dekodieren
 @{" UUENCODE() " Link "UUENCODE()"}              Binärdatei uuencoden

 @{" CRC32() " Link "CRC32()"}                 32-Bit CRC Prüfsumme einer Datei berechnen

 @{" COUNTCHARS() " Link "COUNTCHARS()"}            Anzahl bestimmter Zeichen in einem Text zählen

 @{" RAND() " Link "RAND()"}                  Zufallszahl ermitteln

 @{" REXXTRICKSVERSION() " Link "REXXTRICKSVERSION()"}     Version der 'rexxtricks.library' ermitteln


@{b}Alle Funktionen in alphabetisch sortierter Reihenfolge@{ub}

 @{" BEEP() " Link "BEEP()"}                  Bildschirm blitzen
 @{" BSEARCH() " Link "BSEARCH()"}               String mit Binärsuche suchen
 @{" COUNTCHARS() " Link "COUNTCHARS()"}            Anzahl bestimmter Zeichen in einem Text zählen
 @{" CRC32() " Link "CRC32()"}                 32-Bit CRC Prüfsumme einer Datei berechnen
 @{" CREATEICON() " Link "CREATEICON()"}            Ein neues Icon erstellen
 @{" FILEID_GETHIGHID() " Link "FILEID_GETHIGHID()"}      Größte ID-Nummer der 'FileID.library' ermitteln
 @{" FILEID_GETIDSTRING() " Link "FILEID_GETIDSTRING()"}    Zu einer ID-Nummer gehörende Beschreibung ermitteln
 @{" FILEID_GETTYPES() " Link "FILEID_GETTYPES()"}       Alle Dateitypen der 'FileID.library' ermitteln
 @{" FILEID_IDENTIFY() " Link "FILEID_IDENTIFY()"}       Dateityp mit Hilfe der 'FileID.library' ermitteln
 @{" FILEPART() " Link "FILEPART()"}              Dateiname eines Pfades ermitteln
 @{" GETCOMMENT() " Link "GETCOMMENT()"}            Dateikommentar auslesen
 @{" GETDEFAULTPUBSCREEN() " Link "GETDEFAULTPUBSCREEN()"}   Default-Publicscreen ermitteln
 @{" GETDEFAULTTOOL() " Link "GETDEFAULTTOOL()"}        Standardprogramm eines Icons ermitteln
 @{" GETDIR() " Link "GETDIR()"}                Verzeichnis in Stem-Variable einlesen
 @{" GETENV() " Link "GETENV()"}                Environment-Variable auslesen
 @{" GETKEY() " Link "GETKEY()"}                Auf einen Tastendruck warten
 @{" GETPROTECTION() " Link "GETPROTECTION()"}         Schutzbits einer Datei auslesen
 @{" GETPUBSCREENMODES() " Link "GETPUBSCREENMODES()"}     Publicscreen-Modi ermitteln
 @{" GETSTACK() " Link "GETSTACK()"}              Stackgröße eines Icons ermitteln
 @{" GETTOOLTYPES() " Link "GETTOOLTYPES()"}          Tooltypes eines Icons ermitteln
 @{" GETTOOLTYPEVALUE() " Link "GETTOOLTYPEVALUE()"}      Argument eines Tooltypes ermitteln
 @{" LSEARCH() " Link "LSEARCH()"}               String mit Linearsuche suchen
 @{" MAKEPATH() " Link "MAKEPATH()"}              Pfad aus Verzeichnis- und Datei zusammensetzen
 @{" MAKESUFFIX() " Link "MAKESUFFIX()"}            Dateinamen mit neuer Endung versehen
 @{" MATCHPATTERN() " Link "MATCHPATTERN()"}          String mit Namensmuster vergleichen
 @{" PATHPART() " Link "PATHPART()"}              Verzeichnis eines Pfades ermitteln
 @{" PUBSCREENLIST() " Link "PUBSCREENLIST()"}         Liste aller Publicscreens erstellen
 @{" PUBSCREENTOBACK() " Link "PUBSCREENTOBACK()"}       Publicscreen nach hinten legen
 @{" PUBSCREENTOFRONT() " Link "PUBSCREENTOFRONT()"}      Publicscreen nach vorne bringen
 @{" QSORT() " Link "QSORT()"}                 Liste mit QuickSort sortieren
 @{" RAND() " Link "RAND()"}                  Zufallszahl ermitteln
 @{" READCLIPBOARD() " Link "READCLIPBOARD()"}         Text aus dem Clipboard einlesen
 @{" READFILE() " Link "READFILE()"}              Textdatei in Stem-Variable einlesen
 @{" READLINES() " Link "READLINES()"}             Teil einer Textdatei in Stem-Variable einlesen
 @{" REXXTRICKSVERSION() " Link "REXXTRICKSVERSION()"}     Version der 'rexxtricks.library' ermitteln
 @{" SCSI_DEVICETYPE() " Link "SCSI_DEVICETYPE()"}       Typ eines SCSI-Gerätes ermitteln, DISK, TAPE etc.
 @{" SCSI_MANUFACTURER() " Link "SCSI_MANUFACTURER()"}     Hersteller eines SCSI-Gerätes ermitteln
 @{" SCSI_PRODUCT() " Link "SCSI_PRODUCT()"}          Produktbezeichnung eines SCSI-Gerätes ermitteln
 @{" SCSI_REVISION() " Link "SCSI_REVISION()"}         Revision eines SCSI-Gerätes ermitteln
 @{" SCSI_TESTREADY() " Link "SCSI_TESTREADY()"}        Feststellen, ob ein SCSI-Gerät betriebsbereit ist
 @{" SEARCHPATTERN() " Link "SEARCHPATTERN()"}         Datei nach Namensmuster durchsuchen
 @{" SETCOMMENT() " Link "SETCOMMENT()"}            Dateikommentar einstellen
 @{" SETDEFAULTPUBSCREEN() " Link "SETDEFAULTPUBSCREEN()"}   Neuen Default-Publicscreen einstellen
 @{" SETDEFAULTTOOL() " Link "SETDEFAULTTOOL()"}        Standardprogramm eines Icons einstellen
 @{" SETENV() " Link "SETENV()"}                Environment-Variable einstellen
 @{" SETPROTECTION() " Link "SETPROTECTION()"}         Schutzbits einer Datei einstellen
 @{" SETPUBSCREENMODES() " Link "SETPUBSCREENMODES()"}     Neue Publicscreen-Modi einstellen
 @{" SETSTACK() " Link "SETSTACK()"}              Stackgröße eines Icons einstellen
 @{" SETTOOLTYPES() " Link "SETTOOLTYPES()"}          Tooltypes eines Icons neu einstellen
 @{" SETTOOLTYPEVALUE() " Link "SETTOOLTYPEVALUE()"}      Argument eines Tooltypes einstellen
 @{" STEMCOPY() " Link "STEMCOPY()"}              Stem-Variable ganz oder teilweise kopieren
 @{" STEMINSERT() " Link "STEMINSERT()"}            Elemente in eine Stem-Variable einfügen
 @{" STEMREMOVE() " Link "STEMREMOVE()"}            Elemente einer Stem-Variablen entfernen
 @{" SUFFIXPART() " Link "SUFFIXPART()"}            Endung eines Dateinamens ermitteln
 @{" UNSETENV() " Link "UNSETENV()"}              Environment-Variable löschen
 @{" UUDECODE() " Link "UUDECODE()"}              uuencodete Datei dekodieren
 @{" UUENCODE() " Link "UUENCODE()"}              Binärdatei uuencoden
 @{" VIEWLIST() " Link "VIEWLIST()"}              Liste im Auswahlfenster anzeigen
 @{" WBINFO() " Link "WBINFO()"}                Icon-Informationsfenster der Workbench öffnen
 @{" WHATIS() " Link "WHATIS()"}                Dateityp mit Hilfe der 'whatis.library' ermitteln
 @{" WHATISTYPES() " Link "WHATISTYPES()"}           Alle Dateitypen der 'whatis.library' ermitteln
 @{" WRITECLIPBOARD() " Link "WRITECLIPBOARD()"}        Text im Clipboard speichern
 @{" WRITEFILE() " Link "WRITEFILE()"}             Stem-Variable als Textdatei speichern
 @{" WRITELINES() " Link "WRITELINES()"}            Textdatei teilweise überschreiben, Zeilen einfügen


@EndNode

@Node "GETENV()" "rexxtricks.guide/GETENV()"
@Toc "Funktionen der Library"

Die Funktion GETENV()
*********************

@{b}NAME@{ub}
     inhalt = GETENV(variable)

@{b}ALIAS@{ub}
     inhalt = RXTR_GETENV(variable)

@{b}BESCHREIBUNG@{ub}
     Ermittelt den Inhalt einer Environment-Variablen

@{b}ARGUMENTE@{ub}
     variable - Name der Variablen, deren Inhalt ermittelt werden soll

@{b}ERGEBNIS@{ub}
     inhalt   - Inhalt der Variablen

@{b}BEISPIEL@{ub}
     /* Ermitteln der Kickstart-Version */
     
     inhalt = GETENV('Kickstart')
     SAY 'Kickstart-Version =' inhalt

@{b}SIEHE AUCH@{ub}

 @{" SETENV() " Link "SETENV()"}     Environment-Variable einstellen
 @{" UNSETENV() " Link "UNSETENV()"}   Environment-Variable löschen


@EndNode

@Node "SETENV()" "rexxtricks.guide/SETENV()"
@Toc "Funktionen der Library"

Die Funktion SETENV()
*********************

@{b}NAME@{ub}
     bool = SETENV(variable,text)

@{b}ALIAS@{ub}
     bool = RXTR_SETENV(variable,text)

@{b}BESCHREIBUNG@{ub}
     Stellt den Inhalt einer Environment-Variablen ein, wenn die Variable
     noch nicht existiert wird sie neu angelegt.

@{b}ARGUMENTE@{ub}
     variable - Name der Variablen, deren Inhalt eingestellt werden soll
     text     - der neue Inhalt der Variablen

@{b}ERGEBNIS@{ub}
     bool     - 1 wenn alles geklappt hat, 0 im Fehlerfall

@{b}BEISPIEL@{ub}
     /* Einstellen der Editor-Variablen */
     
     IF SETENV('Editor','C:ED') THEN
        SAY 'ED ist jetzt als Editor eingestellt!'
     ELSE
        SAY 'Fehler beim Einstellen des Editors!'

@{b}SIEHE AUCH@{ub}

 @{" GETENV() " Link "GETENV()"}     Environment-Variable auslesen
 @{" UNSETENV() " Link "UNSETENV()"}   Environment-Variable löschen


@EndNode

@Node "UNSETENV()" "rexxtricks.guide/UNSETENV()"
@Toc "Funktionen der Library"

Die Funktion UNSETENV()
***********************

@{b}NAME@{ub}
     bool = UNSETENV(variable)

@{b}ALIAS@{ub}
     bool = RXTR_UNSETENV(variable)

@{b}BESCHREIBUNG@{ub}
     Entfernt eine Environment-Variable aus dem System, die Variable wird
     NICHT aus @{b}ENVARC:@{ub} gelöscht.

@{b}ARGUMENTE@{ub}
     variable - Name der Variablen, die entfernt werden soll

@{b}ERGEBNIS@{ub}
     bool     - 1 wenn alles geklappt hat, 0 im Fehlerfall

@{b}BEISPIEL@{ub}
     /* Entfernen der Variablen 'Editor' */
     
     IF UNSETENV('Editor') THEN
        SAY 'Die Variable Editor ist entfernt!'
     ELSE
        SAY 'Fehler beim Entfernen der Variablen Editor!'

@{b}SIEHE AUCH@{ub}

 @{" GETENV() " Link "GETENV()"}   Environment-Variable auslesen
 @{" SETENV() " Link "SETENV()"}   Environment-Variable einstellen


@EndNode

@Node "PATHPART()" "rexxtricks.guide/PATHPART()"
@Toc "Funktionen der Library"

Die Funktion PATHPART()
***********************

@{b}NAME@{ub}
     verzeichnis = PATHPART(pfadname)

@{b}ALIAS@{ub}
     verzeichnis = RXTR_PATHPART(pfadname)

@{b}BESCHREIBUNG@{ub}
     Ermittelt den Verzeichnis eines Pfadnamens

@{b}ARGUMENTE@{ub}
     pfadname    - ein kompletter Pfadname, der aus Verzeichnis- und
                   Dateiname besteht

@{b}ERGEBNIS@{ub}
     verzeichnis - Das ermittelte Verzeichnis

@{b}BEISPIEL@{ub}
     /* Verzeichnis eines komplatten Pfades ermitteln */
     
     verzeichnis = PATHPART('DH0:Daten/Testfile')
     SAY 'Verzeichnis =' verzeichnis

@{b}SIEHE AUCH@{ub}

 @{" FILEPART() " Link "FILEPART()"}   Dateiname eines Pfades ermitteln
 @{" MAKEPATH() " Link "MAKEPATH()"}   Pfad aus Verzeichnis- und Dateiname zusammensetzen


@EndNode

@Node "FILEPART()" "rexxtricks.guide/FILEPART()"
@Toc "Funktionen der Library"

Die Funktion FILEPART()
***********************

@{b}NAME@{ub}
     dateiname = FILEPART(pfadname)

@{b}ALIAS@{ub}
     dateiname = RXTR_FILEPART(pfadname)

@{b}BESCHREIBUNG@{ub}
     Ermittelt den Dateiname eines Pfades

@{b}ARGUMENTE@{ub}
     pfadname    - ein kompletter Pfadname, der aus Verzeichnis-
                   und Dateiname besteht

@{b}ERGEBNIS@{ub}
     dateiname   - Der ermittelte Dateiname

@{b}BEISPIEL@{ub}
     /* Dateiname aus einem komplatten Pfad ermitteln */
     
     dateiname = FILEPART('DH0:Daten/Testfile')
     SAY 'Dateiname =' dateiname

@{b}SIEHE AUCH@{ub}

 @{" PATHPART() " Link "PATHPART()"}   Verzeichnis eines Pfades ermitteln
 @{" MAKEPATH() " Link "MAKEPATH()"}   Pfad aus Verzeichnis- und Dateiname zusammensetzen


@EndNode

@Node "MAKEPATH()" "rexxtricks.guide/MAKEPATH()"
@Toc "Funktionen der Library"

Die Funktion MAKEPATH()
***********************

@{b}NAME@{ub}
     pfadname = MAKEPATH(verzeichnis,dateiname)

@{b}ALIAS@{ub}
     pfadname = RXTR_MAKEPATH(verzeichnis,dateiname)

@{b}BESCHREIBUNG@{ub}
     Erstellt aus einem Verzeichnis und einem Dateinamen einen kompletten
     Pfad

@{b}ARGUMENTE@{ub}
     verzeichnis - Verzeichnis, das in den Pfad eingebaut werden soll
     dateiname   - Dateiname, der in den Pfad eingebaut werden soll

@{b}ERGEBNIS@{ub}
     pfadname    - ein kompletter Pfadname, der aus dem angegebenen
                   Verzeichnis- und Dateinamen besteht

@{b}BEISPIEL@{ub}
     /* Pfad aus Verzeichnis und Dateiname zusammensetzen */
     
     pfadname = MAKEPATH('DH0:Daten','Testfile')
     SAY 'Pfad =' pfadname

@{b}SIEHE AUCH@{ub}

 @{" PATHPART() " Link "PATHPART()"}   Verzeichnis eines Pfades ermitteln
 @{" FILEPART() " Link "FILEPART()"}   Dateiname eines Pfades ermitteln


@EndNode

@Node "SUFFIXPART()" "rexxtricks.guide/SUFFIXPART()"
@Toc "Funktionen der Library"

Die Funktion SUFFIXPART()
*************************

@{b}NAME@{ub}
     endung = SUFFIXPART(pfadname)

@{b}ALIAS@{ub}
     endung = RXTR_SUFFIXPART(pfadname)

@{b}BESCHREIBUNG@{ub}
     Ermittelt die Endung des Dateinamens eines Pfades

@{b}ARGUMENTE@{ub}
     pfadname - ein kompletter Pfadname, der aus Verzeichnis- und
                Dateiname bestehen kann

@{b}ERGEBNIS@{ub}
     endung   - Die ermittelte Endung des Dateinamens OHNE den Punkt.
                Bei der Datei 'Test.lha' würde z.B. 'lha' zurückgegeben.

@{b}BEISPIEL@{ub}
     /* Endung eines Dateinamens ermitteln */
     
     endung = SUFFIXPART('DH0:Daten/Testfile.txt')
     SAY 'Endung =' endung

@{b}SIEHE AUCH@{ub}

 @{" MAKESUFFIX() " Link "MAKESUFFIX()"}  Dateinamen mit neuer Endung versehen


@EndNode

@Node "MAKESUFFIX()" "rexxtricks.guide/MAKESUFFIX()"
@Toc "Funktionen der Library"

Die Funktion MAKESUFFIX()
*************************

@{b}NAME@{ub}
     neuer_pfadname = MAKESUFFIX(pfadname,endung,modus)

@{b}ALIAS@{ub}
     neuer_pfadname = RXTR_MAKESUFFIX(pfadname,endung,modus)

@{b}BESCHREIBUNG@{ub}
     Versieht einen Dateinamen mit einer neuen Endung, die alte Endung kann
     wahlweise im Namen gelassen oder überschrieben werden.

@{b}ARGUMENTE@{ub}
     pfadname       - Ein kompletter Pfadname, der aus Verzeichnis- und
                      Dateiname bestehen kann
     
     endung         - Die Endung, mit der der Dateinamen versehen werden soll.
                      Der Punkt darf nicht mit angegeben werden.
     
     modus          - Hier kann angegeben werden, ob eine eventuell bestehende
                      Endung überschrieben werden soll, oder ob die neue Endung
                      einfach angehängt wird.
     
                      Mögliche Angaben sind:
     
                      'APPEND'  oder 'A' - Die Endung wird einfach angehängt
     
                      'REPLACE' oder 'R' - Eine eventuell bestehende Endung
                                           wird mit der neuen überschrieben

@{b}ERGEBNIS@{ub}
     neuer_pfadname - Der mit der neuen Endung versehene Pfadname. Wenn ein
                      Dateiname durch das Anhängen der Endung länger als
                      30 Zeichen wird, dann wird der Name vor dem Anhängen
                      entsprechend gekürzt.

@{b}BEISPIEL@{ub}
     /* Dateinamen mit einer neuen Endung versehen */
     
     jpegfile = MAKESUFFIX('DH0:Grafik/Bild.IFF','JPEG','REPLACE')
     SAY 'Der neue Name ist' jpegfile

@{b}SIEHE AUCH@{ub}

 @{" SUFFIXPART() " Link "SUFFIXPART()"}  Endung eines Dateinamens ermitteln


@EndNode

@Node "GETCOMMENT()" "rexxtricks.guide/GETCOMMENT()"
@Toc "Funktionen der Library"

Die Funktion GETCOMMENT()
*************************

@{b}NAME@{ub}
     kommentar = GETCOMMENT(dateiname)

@{b}ALIAS@{ub}
     kommentar = RXTR_GETCOMMENT(dateiname)

@{b}BESCHREIBUNG@{ub}
     Ermittelt den Kommentar einer Datei

@{b}ARGUMENTE@{ub}
     dateiname - Datei, deren Kommentar ermittelt werden soll

@{b}ERGEBNIS@{ub}
     kommentar - der Kommentar der angegebenen Datei

@{b}BEISPIEL@{ub}
     /* Dateikommentar ermitteln */
     
     kommentar = GETCOMMENT('DH0:Daten/Testfile')
     SAY 'Kommentar =' kommentar

@{b}SIEHE AUCH@{ub}

 @{" SETCOMMENT() " Link "SETCOMMENT()"}   Dateikommentar einstellen


@EndNode

@Node "SETCOMMENT()" "rexxtricks.guide/SETCOMMENT()"
@Toc "Funktionen der Library"

Die Funktion SETCOMMENT()
*************************

@{b}NAME@{ub}
     bool = SETCOMMENT(dateiname,kommentar)

@{b}ALIAS@{ub}
     bool = RXTR_SETCOMMENT(dateiname,kommentar)

@{b}BESCHREIBUNG@{ub}
     Stellt den Kommentar einer Datei ein

@{b}ARGUMENTE@{ub}
     dateiname - Datei, deren Kommentar eingestellt werden soll

@{b}ERGEBNIS@{ub}
     bool      - 1 wenn alles geklappt hat, 0 im Fehlerfall

@{b}BEISPIEL@{ub}
     /* Dateikommentar einstellen */
     
     IF SETCOMMENT('DH0:Daten/Testfile','Dies ist eine Testdatei') THEN
        SAY 'Der Kommentar wurde eingestellt!'
     ELSE
        SAY 'Fehler beim Einstellen des Kommentars!'

@{b}SIEHE AUCH@{ub}

 @{" GETCOMMENT() " Link "GETCOMMENT()"}   Dateikommentar auslesen


@EndNode

@Node "GETPROTECTION()" "rexxtricks.guide/GETPROTECTION()"
@Toc "Funktionen der Library"

Die Funktion GETPROTECTION()
****************************

@{b}NAME@{ub}
     schutzbits = GETPROTECTION(dateiname)

@{b}ALIAS@{ub}
     schutzbits = RXTR_GETPROTECTION(dateiname)

@{b}BESCHREIBUNG@{ub}
     Ermittelt die Schutzbits einer Datei

@{b}ARGUMENTE@{ub}
     dateiname  - Datei, deren Schutzbits ermittelt werden sollen

@{b}ERGEBNIS@{ub}
     schutzbits - String, der die ermittelten Schutzbits im bekannten
                  Format 'HSPARWED' enthält. Ein gesetztes Bit wird
                  durch den entsprechenden Buchstaben repräsentiert,
                  ein gelöschtes Bit durch '-'.

@{b}BEISPIEL@{ub}
     /* Schutzbits einer Datei ermitteln */
     
     schutzbits = GETPROTECTION('DH0:Daten/Testfile')
     SAY 'Schutzbits =' schutzbits

@{b}SIEHE AUCH@{ub}

 @{" SETPROTECTION() " Link "SETPROTECTION()"}   Schutzbits einer Datei einstellen


@EndNode

@Node "SETPROTECTION()" "rexxtricks.guide/SETPROTECTION()"
@Toc "Funktionen der Library"

Die Funktion SETPROTECTION()
****************************

@{b}NAME@{ub}
     bool = SETPROTECTION(schutzbits)

@{b}ALIAS@{ub}
     bool = RXTR_SETPROTECTION(schutzbits)

@{b}BESCHREIBUNG@{ub}
     Stellt die Schutzbits einer Datei ein

@{b}ARGUMENTE@{ub}
     schutzbits - String, der die einzustellenden Schutzbits im
                  bekannten Format 'HSPARWED' enthält. Ein gesetztes
                  Bit wird durch den entsprechenden Buchstaben
                  repräsentiert, ein gelöschtes Bit durch '-'.

@{b}ERGEBNIS@{ub}
     bool       - 1 wenn alles geklappt hat, 0 im Fehlerfall

@{b}BEISPIEL@{ub}
     /* Schutzbits einer Datei einstellen */
     
     IF SETPROTECTION('DH0:Daten/Testfile','-S-RWE-') THEN
        SAY 'Die Schutzbits wurden eingestellt!'
     ELSE
        SAY 'Fehler beim Einstellen der Schutzbits!'

@{b}SIEHE AUCH@{ub}

 @{" GETPROTECTION() " Link "GETPROTECTION()"}   Schutzbits einer Datei auslesen


@EndNode

@Node "MATCHPATTERN()" "rexxtricks.guide/MATCHPATTERN()"
@Toc "Funktionen der Library"

Die Funktion MATCHPATTERN()
***************************

@{b}NAME@{ub}
     bool = MATCHPATTERN(string,pattern,case)

@{b}ALIAS@{ub}
     bool = RXTR_MATCHPATTERN(string,pattern,case)

@{b}BESCHREIBUNG@{ub}
     Vergleicht einen String mit einem AmigaDOS-Namensmuster

@{b}ARGUMENTE@{ub}
     string  - String der verglichen werden soll
     
     pattern - AmigaDOS-Namensmuster
     
     case    - Hier kann angegeben werden ob zwischen Groß- und
               Kleinbuchstaben unterschieden werden soll, ist das
               Argument nicht angegeben dann wird nicht unterschieden.
     
               Mögliche Angaben sind:
     
               'CASE'   oder 'C' - Groß- und Kleinbuchstaben werden
                                   unterschieden
               'NOCASE' oder 'N' - Groß- und Kleinbuchstaben werden
                                   nicht unterschieden

@{b}ERGEBNIS@{ub}
     bool    - 1 wenn String und Muster übereinstimmen, 0 wenn nicht

@{b}BEISPIEL@{ub}
     /* String mit Namensmuster vergleichen */
     
     IF MATCHPATTERN('Testtext','t#?','CASE') THEN
        SAY 'Übereinstimmung gefunden'
     ELSE
        SAY 'Keine Übereinstimmung'

@{b}SIEHE AUCH@{ub}

 @{" SEARCHPATTERN() " Link "SEARCHPATTERN()"}   Datei nach Namensmuster durchsuchen


@EndNode

@Node "SEARCHPATTERN()" "rexxtricks.guide/SEARCHPATTERN()"
@Toc "Funktionen der Library"

Die Funktion SEARCHPATTERN()
****************************

@{b}NAME@{ub}
     ergebnis = SEARCHPATTERN(dateiname,pattern,start,modus,case)

@{b}ALIAS@{ub}
     ergebnis = RXTR_SEARCHPATTERN(dateiname,pattern,start,modus,case)

@{b}BESCHREIBUNG@{ub}
     Durchsucht eine Textdatei zeilenweise nach dem Auftreten eines
     Namensmusters.

@{b}ARGUMENTE@{ub}
     dateiname - Datei, deren Inhalt durchsucht werden soll
     
     pattern   - AmigaDOS-Namensmuster
     
     start     - Gibt eine Stelle in der Datei an, ab der nach dem
                 Namensmuster gesucht werden soll. Hier kann entweder
                 eine Zeilennummer oder ein Byte-Offset angegeben
                 werden, das Argument 'modus' gibt an um um was es
                 sich handelt.
     
     modus     - Hier kann angegeben werden ob das Argument 'start' eine
                 Zeilennummer angibt, oder einen Byte-Offset. Das Ergebnis
                 der Funktion richtet sich ebenfalls nach dem angegebenen
                 Modus. Wenn dieses Argument nicht angegeben ist wird mit
                 Zeilennummern gearbeitet.
     
                 Mögliche Angaben sind:
     
                 'BYTE' oder 'B' - Offset in Bytes
                                   Byte-Offsets beginnen immer bei 0
     
                 'LINE' oder 'L' - Nummer der Zeile
                                   Zeilennummern beginnen immer bei 1
     
                 Bei Byte-Offsets wird als Ergebnis immer der Offset in
                 Bytes zurückgegeben, an dem die entsprechende Zeile beginnt.
                 So kann man z.B. nach dem Suchen die Datei öffnen, mit der
                 ARexx-Funktion 'SEEK()' an die gefundene Stelle springen,
                 und danach mit READLN() die Zeile einlesen.
     
     case      - Hier kann angegeben werden ob zwischen Groß- und
                 Kleinbuchstaben unterschieden werden soll, ist das
                 Argument nicht angegeben dann wird nicht unterschieden.
     
                 Mögliche Angaben sind:
     
                 'CASE'   oder 'C' - Groß- und Kleinbuchstaben werden
                                     unterschieden
                 'NOCASE' oder 'N' - Groß- und Kleinbuchstaben werden
                                     nicht unterschieden

@{b}ERGEBNIS@{ub}
     ergebnis  - Je nach angegebenem 'modus' die Nummer Textzeile oder der
                 Offset in Bytes, an dem die gefundene Textzeile beginnt.
                 -1 wenn keine Übereinstimmung gefunden wurde.
     
                 Die gefundene Zeile wird in der Variablen 'RESULT'
                 gespeichert.

@{b}BEISPIEL@{ub}
     /* Namensmuster in einer Datei suchen */
     
     zeile = SEARCHPATTERN('S:User-Startup','Assign#?MAILFILTER:',1,'LINE','NOCASE')
     
     IF zeile ~= -1 THEN
        SAY 'MailFilter-Assign gefunden in Zeile:' zeile
     ELSE
        SAY 'Schade, kein MailFilter-Assign gefunden'

@{b}SIEHE AUCH@{ub}

 @{" MATCHPATTERN() " Link "MATCHPATTERN()"}   String mit Namensmuster vergleichen


@EndNode

@Node "GETDIR()" "rexxtricks.guide/GETDIR()"
@Toc "Funktionen der Library"

Die Funktion GETDIR()
*********************

@{b}NAME@{ub}
     bool = GETDIR(dirname,muster,stemvar,typ,ergebnis,subdirs)

@{b}ALIAS@{ub}
     bool = RXTR_GETDIR(dirname,muster,stemvar,typ,ergebnis,subdirs)

@{b}BESCHREIBUNG@{ub}
     Liest ein Verzeichnis in eine Stem-Variable ein.

@{b}ARGUMENTE@{ub}
     dirname  - Name des Verzeichnisses, das gelesen werden soll
     
     muster   - Ein AmigaDOS Namensmuster. Nur Einträge die mit diesem
                Muster übereinstimmen werden in 'stemvar' gespeichert.
                Wenn kein Muster angegeben ist werden alle Einträge
                gespeichert.
     
     stemvar  - Stem-Variable, in der die Einträge des Verzeichnisses
                gespeichert werden sollen. Jedes Feld der Stem-Variablen
                enthält jeweils einen Verzeichniseintrag:
     
                stemvar.0 - enthält die Anzahl der Einträge
                stemvar.1 - enthält den ersten Eintrag
                stemvar.2 - enthält den zweiten Eintrag
                stemvar.n - enthält den n-ten Eintrag
     
     typ      - Typ der Einträge, die in 'stemvar' gespeichert werden
                sollen.
     
                Mögliche Angaben sind:
     
                'ALL'   oder 'A' - Alle gefundenen Einträge werden
                                   gepeichert
     
                'FILES' oder 'F' - Einträge werden nur dann gespeichert
                                   wenn es sich um Dateien handelt
     
                'DIRS'  oder 'D' - Einträge werden nur dann gespeichert
                                   wenn es sich um Verzeichnisse handelt
     
                Wenn hier nichts angegeben ist werden alle Einträge
                gespeichert.
     
     ergebnis - Gibt an, ob nur der Name oder der komplette Pfad der
                gefundenen Einträge in 'stemvar' gespeichert werden soll.
     
                Mögliche Angaben sind:
     
                'NAME' oder 'N' - Nur die Namen der Einträge werden
                                  gespeichert
     
                'PATH' oder 'P' - Der komplette Pfad der Einträge wird
                                  gespeichert
     
                Wenn hier nichts angegeben ist werden nur die Namen der
                Einträge gespeichert.
     
     subdirs  - Gibt an, ob alle gefundenen Unterverzeichnisse ebenfalls
                eingelesen werden sollen.
     
                Mögliche Angaben sind:
     
                'SUBDIRS' oder 'S' - Alle gefundenen Unterverzeichnisse
                                     werden vollständig eingelesen
     
                Wenn hier nichts angegeben ist wird nur das bei 'dirname'
                angegebene Verzeichnis eingelesen.

@{b}ERGEBNIS@{ub}
     bool     - 1 wenn alles geklappt hat, 0 im Fehlerfall

@{b}BEISPIEL@{ub}
     /*
     ** Verzeichnis mit allen Unterverzeichnissen einlesen und den
     ** kompletten Pfad aller Dateien außer den Icons anzeigen
     */
     
     IF GETDIR('DEVS:','~(#?.info)','stemvar','FILES','PATH','SUBDIRS') THEN DO
        SAY 'Anzahl Einträge:' stemvar.0
     
        DO i = 1 TO stemvar.0
           SAY stemvar.i
        END
     END

@{b}SIEHE AUCH@{ub}

@EndNode

@Node "GETKEY()" "rexxtricks.guide/GETKEY()"
@Toc "Funktionen der Library"

Die Funktion GETKEY()
*********************

@{b}NAME@{ub}
     key = GETKEY(timeout)

@{b}ALIAS@{ub}
     key = RXTR_GETKEY(timeout)

@{b}BESCHREIBUNG@{ub}
     Wartet die angegebene Zeit auf das Betätigen einer Taste

@{b}ARGUMENTE@{ub}
     timeout - Zeit in @{b}Sekunden@{ub}

@{b}ERGEBNIS@{ub}
     key     - Wird innerhalb der angegebenen Zeit eine Taste gedrückt,
               dann wird das entsprechende Zeichen zurückgegeben, nach
               Ablauf der Zeit ohne Tastendruck wir -1 zurückgegeben.
     
               Die Sondertasten werden, wenn sie nicht mit einem Text
               belegt sind, wie folgt zurückgegeben:

                    Taste          | allein  | mit @{b}SHIFT@{ub}
                    ---------------+---------+------------
                    @{b}F1@{ub}             | F1      | SHIFT F1
                    @{b}F2@{ub}             | F2      | SHIFT F2
                    @{b}F3@{ub}             | F3      | SHIFT F3
                    @{b}F4@{ub}             | F4      | SHIFT F4
                    @{b}F5@{ub}             | F5      | SHIFT F5
                    @{b}F6@{ub}             | F6      | SHIFT F6
                    @{b}F7@{ub}             | F7      | SHIFT F7
                    @{b}F8@{ub}             | F8      | SHIFT F8
                    @{b}F9@{ub}             | F9      | SHIFT F9
                    @{b}F10@{ub}            | F10     | SHIFT F10
                                   |         |
                    @{b}Esc@{ub}            | ESC     | ESC
                    @{b}Help@{ub}           | HELP    | HELP
                                   |         |
                    @{b}Return@{ub}         | CR      | CR
                    @{b}Enter@{ub}          | CR      | CR
                                   |         |
                    @{b}Backspace@{ub}      | BS      | BS
                    @{b}Delete@{ub}         | DEL     | DEL
                                   |         |
                    @{b}Cursor Oben@{ub}    | UP      | SHIFT UP
                    @{b}Cursor Unten@{ub}   | DOWN    | SHIFT DOWN
                    @{b}Cursor Links@{ub}   | LEFT    | SHIFT LEFT
                    @{b}Cursor Rechts@{ub}  | RIGHT   | SHIFT RIGHT
     
               Wenn eine der Tasten mit einem Text belegt ist,
               z.B. mit Hilfe des Commodities 'FKey', dann wird
               der entsprechende Text zurückgegeben.

@{b}BEISPIEL@{ub}
     /* Zehn Sekunden auf das Betätigen einer Taste warten */
     
     key = GETKEY(10)
     
     IF key ~= (-1) THEN
        SAY 'Taste gedrückt:' key
     ELSE
        SAY 'Zeit ist abgelaufen, keine Taste wurde gedrückt!'

@{b}SIEHE AUCH@{ub}

@EndNode

@Node "READFILE()" "rexxtricks.guide/READFILE()"
@Toc "Funktionen der Library"

Die Funktion READFILE()
***********************

@{b}NAME@{ub}
     bool = READFILE(dateiname,stemvar)

@{b}ALIAS@{ub}
     bool = RXTR_READFILE(dateiname,stemvar)

@{b}BESCHREIBUNG@{ub}
     Liest den Inhalt einer Textdatei zeilenweise in eine Stem-Variable
     ein. Zeilenvorschübe (ASCII-Code: 10) werden nicht gespeichert.

@{b}ARGUMENTE@{ub}
     dateiname  - Datei, deren Inhalt eingelesen werden soll
     
     stemvar    - Stem-Variable, in der die aus der Datei gelesenen Zeilen
                  gespeichert werden sollen. Jedes Feld der Stem-Variablen
                  enthält jeweils eine Zeile  der Datei:
     
                  stemvar.0 - enthält die Anzahl der Zeilen
                  stemvar.1 - enthält die erste Zeile
                  stemvar.2 - enthält die zweite Zeile
                  stemvar.n - enthält die n-te Zeile

@{b}ERGEBNIS@{ub}
     bool       - 1 wenn alles geklappt hat, 0 im Fehlerfall

@{b}BEISPIEL@{ub}
     /* Datei 's:user-startup' in Stem-Variable einlesen und anzeigen */
     
     IF READFILE('s:user-startup','array') THEN DO
        SAY 'Anzahl Zeilen:' array.0
     
        DO i = 1 TO array.0
           SAY 'Zeile' i||':' array.i
        END
     END

@{b}SIEHE AUCH@{ub}

 @{" WRITEFILE() " Link "WRITEFILE()"}   Stem-Variable als Textdatei speichern


@EndNode

@Node "WRITEFILE()" "rexxtricks.guide/WRITEFILE()"
@Toc "Funktionen der Library"

Die Funktion WRITEFILE()
************************

@{b}NAME@{ub}
     bool = WRITEFILE(dateiname,stemvar,append)

@{b}ALIAS@{ub}
     bool = RXTR_WRITEFILE(dateiname,stemvar,append)

@{b}BESCHREIBUNG@{ub}
     Speichert den Inhalt einer Stem-Variablen als Textdatei, an jede Zeile
     wird automatisch ein Zeilenvorschub angehängt.

@{b}ARGUMENTE@{ub}
     dateiname  - Datei, in der der Inhalt der Stem-Variablen gespeichert
                  werden soll.
     
     stemvar    - Stem-Variable, die in der Datei gespeichert werden soll.
                  Die Stem-Variable muß folgenden Inhalt haben:
     
                  stemvar.0 - muß die Anzahl der Zeilen enthalten
                  stemvar.1 - muß die erste Zeile enthalten
                  stemvar.2 - muß die zweite Zeile enthalten
                  stemvar.n - muß die n-te Zeile enthalten
     
     append     - Gibt an, daß die Zeilen an eine bereits existierende
                  Datei angehängt werden sollen. Wenn die angegebene
                  Datei nicht existiert wird ein Fehler zurückgegeben.
     
                  Mögliche Angaben sind:
     
                  'APPEND' oder 'A' - Die Zeilen werden angehängt
     
                  Alle anderen Angaben bewirken nichts.

@{b}ERGEBNIS@{ub}
     bool       - 1 wenn alles geklappt hat, 0 im Fehlerfall

@{b}BEISPIEL@{ub}
     /* Stem-Variable in Datei schreiben */
     
     liste.0 = 4
     liste.1 = 'Hallo'
     liste.2 = 'Moin'
     liste.3 = 'Tach'
     liste.4 = 'Mahlzeit'
     
     IF WRITEFILE('RAM:Test','liste') THEN
        SAY 'Fertig, keine Fehler!'

@{b}SIEHE AUCH@{ub}

 @{" READFILE() " Link "READFILE()"}   Textdatei in Stem-Variable einlesen


@EndNode

@Node "READLINES()" "rexxtricks.guide/READLINES()"
@Toc "Funktionen der Library"

Die Funktion READLINES()
************************

@{b}NAME@{ub}
     bool = READLINES(dateiname,start,anzahl,format,stemvar)

@{b}ALIAS@{ub}
     bool = RXTR_READLINES(dateiname,start,anzahl,format,stemvar)

@{b}BESCHREIBUNG@{ub}
     Liest einen Teil einer Textdatei zeilenweise ein. Die Zeilen werden
     anhand des angegebenen Formatstrings umgewandelt und in den
     angegebenen Stem-Variablen gespeichert. Zeilenvorschübe (ASCII-Code:
     10) werden nicht gespeichert.

@{b}ARGUMENTE@{ub}
     dateiname  - Datei, deren Inhalt eingelesen werden soll
     
     start      - Nummer der Zeile, ab der aus der Datei gelesen werden
                  soll. Die Zeilennummern beginnen immer bei 1. Wenn hier
                  nichts angegeben ist wird ab der ersten Zeile der Datei
                  eingelesen.
     
     anzahl     - Anzahl der Zeilen, die eingelesen werden sollen. Wenn
                  hier nichts angegeben ist wird die Datei bis zum Ende
                  eingelesen.
     
     format     - Formatstring, der angibt wie jede einzelne Zeile beim
                  Einlesen umgewandelt werden soll. Dieser Formatstring
                  kann beliebig viele Formatieranweisungen enthalten, für
                  jede der Anweisungen muß unter stemvar der Name einer
                  Stem-Variablen angegeben werden.
     
                  @{b}Jedes durch eine Formatieranweisung umgewandelte Element
                  darf maximal 1024 Zeichen lang sein! Die Zeilenlänge ist
                  begrenzt auf 4096 Zeichen!@{ub}
     
                  Bei der Umwandlung wird im Formatstring nach der ersten
                  Formatieranweisung gesucht, dann wird anhand dieser
                  Anweisung ein Teil der Zeile in der ersten Stem-Variablen
                  gespeichert. Danach wird die nächste Formatieranweisung
                  gesucht, ein Teil der Zeile in der nächsten Variablen
                  gespeichert usw.
     
                  Der Formatstring kann drei verschiedene Arten von Zeichen
                  und Anweisungen enthalten:
     
                  1. Blanks (Leerzeichen und Tabulatoren)
     
                     Wenn ein Blank im Formatstring vorkommt werden alle
                     folgenden Blanks übersprungen.
     
                  2. Alle anderen Zeichen außer dem Prozentzeichen '%'
     
                     Wenn ein normales Zeichen im Formatstring vorkommt
                     wird ein gleiches Zeichen aus der Zeile eingelesen,
                     aber nicht gespeichert.
     
                  3. Formatieranweisungen
     
                     Durch eine Formatieranweisung wird festgelegt, wie der
                     nächste Teil der Zeile in eine Variable umgewandelt
                     werden soll. Eine Formatieranweisung wird immer durch
                     ein Prozentzeichen '%' eingeleitet und hat folgende
                     Form, in Klammern stehende Anweisungen sind optional:
     
                     %[*][Länge]Typ
     
                     [*]     - Die Formatieranweisung wird ganz normal auf
                               die Zeile angewendet, das Ergebnis wird aber
                               nicht gespeichert, sondern irnoriert. Für
                               diese Anweisung darf keine Stem-Variable
                               angegeben werden.
     
                     [Länge] - Eine Integerzahl, die angibt wieviele Zeichen
                               maximal eingelesen werden sollen. Wenn bis
                               zum nächsten Blank weniger Zeichen in der
                               Zeile vorhanden sind wird die Umwandlung bei
                               dem ersten Blank beendet. Dies gilt jedoch
                               nicht für den Typ 'c', hier wird immer die
                               angegebene Anzahl Zeichen umgewandelt.
     
                     Typ     - Der Typ gibt an wie das nächste Element der
                               Zeile umgewandelt werden soll. Es gibt zwei
                               verschiedene Typen:
     
                               s - Eine Zeichenkette soll eingelesen werden.
                                   Die Umwandlung wird beendet wenn entweder
                                   die angegebene Länge erreicht ist, oder
                                   in der Zeile ein Blank vorkommt.
     
                               c - Ein Zeichen soll eingelesen werden. Bei
                                   angegebener Länge wird genau diese Anzahl
                                   Zeichen eingelesen, ein Blank wird dabei
                                   wie ein normales Zeichen behandelt.
     
     stemvar    - Stem-Variablen, in denen die eingelesenen Elemente der
                  Zeilen gespeichert werden sollen. Da je nach Formatstring
                  beliebig viele Variablen angegeben werden müssen, werden
                  diese Variablen durch Leerzeichen oder Tabulatoren getrennt
                  hintereinander geschrieben. Jedes Feld einer Stem-Variablen
                  enthält ein Element einer eingelesenen Zeile der Datei.
     
                  Beispiel: READLINES(datei,10,3,'%s %5c','stemvar1 stemvar2')
     
                  stemvar1.0 - enthält die Anzahl der eingelesenen Zeilen,
                               in diesem Fall 3
                  stemvar1.1 - enthält das erste Element der ersten Zeile
                               in diesem Fall Zeile 10 der Datei
                  stemvar1.2 - enthält die erste Element der zweiten Zeile
                               in diesem Fall Zeile 11 der Datei
                  stemvar1.3 - enthält die erste Element der dritten Zeile
                               in diesem Fall Zeile 12 der Datei
     
                  stemvar2.0 - enthält die Anzahl der eingelesenen Zeilen,
                               in diesem Fall 3
                  stemvar2.1 - enthält das zweite Element der ersten Zeile
                               in diesem Fall Zeile 10 der Datei
                  stemvar2.2 - enthält die zweite Element der zweiten Zeile
                               in diesem Fall Zeile 11 der Datei
                  stemvar2.3 - enthält die zweite Element der dritten Zeile
                               in diesem Fall Zeile 12 der Datei

@{b}ERGEBNIS@{ub}
     bool       - 1 wenn alles geklappt hat, 0 im Fehlerfall

@{b}BEISPIEL@{ub}
     /*
     ** Mit dem Dos-Befehl 'List' eine Datei erzeugen, diese
     ** Datei einlesen und einen Teil des Inhalts anzeigen.
     */
     
     ADDRESS COMMAND 'List >T:tempfile LFORMAT "%-30N %L Byte %A %D %T"'
     
     IF READLINES('T:tempfile',5,20,'%30c %s Byte %s %s %s','name bytes flags datum zeit') THEN DO
        SAY 'Anzahl Zeilen:' name.0
        SAY
     
        DO i = 1 TO name.0
           IF bytes.i = 'Dir' THEN
              SAY 'Nr.' i '-> Verzeichnis:' STRIP(name.i)
           ELSE
              SAY 'Nr.' i '-> Datei:' STRIP(name.i) '-' bytes.i 'Byte'
     
           SAY 'Flags:' flags.i
           SAY 'Datum:' datum.i
           SAY 'Zeit :' zeit.i
           SAY
        END
     END

@{b}SIEHE AUCH@{ub}

 @{" WRITELINES() " Link "WRITELINES()"}   Textdatei teilweise überschreiben, Zeilen einfügen


@EndNode

@Node "WRITELINES()" "rexxtricks.guide/WRITELINES()"
@Toc "Funktionen der Library"

Die Funktion WRITELINES()
*************************

@{b}NAME@{ub}
     bool = WRITELINES(dateiname,start,stemvar,modus)

@{b}ALIAS@{ub}
     bool = RXTR_WRITELINES(dateiname,start,stemvar,modus)

@{b}BESCHREIBUNG@{ub}
     Überschreibt einen Teil einer Textdatei mit dem Inhalt der angegebenen
     Stem-Variablen, oder fügt den Inhalt der Variablen in die Textdatei
     ein.

@{b}ARGUMENTE@{ub}
     dateiname  - Datei, in die geschrieben werden soll
     
     start      - Nummer der Zeile, ab der in die Datei geschrieben werden
                  soll. Die Zeilennummern beginnen immer bei 1. Wenn hier
                  nichts angegeben ist wird ab der ersten Zeile in die
                  Datei geschrieben.
     
     stemvar    - Stem-Variable, deren Inhalt in die Datei geschrieben werden
                  soll. Diese Stem-Variable muß folgenden Inhalt haben:
     
                  stemvar.0 - muß die Anzahl der Zeilen enthalten
                  stemvar.1 - muß die erste Zeile enthalten
                  stemvar.2 - muß die zweite Zeile enthalten
                  stemvar.n - muß die n-te Zeile enthalten
     
     modus      - Gibt an, wie die Stem-Variable in die Datei geschrieben
                  werden soll. Es gibt zwei Möglichkeiten:
     
                  'REPLACE' oder 'R'- Die Datei wird ab der bei 'start'
                                      angegebenen Zeile überschrieben.
                                      Jedes Feld der Stem-Variablen
                                      ersetzt eine Zeile in der Datei,
                                      eine Stem-Variable mit 10 Feldern
                                      ersetzt also 10 Zeilen der Datei.
                                      Alle nachfolgenden Zeilen werden
                                      wieder aus der Quelldatei übernommen.
     
                  'INSERT' oder 'I' - Der Inhalt der Stem-Variablen wird
                                      ab der bei 'start' angegebenen Zeile
                                      in die Datei eingefügt.

@{b}ERGEBNIS@{ub}
     bool       - 1 wenn alles geklappt hat, 0 im Fehlerfall

@{b}BEISPIEL@{ub}
     /*
     ** Die Zeilen 10, 11 und 12 der Datei 'RAM:testfile' einlesen,
     ** verändern und in die Datei zurückschreiben.
     */
     
     IF READLINES('RAM:testfile',10,3,'%256c','zeile') THEN DO
        DO i = 1 TO zeile.0
           zeile.i = 'Dies ist Zeile' i+9 '-' zeile.i
        END
     
        IF ~WRITELINES('RAM:testfile',10,'zeile','REPLACE') THEN
           SAY 'Fehler beim Schreiben in die Datei!'
     END
     ELSE
        SAY 'Fehler beim Lesen aus der Datei!'

@{b}SIEHE AUCH@{ub}

 @{" READLINES() " Link "READLINES()"}   Teil einer Textdatei in Stem-Variable einlesen


@EndNode

@Node "SCSI_DEVICETYPE()" "rexxtricks.guide/SCSI_DEVICETYPE()"
@Toc "Funktionen der Library"

Die Funktion SCSI_DEVICETYPE()
******************************

@{b}NAME@{ub}
     typ = SCSI_DEVICETYPE(device,unit)

@{b}ALIAS@{ub}
     typ = RXTR_SCSI_DEVICETYPE(device,unit)

@{b}BESCHREIBUNG@{ub}
     Gibt den Typ eines angeschlossenen SCSI-Gerätes zurück.

@{b}ARGUMENTE@{ub}
     device - Device, mit dem das SCSI-Gerät angesteuert wird.
     
     unit   - Unit Nummer des SCSI-Gerätes.

@{b}ERGEBNIS@{ub}
     typ    - Der Typ des Gerätes:
     
              DISK          - Plattenlaufwerk, Festplatte, Wechselplatte
              TAPE          - Bandlaufwerk
              PRINTER       - Drucker
              PROCESSOR     - Prozessor-Gerät
              WORM          - WORM-Platte
              CDROM         - CD-ROM Laufwerk
              SCANNER       - Scanner
              OPTICAL       - Optisches Laufwerk
              MEDIACHANGER  - Medienwechsler
              COMMUNICATION - Kommunikationsgerät
              UNKNOWN       - Unbekannter Gerätetyp
     
              Wenn kein Gerät gefunden wurde wird ein Leerstring " zurückgegeben.

@{b}BEISPIEL@{ub}
     /* Typ des Geräts an 'scsi.device' Unit 0 ermitteln */
     
     SAY SCSI_DEVICETYPE('scsi.device',0)

@{b}SIEHE AUCH@{ub}

 @{" SCSI_MANUFACTURER() " Link "SCSI_MANUFACTURER()"}   Hersteller eines SCSI-Gerätes ermitteln
 @{" SCSI_PRODUCT() " Link "SCSI_PRODUCT()"}        Produktbezeichnung eines SCSI-Gerätes ermitteln
 @{" SCSI_REVISION() " Link "SCSI_REVISION()"}       Revision eines SCSI-Gerätes ermitteln
 @{" SCSI_TESTREADY() " Link "SCSI_TESTREADY()"}      Feststellen, ob ein SCSI-Gerät betriebsbereit ist


@EndNode

@Node "SCSI_MANUFACTURER()" "rexxtricks.guide/SCSI_MANUFACTURER()"
@Toc "Funktionen der Library"

Die Funktion SCSI_MANUFACTURER()
********************************

@{b}NAME@{ub}
     hersteller = SCSI_MANUFACTURER(device,unit)

@{b}ALIAS@{ub}
     hersteller = RXTR_SCSI_MANUFACTURER(device,unit)

@{b}BESCHREIBUNG@{ub}
     Gibt den Hersteller eines angeschlossenen SCSI-Gerätes zurück.

@{b}ARGUMENTE@{ub}
     device     - Device, mit dem das SCSI-Gerät angesteuert wird.
     
     unit       - Unit Nummer des SCSI-Gerätes.

@{b}ERGEBNIS@{ub}
     hersteller - Der Hersteller des Gerätes, wenn kein Gerät gefunden
                  wurde wird ein Leerstring " zurückgegeben.

@{b}BEISPIEL@{ub}
     /* Hersteller des Geräts an 'scsi.device' Unit 0 ermitteln */
     
     SAY SCSI_MANUFACTURER('scsi.device',0)

@{b}SIEHE AUCH@{ub}

 @{" SCSI_DEVICETYPE() " Link "SCSI_DEVICETYPE()"}     Typ eines SCSI-Gerätes ermitteln, DISK, TAPE etc.
 @{" SCSI_PRODUCT() " Link "SCSI_PRODUCT()"}        Produktbezeichnung eines SCSI-Gerätes ermitteln
 @{" SCSI_REVISION() " Link "SCSI_REVISION()"}       Revision eines SCSI-Gerätes ermitteln
 @{" SCSI_TESTREADY() " Link "SCSI_TESTREADY()"}      Feststellen, ob ein SCSI-Gerät betriebsbereit ist


@EndNode

@Node "SCSI_PRODUCT()" "rexxtricks.guide/SCSI_PRODUCT()"
@Toc "Funktionen der Library"

Die Funktion SCSI_PRODUCT()
***************************

@{b}NAME@{ub}
     produkt = SCSI_PRODUCT(device,unit)

@{b}ALIAS@{ub}
     produkt = RXTR_SCSI_PRODUCT(device,unit)

@{b}BESCHREIBUNG@{ub}
     Gibt die Produktbezeichnung eines angeschlossenen SCSI-Gerätes
     zurück.

@{b}ARGUMENTE@{ub}
     device  - Device, mit dem das SCSI-Gerät angesteuert wird.
     
     unit    - Unit Nummer des SCSI-Gerätes.

@{b}ERGEBNIS@{ub}
     produkt - Die Produktbezeichnung des Gerätes, wenn kein Gerät
               gefunden wurde wird ein Leerstring " zurückgegeben.

@{b}BEISPIEL@{ub}
     /* Produktbezeichnung des Geräts an 'scsi.device' Unit 0 ermitteln */
     
     SAY SCSI_PRODUCT('scsi.device',0)

@{b}SIEHE AUCH@{ub}

 @{" SCSI_DEVICETYPE() " Link "SCSI_DEVICETYPE()"}     Typ eines SCSI-Gerätes ermitteln, DISK, TAPE etc.
 @{" SCSI_MANUFACTURER() " Link "SCSI_MANUFACTURER()"}   Hersteller eines SCSI-Gerätes ermitteln
 @{" SCSI_REVISION() " Link "SCSI_REVISION()"}       Revision eines SCSI-Gerätes ermitteln
 @{" SCSI_TESTREADY() " Link "SCSI_TESTREADY()"}      Feststellen, ob ein SCSI-Gerät betriebsbereit ist


@EndNode

@Node "SCSI_REVISION()" "rexxtricks.guide/SCSI_REVISION()"
@Toc "Funktionen der Library"

Die Funktion SCSI_REVISION()
****************************

@{b}NAME@{ub}
     revision = SCSI_REVISION(device,unit)

@{b}ALIAS@{ub}
     revision = RXTR_SCSI_REVISION(device,unit)

@{b}BESCHREIBUNG@{ub}
     Gibt die Revision eines angeschlossenen SCSI-Gerätes zurück.

@{b}ARGUMENTE@{ub}
     device   - Device, mit dem das SCSI-Gerät angesteuert wird.
     
     unit     - Unit Nummer des SCSI-Gerätes.

@{b}ERGEBNIS@{ub}
     revision - Die Revision des Gerätes, wenn kein Gerät gefunden wurde
                wird ein Leerstring " zurückgegeben.

@{b}BEISPIEL@{ub}
     /* Revision des Geräts an 'scsi.device' Unit 0 ermitteln */
     
     SAY SCSI_REVISION('scsi.device',0)

@{b}SIEHE AUCH@{ub}

 @{" SCSI_DEVICETYPE() " Link "SCSI_DEVICETYPE()"}     Typ eines SCSI-Gerätes ermitteln, DISK, TAPE etc.
 @{" SCSI_MANUFACTURER() " Link "SCSI_MANUFACTURER()"}   Hersteller eines SCSI-Gerätes ermitteln
 @{" SCSI_PRODUCT() " Link "SCSI_PRODUCT()"}        Produktbezeichnung eines SCSI-Gerätes ermitteln
 @{" SCSI_TESTREADY() " Link "SCSI_TESTREADY()"}      Feststellen, ob ein SCSI-Gerät betriebsbereit ist


@EndNode

@Node "SCSI_TESTREADY()" "rexxtricks.guide/SCSI_TESTREADY()"
@Toc "Funktionen der Library"

Die Funktion SCSI_TESTREADY()
*****************************

@{b}NAME@{ub}
     bool = SCSI_TESTREADY(device,unit)

@{b}ALIAS@{ub}
     bool = RXTR_SCSI_TESTREADY(device,unit)

@{b}BESCHREIBUNG@{ub}
     Stellt fest, ob ein Gerät betribsbereit ist. Bei Wechselplatten läßt
     sich mit dieser Funktion z.B. feststellen ob ein Medium eingelegt ist.

@{b}ARGUMENTE@{ub}
     device - Device, mit dem das SCSI-Gerät angesteuert wird.
     
     unit   - Unit Nummer des SCSI-Gerätes.

@{b}ERGEBNIS@{ub}
     bool   - 1 wenn das Gerät betriebsbereit ist, 0 wenn nicht

@{b}BEISPIEL@{ub}
     /* Feststellen ob das Gerät an 'scsi.device' Unit 0 bereit ist */
     
     IF SCSI_TESTREADY('scsi.device',0) THEN
        SAY 'Gerät ist bereit!'
     ELSE
        SAY 'Gerät ist nicht bereit!'

@{b}SIEHE AUCH@{ub}

 @{" SCSI_DEVICETYPE() " Link "SCSI_DEVICETYPE()"}     Typ eines SCSI-Gerätes ermitteln, DISK, TAPE etc.
 @{" SCSI_MANUFACTURER() " Link "SCSI_MANUFACTURER()"}   Hersteller eines SCSI-Gerätes ermitteln
 @{" SCSI_PRODUCT() " Link "SCSI_PRODUCT()"}        Produktbezeichnung eines SCSI-Gerätes ermitteln
 @{" SCSI_REVISION() " Link "SCSI_REVISION()"}       Revision eines SCSI-Gerätes ermitteln


@EndNode

@Node "READCLIPBOARD()" "rexxtricks.guide/READCLIPBOARD()"
@Toc "Funktionen der Library"

Die Funktion READCLIPBOARD()
****************************

@{b}NAME@{ub}
     result = READCLIPBOARD(unit,destvar)

@{b}ALIAS@{ub}
     result = RXTR_READCLIPBOARD(unit,destvar)

@{b}BESCHREIBUNG@{ub}
     Liest Text zeilenweise aus dem Clipboard in eine Stem-Variable ein,
     oder gibt den gesamten Inhalt des Clipboards zurück.

@{b}ARGUMENTE@{ub}
     unit    - Clipboard-Unit, aus der gelesen werden soll.
     
     destvar - Name der Stem-Variablen, in der aus dem Clipboard
               gelesene Text gespeichert werden soll. Der Text wird
               zeilenweise in der Variablen gespeichert:
     
               destvar.0 - enthält die Anzahl der gelesenen Zeilen
               destvar.1 - enthält die erste Zeile
               destvar.2 - enthält die zweite Zeile
               destvar.n - enthält die n-te Zeile
     
               @{b}Wenn keine Variable angegeben ist wird der gesamte
               gelesene Inhalt als Rückgabewert zurückgegeben.@{ub}

@{b}ERGEBNIS@{ub}
     result  - Wenn 'stemvar' @{b}nicht@{ub} angegeben ist wird der gesamte
               Clipboard-Inhalt zurückgegeben.
     
               Wenn eine Variable angegeben ist wird immer ein Leerstring
               " zurückgegeben, 'result' kann deshalb ignoriert werden.

@{b}BEISPIEL@{ub}
     /* Clipboard auslesen und anzeigen */
     
     SAY READCLIPBOARD(0)
     
     SAY '------------------'
     
     CALL READCLIPBOARD(0,'array')
     
     SAY 'Anzahl Zeilen:' array.0
     
     DO i = 1 TO array.0
        SAY 'Zeile' i || ':' array.i
     END

@{b}SIEHE AUCH@{ub}

 @{" WRITECLIPBOARD() " Link "WRITECLIPBOARD()"}   Text im Clipboard speichern


@EndNode

@Node "WRITECLIPBOARD()" "rexxtricks.guide/WRITECLIPBOARD()"
@Toc "Funktionen der Library"

Die Funktion WRITECLIPBOARD()
*****************************

@{b}NAME@{ub}
     bool = WRITECLIPBOARD(unit,string,stemvar)

@{b}ALIAS@{ub}
     bool = RXTR_WRITECLIPBOARD(unit,string,stemvar)

@{b}BESCHREIBUNG@{ub}
     Speichert einen String oder den Inhalt einer Stem-Variablen im
     Clipboard.

@{b}ARGUMENTE@{ub}
     unit    - Clipboard-Unit, in die gespeichert werden soll.
     
     string  - String, der im Clipboard gespeichert werden soll.
     
     stemvar - Name einer Stem-Variablen, deren Inhalt im Clipboard
               gespeichert werden soll. Jedes Element der Variablen
               wird als eine Zeile gespeichert, ein Zeilenvorschub
               wird automatisch angehängt. Die Variable muß folgenden
               Inhalt haben:
     
               stemvar.0 - muß die Anzahl der Zeilen enthalten
               stemvar.1 - muß die erste Zeile enthalten
               stemvar.2 - muß die zweite Zeile enthalten
               stemvar.n - muß die n-te Zeile enthalten
     
               @{b}Es kann entweder nur 'string', oder nur 'stemvar' im
               Clipboard gespeichert werden. Wenn 'stemvar' nicht
               angegeben ist wird 'string' gespeichert.@{ub}

@{b}ERGEBNIS@{ub}
     bool    - 1 wenn alles geklappt hat, 0 im Fehlerfall

@{b}BEISPIEL@{ub}
     /* Text im Clipboard in Unit 0 speichern */
     
     IF WRITECLIPBOARD(0,'Dies ist ein Test') THEN
        SAY 'Okay!'
     ELSE
        SAY 'Fehler beim Speichern ins Clipboard!'

@{b}SIEHE AUCH@{ub}

 @{" READCLIPBOARD() " Link "READCLIPBOARD()"}   Text aus dem Clipboard einlesen


@EndNode

@Node "QSORT()" "rexxtricks.guide/QSORT()"
@Toc "Funktionen der Library"

Die Funktion QSORT()
********************

@{b}NAME@{ub}
     bool = QSORT(liste,destvar,case,feld,separator)

@{b}ALIAS@{ub}
     bool = RXTR_QSORT(liste,destvar,case,feld,separator)

@{b}BESCHREIBUNG@{ub}
     Sortiert eine in einer Stem-Variablen gespeicherte Liste aufsteigend

@{b}ARGUMENTE@{ub}
     liste     - Die Liste, die sortiert werden soll. Dies muß eine
                 Stem-Variable mit folgendem Inhalt sein:
     
                 liste.0 - muß die Anzahl der Elemente enthalten
                 liste.1 - muß das erste Element enthalten
                 liste.2 - muß das zweite Element enthalten
                 liste.n - muß das n-te Element enthalten
     
     destvar   - Stem-Variable, in der die sortierte Liste gespeichert
                 werden soll. Die fertig sortierte Liste wird in dieser
                 Variablen genauso gespeichert wie in der übergebenen
                 Liste:
     
                 destvar.0 - enthält die Anzahl der Elemente
                 destvar.1 - enthält das erste Element
                 destvar.2 - enthält das zweite Element
                 destvar.n - enthält das n-te Element
     
                 Die Angabe dieser Variablen ist optional, wenn nichts
                 angegeben ist wird die liste direkt sortiert.
     
     case      - Gibt an ob bei der Sortierung zwischen Groß- und
                 Kleinbuchstaben unterschieden werden soll, ist
                 hier nichts angegeben dann wird nicht unterschieden.
     
                 Mögliche Angaben sind:
     
                 'CASE'   oder 'C'    - Groß- und Kleinbuchstaben werden
                                        unterschieden
                 'NOCASE' oder 'N'    - Groß- und Kleinbuchstaben werden
                                        nicht unterschieden
                 'NUMERIC' oder 'NUM' - Es wird nach Zahlen sortiert
     
     feld      - Die Nummer des Feldes, nach dem sortiert werden soll.
                 Felder werden durch das bei 'separator' angegebene
                 Zeichen voneinander getrennt. Feldnummern beginnen
                 immer bei 1. Wenn nichts angegeben ist wird nach dem
                 gesamten Inhalt der Variablen sortiert.
     
     separator - Zeichen, mit dem die Felder in den einzelnen Elementen
                 der Liste voneinander getrennt sind. Dieses Argument
                 wird nur verwendet wenn bei 'feld' eine Nummer angegeben
                 ist. Standard für 'separator' ist das Leerzeichen ' ',
                 es wird dann verwendet wenn eine Feldnummer angegeben
                 ist aber kein Separator.

@{b}ERGEBNIS@{ub}
     bool    - 1 wenn die Liste korrekt sortiert werden konnte
               0 wenn beim Sortieren ein Fehler aufgetreten ist

@{b}BEISPIEL@{ub}
     /* Liste nach 'destvar' sortieren */
     
     liste.0 = 4
     liste.1 = 'Musterfrau|Sabine|Bergstraße 75|12345 Musterdorf'
     liste.2 = 'Poweruser|Heinz|Megabitallee 128|87654 Mipshausen'
     liste.3 = 'Mustermann|Peter|Feldweg 3|35487 Teststadt'
     liste.4 = 'Kohrmeyer|Jürgen|Oststraße 2|49143 Bissendorf'
     
     IF QSORT('liste','destvar','NUMERIC',4,'|') THEN DO
        SAY 'Anzahl Elemente:' destvar.0
     
        DO i = 1 TO destvar.0
           SAY destvar.i
        END
     END
     
     /* Und jetzt die Liste auch direkt sortieren */
     
     IF QSORT('liste',,,2,'|') THEN DO
        DO i = 1 TO liste.0
           SAY liste.i
        END
     END

@{b}SIEHE AUCH@{ub}

 @{" BSEARCH() " Link "BSEARCH()"}   String mit Binärsuche suchen
 @{" LSEARCH() " Link "LSEARCH()"}   String mit Linearsuche suchen


@EndNode

@Node "BSEARCH()" "rexxtricks.guide/BSEARCH()"
@Toc "Funktionen der Library"

Die Funktion BSEARCH()
**********************

@{b}NAME@{ub}
     nummer = BSEARCH(key,liste,start,case)

@{b}ALIAS@{ub}
     nummer = RXTR_BSEARCH(key,liste,start,case)

@{b}BESCHREIBUNG@{ub}
     Sucht in einer Liste mit dem Binärverfahren nach einen bestimmten
     Element, die Liste muß aufsteigend sortiert sein!!!
     
     @{b}Achtung:@{ub} Seit der Version 37.24 der 'RexxTricks.library' hat diese
              Funktion ein neues Argument: 'start'! ARexx-Scripts, die
              für eine ältere Version geschrieben wurden, funktionieren
              weiterhin, dennoch sollte jeder seine Scripts an die neue
              Version anpassen!

@{b}ARGUMENTE@{ub}
     key     - das Element, nach dem gesucht werden soll
     
     liste   - Die Liste, in der gesucht werden soll. Dies muß eine
               Stem-Variable mit folgendem Inhalt sein:
     
               liste.0 - muß die Anzahl der Elemente enthalten
               liste.1 - muß das erste Element enthalten
               liste.2 - muß das zweite Element enthalten
               liste.n - muß das n-te Element enthalten
     
     start   - Die Nummer des Elements bei dem mit der Suche begonnen
               werden soll. Dieses Argument ist optional, wenn nichts
               angegeben ist wird bei Element 0 mit der Suche begonnen.
     
     case    - Gibt an ob bei der Suche zwischen Groß- und Klein-
               buchstaben unterschieden werden soll, ist hier nichts
               angegeben dann wird nicht unterschieden.
     
               Mögliche Angaben sind:
     
               'CASE'   oder 'C' - Groß- und Kleinbuchstaben werden
                                   unterschieden
               'NOCASE' oder 'N' - Groß- und Kleinbuchstaben werden
                                   nicht unterschieden

@{b}ERGEBNIS@{ub}
     nummer  - die Nummer des gesuchten Elements in der Liste oder -1 wenn
               das Element nicht gefunden wurde

@{b}BEISPIEL@{ub}
     /* Element in einer Liste mit dem Binärverfahren suchen */
     
     liste.0 = 4
     liste.1 = 'Hallo'
     liste.2 = 'Mahlzeit'
     liste.3 = 'Moin'
     liste.4 = 'Tach'
     
     nummer = BSEARCH('Moin','liste',0,'CASE')
     
     IF nummer ~= (-1) THEN
        SAY 'Moin ist Element Nr:' nummer
     ELSE
        SAY 'Element nicht gefunden'

@{b}SIEHE AUCH@{ub}

 @{" QSORT() " Link "QSORT()"}     Liste mit QuickSort sortieren
 @{" LSEARCH() " Link "LSEARCH()"}   String mit Linearsuche suchen


@EndNode

@Node "LSEARCH()" "rexxtricks.guide/LSEARCH()"
@Toc "Funktionen der Library"

Die Funktion LSEARCH()
**********************

@{b}NAME@{ub}
     nummer = LSEARCH(key,liste,start,case,pattern)

@{b}ALIAS@{ub}
     nummer = RXTR_LSEARCH(key,liste,start,case,pattern)

@{b}BESCHREIBUNG@{ub}
     Sucht ab dem angegebenen Startelement linear in einer Liste nach
     dem ersten Auftreten eines bestimmten Elements, die Liste muß nicht
     sortiert sein!!!

@{b}ARGUMENTE@{ub}
     key     - das Element nach dem gesucht werden soll, in Verbindung
               mit dem Argument 'pattern' können hier alle AmigaDOS
               Namensmuster verwendet werden.
     
     liste   - Die Liste, in der gesucht werden soll. Dies muß eine
               Stem-Variable mit folgendem Inhalt sein:
     
               liste.0 - muß die Anzahl der Elemente enthalten
               liste.1 - muß das erste Element enthalten
               liste.2 - muß das zweite Element enthalten
               liste.n - muß das n-te Element enthalten
     
     start   - Die Nummer des Elements bei dem mit der Suche begonnen
               werden soll. Dieses Argument ist optional, wenn nichts
               angegeben ist wird bei Element 0 mit der Suche begonnen.
     
     case    - Gibt an, ob bei der Suche zwischen Groß- und Klein-
               buchstaben unterschieden werden soll, ist hier nichts
               angegeben dann wird nicht unterschieden.
     
               Mögliche Angaben sind:
     
               'CASE'   oder 'C' - Groß- und Kleinbuchstaben werden
                                   unterschieden
               'NOCASE' oder 'N' - Groß- und Kleinbuchstaben werden
                                   nicht unterschieden
     
     pattern - Gibt an, ob das bei 'key' angegebene Element AmigaDOS
               Namensmuster enthält. Wenn nichts angegeben ist wird
               bei der Suche ein einfacher Textvergleich durchgeführt.
     
               Mögliche Angaben sind:
     
               'PATTERN' oder 'P' - Namensmuster werden unterstützt
     
               'STRCMP'  oder 'S' - Bei der Suche wird ein einfacher
                                    Textvergleich durchgeführt

@{b}ERGEBNIS@{ub}
     nummer  - die Nummer des nächsten gesuchten Elements in der Liste
               oder -1 wenn kein passendes Element mehr gefunden wurde

@{b}BEISPIEL@{ub}
     /* Element in einer Liste suchen */
     
     liste.0 = 4
     liste.1 = 'Hallo'
     liste.2 = 'Moin'
     liste.3 = 'Tach'
     liste.4 = 'Mahlzeit'
     
     nummer = LSEARCH('tach','liste')
     
     IF nummer ~= (-1) THEN
        SAY 'Tach ist Element Nr:' nummer
     ELSE
        SAY 'Element nicht gefunden'

@{b}SIEHE AUCH@{ub}

 @{" QSORT() " Link "QSORT()"}     Liste mit QuickSort sortieren
 @{" BSEARCH() " Link "BSEARCH()"}   String mit Binärsuche suchen


@EndNode

@Node "STEMCOPY()" "rexxtricks.guide/STEMCOPY()"
@Toc "Funktionen der Library"

Die Funktion STEMCOPY()
***********************

@{b}NAME@{ub}
     bool = STEMCOPY(quelle,start1,ziel,start2,anzahl)

@{b}ALIAS@{ub}
     bool = RXTR_STEMCOPY(quelle,start1,ziel,start2,anzahl)

@{b}BESCHREIBUNG@{ub}
     Kopiert die Inhalte einer Stem-Variablen in eine andere Stem-Variable.

@{b}ARGUMENTE@{ub}
     quelle - Name der Stem-Variablen, deren Inhalt kopiert werden soll.
              Diese Variable muß wie folgt aufgebaut sein:
     
              quelle.0 - muß die Anzahl der Elemente enthalten
              quelle.1 - muß das erste Element enthalten
              quelle.2 - muß das zweite Element enthalten
              quelle.n - muß das n-te Element enthalten
     
     start1 - Index, ab dem aus der bei 'quelle' angegebenen
              Stem-Variablen kopiert werden soll.
     
     ziel   - Name der Stem-Variablen, in die kopiert werden soll.
     
     start2 - Index, ab dem in die bei 'ziel' angegebene Variable
              kopiert werden soll.
     
     anzahl - Anzahl der Elemente, die kopiert werden sollen. Wenn nichts
              angegeben ist werden ab dem bei 'start1' angegebenen Element
              alle Elemente kopiert.

@{b}ERGEBNIS@{ub}
     bool   - 1 wenn alles geklappt hat, 0 im Fehlerfall

@{b}BEISPIEL@{ub}
     /* Stem-Variable teilweise kopieren */
     
     liste.0 = 4
     liste.1 = 'Hallo'
     liste.2 = 'Moin'
     liste.3 = 'Tach'
     liste.4 = 'Mahlzeit'
     
     IF STEMCOPY('liste',2,'neuliste',1,2) THEN DO
        SAY 'Neue Anzahl:' neuliste.0
     
        DO i = 1 TO neuliste.0
           SAY neuliste.i
        END
     END
     ELSE
        SAY 'Fehler beim Kopieren!'

@{b}SIEHE AUCH@{ub}

 @{" STEMINSERT() " Link "STEMINSERT()"}   Elemente in eine Stem-Variable einfügen
 @{" STEMREMOVE() " Link "STEMREMOVE()"}   Elemente einer Stem-Variablen entfernen


@EndNode

@Node "STEMINSERT()" "rexxtricks.guide/STEMINSERT()"
@Toc "Funktionen der Library"

Die Funktion STEMINSERT()
*************************

@{b}NAME@{ub}
     bool = STEMINSERT(stemvar,start,anzahl,inhalt)

@{b}ALIAS@{ub}
     bool = RXTR_STEMINSERT(stemvar,start,anzahl,inhalt)

@{b}BESCHREIBUNG@{ub}
     Fügt ein oder mehrere Elemente in eine Stem-Variable ein, alle
     nachfolgenden Felder werden entsprechend nach hinten verschoben.

@{b}ARGUMENTE@{ub}
     stemvar - Name der Stem-Variablen, in die Elemente eingefügt werden
               sollen. Diese Variable muß folgenden Aufbau haben:
     
               stemvar.0 - muß die Anzahl der Elemente enthalten
               stemvar.1 - muß das erste Element enthalten
               stemvar.2 - muß das zweite Element enthalten
               stemvar.n - muß das n-te Element enthalten
     
     start   - Index, ab dem Elemente eingefügt werden sollen
     
     anzahl  - Anzahl der Elemente, die eingefügt werden sollen. Wenn
               nichts angegeben ist wird ein Element eingefügt.
     
     inhalt  - Standard Inhalt für die eingefügten Elemente, wenn hier
               nichts angegeben ist wird ein Leerstring '' verwendet.

@{b}ERGEBNIS@{ub}
     bool    - 1 wenn alles geklappt hat, 0 im Fehlerfall

@{b}BEISPIEL@{ub}
     /* 2 Elemente einfügen */
     
     liste.0 = 4
     liste.1 = 'Hallo'
     liste.2 = 'Moin'
     liste.3 = 'Tach'
     liste.4 = 'Mahlzeit'
     
     IF STEMINSERT('liste',3,2,'Neu') THEN DO
        SAY 'Neue Anzahl:' liste.0
     
        DO i = 1 TO liste.0
           SAY liste.i
        END
     END
     ELSE
        SAY 'Fehler beim Einfügen!'

@{b}SIEHE AUCH@{ub}

 @{" STEMCOPY() " Link "STEMCOPY()"}     Stem-Variable ganz oder teilweise kopieren
 @{" STEMREMOVE() " Link "STEMREMOVE()"}   Elemente einer Stem-Variablen entfernen


@EndNode

@Node "STEMREMOVE()" "rexxtricks.guide/STEMREMOVE()"
@Toc "Funktionen der Library"

Die Funktion STEMREMOVE()
*************************

@{b}NAME@{ub}
     bool = STEMREMOVE(stemvar,start,anzahl)

@{b}ALIAS@{ub}
     bool = RXTR_STEMREMOVE(stemvar,start,anzahl)

@{b}BESCHREIBUNG@{ub}
     Entfernt ein oder mehrere Elemente einer Stem-Variablen, alle
     nachfolgenden Felder werden entsprechend nach vorne verschoben.

@{b}ARGUMENTE@{ub}
     stemvar - Name der Stem-Variablen, aus der die Elemente entfernt
               werden sollen. Diese Variable muß folgenden Aufbau haben:
     
               stemvar.0 - muß die Anzahl der Elemente enthalten
               stemvar.1 - muß das erste Element enthalten
               stemvar.2 - muß das zweite Element enthalten
               stemvar.n - muß das n-te Element enthalten
     
     start   - Index, ab dem Elemente entfernt werden sollen
     
     anzahl  - Anzahl der Elemente, die entfernt werden sollen. Wenn nichts
               angegeben ist wird nur das bei 'start' angegebene Element
               entfernt.

@{b}ERGEBNIS@{ub}
     bool    - 1 wenn alles geklappt hat, 0 im Fehlerfall

@{b}BEISPIEL@{ub}
     /* Das dritte Element einer Stem-Variablen entfernen */
     
     liste.0 = 4
     liste.1 = 'Hallo'
     liste.2 = 'Moin'
     liste.3 = 'Tach'
     liste.4 = 'Mahlzeit'
     
     IF STEMREMOVE('liste',3) THEN DO
        SAY 'Neue Anzahl:' liste.0
     
        DO i = 1 TO liste.0
           SAY liste.i
        END
     END
     ELSE
        SAY 'Fehler beim Entfernen!'

@{b}SIEHE AUCH@{ub}

 @{" STEMCOPY() " Link "STEMCOPY()"}     Stem-Variable ganz oder teilweise kopieren
 @{" STEMINSERT() " Link "STEMINSERT()"}   Elemente in eine Stem-Variable einfügen


@EndNode

@Node "VIEWLIST()" "rexxtricks.guide/VIEWLIST()"
@Toc "Funktionen der Library"

Die Funktion VIEWLIST()
***********************

@{b}NAME@{ub}
     bool = VIEWLIST(liste,fenster,destvar)

@{b}ALIAS@{ub}
     bool = RXTR_VIEWLIST(liste,fenster,destvar)

@{b}BESCHREIBUNG@{ub}
     Stellt eine Liste von in einem ListView-Fenster dar und gestattet
     die komfortable Auswahl eines oder mehrerer Elemente.

@{b}ARGUMENTE@{ub}
     liste   - Die Liste, die im Fenster dargestellt werden soll. Dies
               muß eine Stem-Variable mit folgendem Inhalt sein:
     
               liste.0 - muß die Anzahl der Elemente enthalten
               liste.1 - muß das erste Element enthalten
               liste.2 - muß das zweite Element enthalten
               liste.n - muß das n-te Element enthalten
     
     fenster - Stem-Variable, die einige Definitionen für das zu verwendende
               Fenster enthält. Für nicht angegebene Definitionen werden
               Standardwerte verwendet:
     
               fenster.title       - der Titel des Fensters
                                     Standardwert: RexxTricks-ListView
     
               fenster.postext     - der Text des 'Benutzen'-Gadgets. Dieses
                                     Gadget wird nur dann eingebunden, wenn
                                     'fenster.gadgettext' nicht angegeben ist.
                                     Standardwert: Benutzen
     
               fenster.negtext     - der Text des 'Abbrechen'-Gadgets. Dieses
                                     Gadget wird nur dann eingebunden, wenn
                                     'fenster.gadgettext' nicht angegeben ist.
                                     Standardwert: Abbrechen
     
               fenster.gadgettext  - Texte für Gadgets, die anstelle von 'Okay'
                                     und 'Abbruch', verwendet werden sollen.
                                     Hier können beliebig viele Texte, getrennt
                                     durch '|', angegeben werden Für jeden Text
                                     wird dann ein eigenes Gadget erstellt. Durch
                                     Voranstellen des Zeichens '_' werden die
                                     jeweils folgenden Zeichen als Tastenbefehl
                                     für das entsprechende Gadget konfiguriert.
     
                                     '_Beenden|S_peichern & Beenden|_Abbrechen'
                                     würde im Fenster z.B. drei Gadgets mit den
                                     Tastenbefehlen 'b', 'p' und 'a' ergeben.
     
               fenster.pubscreen   - der Publicscreen, auf dem das Fenster
                                     geöffnet werden soll
                                     Standardwert: Default-Publicscreen
     
               fenster.font        - der Font, der verwendet werden soll
                                     DEFAULT     : der Standard-Systemfont
                                     SCREEN      : der Font des Screens
                                     Standardwert: Standard-Systemfont
     
               fenster.left        - X-Koordinate der linken, oberen Ecke des
                                     Fensters. Wenn nichts angegeben ist wird
                                     das Fenster auf dem Bildschirm zentriert.
     
               fenster.top         - Y-Koordinate der linken, oberen Ecke des
                                     Fensters. Wenn nichts angegeben ist wird
                                     das Fenster auf dem Bildschirm zentriert.
     
               fenster.width       - die Breite des Fensters, wenn nichts
                                     angegeben wird passt sich das Fenster
                                     an die Breite der Gadgets an. Wenn die
                                     angegebene Breite zur Darstellung der
                                     Gadgets nicht ausreicht wird das Fenster
                                     automatisch verbreitert.
     
               fenster.height      - die Höhe des Fensters, wenn nichts angegeben
                                     ist wird das Fenster mit ca. 3/4 der Höhe des
                                     Bildschirms geöffnet.
     
               fenster.zoomleft    - X-Koordinate der linken, oberen Ecke des
                                     verkleinerten Fensters. Wenn nichts angegeben
                                     ist wird die Koordinate des normalen Fensters
                                     verwendet.
     
               fenster.zoomtop     - Y-Koordinate der linken, oberen Ecke des
                                     verkleinerten Fensters. Wenn nichts angegeben
                                     ist wird die Koordinate des normalen Fensters
                                     verwendet.
     
               fenster.sort        - gibt an ob die Liste sortiert werden soll
                                     TRUE        : sortieren
                                     FALSE       : nicht sortieren
                                     Standardwert: sortieren
     
               fenster.multiselect - schaltet Mehrfachauswahl ein oder aus
                                     TRUE        : eingeschaltet
                                     FALSE       : ausgeschaltet
                                     Standardwert: eingeschaltet
     
     destvar - Stem-Variable, in der die ausgewählten Elemente gespeichert
               werden sollen. Die ausgewählten Elemente werden in dieser
               Variablen genauso gespeichert wie die übergebene Liste:
     
               destvar.0 - enthält die Anzahl der ausgewählten Elemente
               destvar.1 - enthält das erste ausgewählte Element
               destvar.2 - enthält das zweite ausgewählte Element
               destvar.n - enthält das n-te ausgewählte Element
     
               Außerdem enthält diese Stem-Variable noch die Nummer des
               zum Schließen ausgewählten Gadgets:
     
               destvar.gadget - 1 entspricht dem Gadget ganz links, 2 dem
                                zweiten, 3 dem dritten Gadget usw. Das Gadget
                                ganz rechts bricht immer die Auswahl ab und
                                liefert, ebenso wie das Schließen des Fensters,
                                einen Wert von 0.

@{b}ERGEBNIS@{ub}
     bool    - 1 wenn mindestens ein Element ausgewählt wurde
               0 im Fehlerfall oder wenn kein Element ausgewählt wurde

@{b}BEISPIEL@{ub}
     /* ListView aufrufen und Auswahl auswerten */
     
     liste.0 = 4
     liste.1 = 'Hallo'
     liste.2 = 'Moin'
     liste.3 = 'Tach'
     liste.4 = 'Mahlzeit'
     
     fenster.title      = 'Bitte wählen'
     fenster.gadgettext = '_Jawoll|_Hmm...|Lieber _nicht'
     fenster.pubscreen  = 'MICRODOT'
     fenster.font       = 'SCREEN'
     fenster.sort       = 'TRUE'
     
     IF VIEWLIST('liste','fenster','destvar') THEN DO
        SAY 'Anzahl der ausgewählten Einträge:' destvar.0
        SAY 'Nummer des ausgewählten Gadgets :' destvar.gadget
     
        DO i = 1 TO destvar.0
           SAY destvar.i
        END
     END

@{b}SIEHE AUCH@{ub}

 @{" Das VIEWLIST() Fenster " Link "Das VIEWLIST() Fenster"}   Maus- und Tastaturbedienung des Auswahlfensters


@EndNode

@Node "BEEP()" "rexxtricks.guide/BEEP()"
@Toc "Funktionen der Library"

Die Funktion BEEP()
*******************

@{b}NAME@{ub}
     dummy = BEEP()

@{b}ALIAS@{ub}
     dummy = RXTR_BEEP()

@{b}BESCHREIBUNG@{ub}
     Läßt alle Bilschirme aufblitzen

@{b}ARGUMENTE@{ub}
     -/-

@{b}ERGEBNIS@{ub}
     dummy - ist immer 1

@{b}BEISPIEL@{ub}
     /* Bildschirmblitz */
     
     dummy = BEEP()

@{b}SIEHE AUCH@{ub}

@EndNode

@Node "GETDEFAULTPUBSCREEN()" "rexxtricks.guide/GETDEFAULTPUBSCREEN()"
@Toc "Funktionen der Library"

Die Funktion GETDEFAULTPUBSCREEN()
**********************************

@{b}NAME@{ub}
     screen = GETDEFAULTPUBSCREEN()

@{b}ALIAS@{ub}
     screen = RXTR_GETDEFAULTPUBSCREEN()

@{b}BESCHREIBUNG@{ub}
     Ermittelt den Namen des Default-Publicscreen

@{b}ARGUMENTE@{ub}
     -/-

@{b}ERGEBNIS@{ub}
     screen - Der Name des Default-Publicscreen

@{b}BEISPIEL@{ub}
     /* Namen des Default-Publicscreen ermitteln */
     
     screen = GETDEFAULTPUBSCREEN()
     SAY 'Default-Publicscreen ist:' screen

@{b}SIEHE AUCH@{ub}

 @{" SETDEFAULTPUBSCREEN() " Link "SETDEFAULTPUBSCREEN()"}   Neuen Default-Publicscreen einstellen
 @{" PUBSCREENLIST() " Link "PUBSCREENLIST()"}         Liste aller Publicscreens erstellen


@EndNode

@Node "SETDEFAULTPUBSCREEN()" "rexxtricks.guide/SETDEFAULTPUBSCREEN()"
@Toc "Funktionen der Library"

Die Funktion SETDEFAULTPUBSCREEN()
**********************************

@{b}NAME@{ub}
     oldscreen = SETDEFAULTPUBSCREEN(newscreen)

@{b}ALIAS@{ub}
     oldscreen = RXTR_SETDEFAULTPUBSCREEN(newscreen)

@{b}BESCHREIBUNG@{ub}
     Stellt den angegebenen Screen als neuen Default-Publicscreen ein.  Die
     Funktion liefert den Namen des bisherigen Default-Publicscreen zurück.

@{b}ARGUMENTE@{ub}
     newscreen - Der Name des Screens der als Default-Publicscreen
                 eingestellt werden soll. Wenn dieses Argument nicht
                 angegeben ist, dann wird der Workbench-Screen als
                 Default-Publicscreen eingestellt.

@{b}ERGEBNIS@{ub}
     oldscreen - Der Name des bisherigen Default-Publicscreen

@{b}BEISPIEL@{ub}
     /* Den CED-Screen als Default-Publicscreen einstellen */
     
     oldscreen = SETDEFAULTPUBSCREEN('CygnusEdScreen1')
     SAY 'Bisheriger Default-Publicscreen war:' oldscreen

@{b}SIEHE AUCH@{ub}

 @{" GETDEFAULTPUBSCREEN() " Link "GETDEFAULTPUBSCREEN()"}   Default-Publicscreen ermitteln
 @{" PUBSCREENLIST() " Link "PUBSCREENLIST()"}         Liste aller Publicscreens erstellen


@EndNode

@Node "GETPUBSCREENMODES()" "rexxtricks.guide/GETPUBSCREENMODES()"
@Toc "Funktionen der Library"

Die Funktion GETPUBSCREENMODES()
********************************

@{b}NAME@{ub}
     publicmodes = GETPUBSCREENMODES()

@{b}ALIAS@{ub}
     publicmodes = RXTR_GETPUBSCREENMODES()

@{b}BESCHREIBUNG@{ub}
     Ermittelt die eingestellten Publicscreen-Modi

@{b}ARGUMENTE@{ub}
     -/-

@{b}ERGEBNIS@{ub}
     publicmodes - Ein 2 Zeichen langer String der die Publicscreen-Modi
                   enthält. Das erste Zeichen stellt den @{b}SHANGHAI@{ub}-Modus
                   dar, das zweite Zeichen den @{b}POPPUBSCREEN@{ub}-Modus.
     
                   Bei eingeschaltetem @{b}SHANGHAI@{ub}-Modus werden alle
                   Workbench-Fenster auf dem Default-Publicscreen geöffnet.
     
                   Bei eingeschaltetem @{b}POPPUBSCREEN@{ub}-Modus wird beim
                   Öffnen eines Fensters der entsprechende PublicScreen in
                   den Vordergrund gebracht.
     
                   @{b}--@{ub} SHANGHAI und POPPUBSCREEN ausgeschaltet
     
                   @{b}S-@{ub} SHANGHAI eingeschaltet
     
                   @{b}-P@{ub} POPPUBSCREEN eingeschaltet
     
                   @{b}SP@{ub} SHANGHAI und POPPUBSCREEN eingeschaltet

@{b}BEISPIEL@{ub}
     /* Publicscreen-Modi ermitteln */
     
     publicmodes = GETPUBSCREENMODES()
     SAY 'Publicscreen-Modi:' publicmodes

@{b}SIEHE AUCH@{ub}

 @{" SETPUBSCREENMODES() " Link "SETPUBSCREENMODES()"}   Publicscreen-Modi einstellen


@EndNode

@Node "SETPUBSCREENMODES()" "rexxtricks.guide/SETPUBSCREENMODES()"
@Toc "Funktionen der Library"

Die Funktion SETPUBSCREENMODES()
********************************

@{b}NAME@{ub}
     oldmodes = SETPUBSCREENMODES(publicmodes)

@{b}ALIAS@{ub}
     oldmodes = RXTR_SETPUBSCREENMODES(publicmodes)

@{b}BESCHREIBUNG@{ub}
     Stellt neue Publicscreen-Modi ein

@{b}ARGUMENTE@{ub}
     publicmodes - Ein 2 Zeichen langer String der die Publicscreen-Modi
                   enthält. Das erste Zeichen stellt den @{b}SHANGHAI@{ub}-Modus
                   dar, das zweite Zeichen den @{b}POPPUBSCREEN@{ub}-Modus.
     
                   Bei eingeschaltetem @{b}SHANGHAI@{ub}-Modus werden alle
                   Workbench-Fenster auf dem Default-Publicscreen geöffnet.
     
                   Bei eingeschaltetem @{b}POPPUBSCREEN@{ub}-Modus wird beim
                   Öffnen eines Fensters der entsprechende PublicScreen in
                   den Vordergrund gebracht.
     
                   @{b}--@{ub} SHANGHAI und POPPUBSCREEN werden ausgeschaltet
     
                   @{b}S-@{ub} SHANGHAI wird eingeschaltet
     
                   @{b}-P@{ub} POPPUBSCREEN wird eingeschaltet
     
                   @{b}SP@{ub} SHANGHAI und POPPUBSCREEN werden eingeschaltet

@{b}ERGEBNIS@{ub}
     oldmodes    - Die vorher eingestellten Publicscreen-Modi im oben
                   beschriebenen Format.

@{b}BEISPIEL@{ub}
     /* SHANGHAI-Modus einschalten, POPPUBSCREEN-Modus ausschalten */
     
     oldmodes = SETPUBSCREENMODES('S-')
     SAY 'Vorher eingestellte Publicscreen-Modi:' oldmodes

@{b}SIEHE AUCH@{ub}

 @{" GETPUBSCREENMODES() " Link "GETPUBSCREENMODES()"}   Publicscreen-Modi ermitteln


@EndNode

@Node "PUBSCREENTOFRONT()" "rexxtricks.guide/PUBSCREENTOFRONT()"
@Toc "Funktionen der Library"

Die Funktion PUBSCREENTOFRONT()
*******************************

@{b}NAME@{ub}
     bool = PUBSCREENTOFRONT(screen)

@{b}ALIAS@{ub}
     bool = RXTR_PUBSCREENTOFRONT(screen)

@{b}BESCHREIBUNG@{ub}
     Bringt den angegebenen Publicscreen nach vorne vor alle anderen Screens

@{b}ARGUMENTE@{ub}
     screen - Der Name des Publicscreen, der nach vorne gebracht werden
              soll

@{b}ERGEBNIS@{ub}
     bool    - 1 wenn alles geklappt hat
               0 wenn der Screen nicht nach vorne gebracht werden konnte

@{b}BEISPIEL@{ub}
     /* CED-Screen nach vorne bringen */
     
     IF PUBSCREENTOFRONT('CygnusEdScreen1') THEN
        SAY 'Der CED-Screen ist jetzt vorne!'
     ELSE
        SAY 'Der Screen konnte nicht nach vorne gebracht werden!'

@{b}SIEHE AUCH@{ub}

 @{" PUBSCREENTOBACK() " Link "PUBSCREENTOBACK()"}   Publicscreen nach hinten legen


@EndNode

@Node "PUBSCREENTOBACK()" "rexxtricks.guide/PUBSCREENTOBACK()"
@Toc "Funktionen der Library"

Die Funktion PUBSCREENTOBACK()
******************************

@{b}NAME@{ub}
     bool = PUBSCREENTOBACK(screen)

@{b}ALIAS@{ub}
     bool = RXTR_PUBSCREENTOBACK(screen)

@{b}BESCHREIBUNG@{ub}
     Legt den angegebenen Publicscreen hinter alle anderen Screens

@{b}ARGUMENTE@{ub}
     screen - Der Name des Publicscreen, der nach hinten gelegt werden soll

@{b}ERGEBNIS@{ub}
     bool    - 1 wenn alles geklappt hat
               0 wenn der Screen nicht nach hinten gelegt werden konnte

@{b}BEISPIEL@{ub}
     /* Workbench-Screen nach hinten legen */
     
     IF PUBSCREENTOBACK('Workbench') THEN
        SAY 'Der Workbench-Screen ist jetzt ganz hinten!'
     ELSE
        SAY 'Der Workbench-Screen konnte nicht nach hinten gelegt werden!'

@{b}SIEHE AUCH@{ub}

 @{" PUBSCREENTOFRONT() " Link "PUBSCREENTOFRONT()"}   Publicscreen nach vorne bringen


@EndNode

@Node "PUBSCREENLIST()" "rexxtricks.guide/PUBSCREENLIST()"
@Toc "Funktionen der Library"

Die Funktion PUBSCREENLIST()
****************************

@{b}NAME@{ub}
     bool = PUBSCREENLIST(destvar)

@{b}ALIAS@{ub}
     bool = RXTR_PUBSCREENLIST(destvar)

@{b}BESCHREIBUNG@{ub}
     Erstellt eine Liste der im System vorhandenen Publicscreens

@{b}ARGUMENTE@{ub}
     destvar - Stem-Variable, in der die Namen der Screens gespeichert
               werden sollen. Die Namen werden wie folgt gespeichert:
     
               destvar.0 - enthält die Anzahl der Publicscreens
               destvar.1 - enthält den Namen des ersten Screens
               destvar.2 - enthält den Namen des zweiten Screens
               destvar.n - enthält den Namen des n-ten Screens

@{b}ERGEBNIS@{ub}
     bool    - 1 wenn alles geklappt hat
               0 wenn ein Fehler aufgetreten ist

@{b}BEISPIEL@{ub}
     /* Namen aller Publicscreens anzeigen */
     
     IF PUBSCREENLIST('screenliste') THEN DO
        SAY 'Anzahl Publicscreens:' screenliste.0
        DO i = 1 TO screenliste.0
           SAY screenliste.i
        END
     END

@{b}SIEHE AUCH@{ub}

 @{" GETDEFAULTPUBSCREEN() " Link "GETDEFAULTPUBSCREEN()"}   Default-Publicscreen ermitteln
 @{" SETDEFAULTPUBSCREEN() " Link "SETDEFAULTPUBSCREEN()"}   Neuen Default-Publicscreen einstellen


@EndNode

@Node "GETTOOLTYPEVALUE()" "rexxtricks.guide/GETTOOLTYPEVALUE()"
@Toc "Funktionen der Library"

Die Funktion GETTOOLTYPEVALUE()
*******************************

@{b}NAME@{ub}
     argument = GETTOOLTYPEVALUE(dateiname,schlüsselwort)

@{b}ALIAS@{ub}
     argument = RXTR_GETTOOLTYPEVALUE(dateiname,schlüsselwort)

@{b}BESCHREIBUNG@{ub}
     Ermittelt das Argument, das dem angegebenen Schlüsselwort zugeordnet
     ist.  Format eines Tooltypes: <Schlüsselwort>=<Argument>

@{b}ARGUMENTE@{ub}
     dateiname     - Der Dateiname des Icons, ohne die Endung '.info'!!!
     
     schlüsselwort - Das Schlüsselwort, dessen Argument ermittelt werden
                     soll.

@{b}ERGEBNIS@{ub}
     argument      - Das ermittelte Argument. Wenn das angegebene Schlüsselwort
                     kein Argument besitzt wird ein Leerstring '' zurückgegeben.
                     Wenn das Schlüsselwort, oder das Icon nicht gefunden wurde,
                     wird ein Leerstring '' zurückgegeben. In diesem Fall wird
                     zusätzlich die Variable @{b}RC@{ub} auf 10 gesetzt.

@{b}BEISPIEL@{ub}
     /* Hotkey des Commodities CrossDOS ermitteln */
     
     hotkey = GETTOOLTYPEVALUE('SYS:Wbstartup/CrossDOS','CX_POPKEY')
     
     IF hotkey ~= '' THEN
        SAY 'Der Hotkey von CrossDos ist:' hotkey
     ELSE DO
        IF RC = 0 THEN
           SAY 'Für den Tooltype ist kein Argument angegeben!'
        ELSE
           SAY 'Das Icon wurde nicht gefunden oder enthält den Tooltype nicht!'
     END

@{b}SIEHE AUCH@{ub}

 @{" SETTOOLTYPEVALUE() " Link "SETTOOLTYPEVALUE()"}   Argument eines Tooltypes einstellen
 @{" GETTOOLTYPES() " Link "GETTOOLTYPES()"}       Tooltypes eines Icons ermitteln
 @{" SETTOOLTYPES() " Link "SETTOOLTYPES()"}       Tooltypes eines Icons neu einstellen


@EndNode

@Node "SETTOOLTYPEVALUE()" "rexxtricks.guide/SETTOOLTYPEVALUE()"
@Toc "Funktionen der Library"

Die Funktion SETTOOLTYPEVALUE()
*******************************

@{b}NAME@{ub}
     bool = SETTOOLTYPEVALUE(dateiname,schlüsselwort,argument)

@{b}ALIAS@{ub}
     bool = RXTR_SETTOOLTYPEVALUE(dateiname,schlüsselwort,argument)

@{b}BESCHREIBUNG@{ub}
     Erstellt aus Schlüsselwort und Argument einen Tooltype-Eintrag in dem
     angegebenen Icon, bereits bestehende Einträge werden überschrieben.
     Format eines Tooltypes: <Schlüsselwort>=<Argument>

@{b}ARGUMENTE@{ub}
     dateiname     - Der Dateiname des Icons, ohne die Endung '.info'!!!
     
     schlüsselwort - Das Schlüsselwort für den Tooltype-Eintrag
     
     argument      - Das Argument für den Tooltype-Eintrag. Wenn hier ein
                     Leerstring angegeben ist, dann wird das Schlüsselwort
                     ohne Argument als Tooltype eingetragen.

@{b}ERGEBNIS@{ub}
     bool          - 1 wenn alles geklappt hat
                     0 wenn ein Fehler aufgetreten ist

@{b}BEISPIEL@{ub}
     /* Neuen Hotkey im Icon des Commodities CrossDOS eintragen */
     
     IF SETTOOLTYPEVALUE('SYS:Wbstartup/CrossDOS','CX_POPKEY','alt f1') THEN
        SAY 'Neuer Hotkey wurde eingetragen!'
     ELSE
        SAY 'Fehler beim Eintragen des Hotkeys!'

@{b}SIEHE AUCH@{ub}

 @{" GETTOOLTYPEVALUE() " Link "GETTOOLTYPEVALUE()"}   Argument eines Tooltypes ermitteln
 @{" GETTOOLTYPES() " Link "GETTOOLTYPES()"}       Tooltypes eines Icons ermitteln
 @{" SETTOOLTYPES() " Link "SETTOOLTYPES()"}       Tooltypes eines Icons neu einstellen


@EndNode

@Node "GETTOOLTYPES()" "rexxtricks.guide/GETTOOLTYPES()"
@Toc "Funktionen der Library"

Die Funktion GETTOOLTYPES()
***************************

@{b}NAME@{ub}
     bool = GETTOOLTYPES(dateiname,stemvar)

@{b}ALIAS@{ub}
     bool = RXTR_GETTOOLTYPES(dateiname,stemvar)

@{b}BESCHREIBUNG@{ub}
     Erstellt eine Liste aller Tooltypes, die in einem Icon eingetragen
     sind.

@{b}ARGUMENTE@{ub}
     dateiname - Der Dateiname des Icons, ohne die Endung '.info'!!!
     
     stemvar   - Stem-Variable, in der die Tooltypes gespeichert werden
                 sollen. Die Tooltypes werden wie folgt gespeichert:
     
                 destvar.0 - enthält die Anzahl der Tooltypes
                 destvar.1 - enthält den ersten Tooltype
                 destvar.2 - enthält den zweiten Tooltype
                 destvar.n - enthält den n-ten Tooltype

@{b}ERGEBNIS@{ub}
     bool      - 1 wenn alles geklappt hat
                 0 wenn ein Fehler aufgetreten ist

@{b}BEISPIEL@{ub}
     /* Tooltypes des Commodities CrossDOS ermitteln */
     
     IF GETTOOLTYPES('SYS:Wbstartup/CrossDOS','tooltypes') THEN DO
        SAY 'Anzahl Tooltypes:' tooltypes.0
        SAY
     
        DO i = 1 TO tooltypes.0
           SAY tooltypes.i
        END
     END
     ELSE
        SAY 'Fehler beim Auslesen der Tooltypes!'

@{b}SIEHE AUCH@{ub}

 @{" SETTOOLTYPES() " Link "SETTOOLTYPES()"}       Tooltypes eines Icons neu einstellen
 @{" GETTOOLTYPEVALUE() " Link "GETTOOLTYPEVALUE()"}   Argument eines Tooltypes ermitteln
 @{" SETTOOLTYPEVALUE() " Link "SETTOOLTYPEVALUE()"}   Argument eines Tooltypes einstellen


@EndNode

@Node "SETTOOLTYPES()" "rexxtricks.guide/SETTOOLTYPES()"
@Toc "Funktionen der Library"

Die Funktion SETTOOLTYPES()
***************************

@{b}NAME@{ub}
     bool = SETTOOLTYPES(dateiname,tooltypes)

@{b}ALIAS@{ub}
     bool = RXTR_SETTOOLTYPES(dateiname,tooltypes)

@{b}BESCHREIBUNG@{ub}
     Stellt die Tooltypes eines Icons neu ein, alle bereits bestehenden
     Tooltypes werden vollständig gelöscht!

@{b}ARGUMENTE@{ub}
     dateiname  - Der Dateiname des Icons, ohne die Endung '.info'!!!
     
     tooltypes  - Stem-Variable, in der die Tooltypes für das neue Icon
                  angegeben sind:
     
                  tooltypes.0 - muß die die Anzahl der Tooltypes enthalten
                  tooltypes.1 - muß den ersten Tooltype enthalten
                  tooltypes.2 - muß den zweiten Tooltype enthalten
                  tooltypes.n - muß den n-ten Tooltype enthalten

@{b}ERGEBNIS@{ub}
     bool      - 1 wenn alles geklappt hat
                 0 wenn ein Fehler aufgetreten ist

@{b}BEISPIEL@{ub}
     /* Tooltypes des Commodities CrossDOS einstellen */
     
     tooltypes.0 = 6
     tooltypes.1 = '«PC0,FILTER,TRANS,INTL.crossdos»'
     tooltypes.2 = '«PC1,FILTER,TRANS,INTL.crossdos»'
     tooltypes.3 = 'DONOTWAIT'
     tooltypes.4 = 'CX_POPUP=NO'
     tooltypes.5 = 'CX_PRIORITY=0'
     tooltypes.6 = 'CX_POPKEY=ctrl alt c'
     
     IF SETTOOLTYPES('SYS:Wbstartup/CrossDOS','tooltypes') THEN
        SAY 'Neue Tooltypes wurden eingestellt'
     ELSE
        SAY 'Fehler beim Einstellen der Tooltypes!'

@{b}SIEHE AUCH@{ub}

 @{" GETTOOLTYPES() " Link "GETTOOLTYPES()"}       Tooltypes eines Icons ermitteln
 @{" GETTOOLTYPEVALUE() " Link "GETTOOLTYPEVALUE()"}   Argument eines Tooltypes ermitteln
 @{" SETTOOLTYPEVALUE() " Link "SETTOOLTYPEVALUE()"}   Argument eines Tooltypes einstellen


@EndNode

@Node "GETDEFAULTTOOL()" "rexxtricks.guide/GETDEFAULTTOOL()"
@Toc "Funktionen der Library"

Die Funktion GETDEFAULTTOOL()
*****************************

@{b}NAME@{ub}
     standardprogramm = GETDEFAULTTOOL(dateiname)

@{b}ALIAS@{ub}
     standardprogramm = RXTR_GETDEFAULTTOOL(dateiname)

@{b}BESCHREIBUNG@{ub}
     Ermittelt das in einem @{b}Projekt-@{ub}, oder @{b}Disk-Icon@{ub} eingetragene
     Standardprogramm. Bei anderen Icon-Typen ist kein Standardprogramm
     möglich.

@{b}ARGUMENTE@{ub}
     dateiname        - Der Dateiname des Icons, ohne die Endung '.info'!!!

@{b}ERGEBNIS@{ub}
     standardprogramm - Das im Icon eingetragene Standardprogramm.  Wenn im
                        angegebenen Icon kein Standardprogramm eingetragen
                        ist, oder ein Fehler auftritt, wird ein Leerstring
                        '' zurückgegeben. Im Fehlerfall wird zusätzlich die
                        Variable @{b}RC@{ub} auf 10 gesetzt.

@{b}BEISPIEL@{ub}
     /* Standardprogramm der Boot-Disk ermitteln */
     
     prg = GETDEFAULTTOOL('SYS:disk')
     
     IF prg ~= '' THEN
        SAY 'Das Standardprogramm ist:' prg
     ELSE DO
        IF RC = 0 THEN
           SAY 'Es ist kein Standardprogramm eingetragen!'
        ELSE
           SAY 'Fehler beim Ermitteln des Standardprogramms!'
     END

@{b}SIEHE AUCH@{ub}

 @{" SETDEFAULTTOOL() " Link "SETDEFAULTTOOL()"}   Standardprogramm eines Icons einstellen


@EndNode

@Node "SETDEFAULTTOOL()" "rexxtricks.guide/SETDEFAULTTOOL()"
@Toc "Funktionen der Library"

Die Funktion SETDEFAULTTOOL()
*****************************

@{b}NAME@{ub}
     bool = SETDEFAULTTOOL(dateiname,standardprogramm)

@{b}ALIAS@{ub}
     bool = RXTR_SETDEFAULTTOOL(dateiname,standardprogramm)

@{b}BESCHREIBUNG@{ub}
     Trägt ein Standardprogramm in einem Icon ein. Ein Standardprogramm
     kann nur in @{b}Projekt-@{ub}, oder @{b}Disk-Icon@{ub} eingetragen werden.

@{b}ARGUMENTE@{ub}
     dateiname        - Der Dateiname des Icons, ohne die Endung '.info'!!!

     standardprogramm - Das Standardprogramm, das eingetragen werden soll.

@{b}ERGEBNIS@{ub}
     bool      - 1 wenn alles geklappt hat
                 0 wenn ein Fehler aufgetreten ist

@{b}BEISPIEL@{ub}
     /* Standardprogramm der Boot-Disk eintragen */
     
     IF SETDEFAULTTOOL('SYS:disk','SYS:System/DiskCopy') THEN
        SAY 'Das Standardprogramm wurde eingetragen!'
     ELSE
        SAY 'Fehler beim Eintragen des Standardprogramms!'

@{b}SIEHE AUCH@{ub}

 @{" GETDEFAULTTOOL() " Link "GETDEFAULTTOOL()"}   Standardprogramm eines Icons ermitteln


@EndNode

@Node "GETSTACK()" "rexxtricks.guide/GETSTACK()"
@Toc "Funktionen der Library"

Die Funktion GETSTACK()
***********************

@{b}NAME@{ub}
     stackgröße = GETSTACK(dateiname)

@{b}ALIAS@{ub}
     stackgröße = RXTR_GETSTACK(dateiname)

@{b}BESCHREIBUNG@{ub}
     Ermittelt die in einem @{b}Programm-@{ub}, oder @{b}Projekt-Icon@{ub} eingetragene
     Stackgröße. Bei anderen Icon-Typen ist keine Stackgröße möglich.

@{b}ARGUMENTE@{ub}
     dateiname  - Der Dateiname des Icons, ohne die Endung '.info'!!!

@{b}ERGEBNIS@{ub}
     stackgröße - Die im Icon eingetragene Stackgröße in Bytes. Wenn im
                  angegebenen Icon keine Stackgröße eingetragen ist, oder
                  ein Fehler auftritt, wird ein Leerstring '' zurückgegeben.
                  Im Fehlerfall wird zusätzlich die Variable @{b}RC@{ub} auf 10
                  gesetzt.

@{b}BEISPIEL@{ub}
     /* Stackgröße des Commodities CrossDOS ermitteln */
     
     stack = GETSTACK('SYS:Wbstartup/CrossDOS')
     
     IF stack ~= '' THEN
        SAY 'Die ermittelte Stackgröße ist' stack 'Bytes!'
     ELSE DO
        IF RC = 0 THEN
           SAY 'Es ist keine Stackgröße eingetragen!'
        ELSE
           SAY 'Fehler beim Ermitteln des Stackgröße!'
     END

@{b}SIEHE AUCH@{ub}

 @{" SETSTACK() " Link "SETSTACK()"}   Stackgröße eines Icons einstellen


@EndNode

@Node "SETSTACK()" "rexxtricks.guide/SETSTACK()"
@Toc "Funktionen der Library"

Die Funktion SETSTACK()
***********************

@{b}NAME@{ub}
     bool = SETSTACK(dateiname,stackgröße)

@{b}ALIAS@{ub}
     bool = RXTR_SETSTACK(dateiname,stackgröße)

@{b}BESCHREIBUNG@{ub}
     Trägt die Stackgröße in einem Icon ein. Die Stackgröße kann nur
     in einem @{b}Programm-@{ub}, oder @{b}Projekt-Icon@{ub} eingetragen werden.

@{b}ARGUMENTE@{ub}
     dateiname  - Der Dateiname des Icons, ohne die Endung '.info'!!!

     stackgröße - Die Stackgröße in Bytes, die eingetragen werden soll.

@{b}ERGEBNIS@{ub}
     bool      - 1 wenn alles geklappt hat
                 0 wenn ein Fehler aufgetreten ist

@{b}BEISPIEL@{ub}
     /* Stackgröße in Icon des Commodities CrossDOS eintragen */
     
     IF SETSTACK('SYS:Wbstartup/CrossDOS',10240) THEN
        SAY 'Die neue Stackgröße wurde eingetragen!'
     ELSE
        SAY 'Fehler beim Eintragen der Stackgröße!'

@{b}SIEHE AUCH@{ub}

 @{" GETSTACK() " Link "GETSTACK()"}   Stackgröße eines Icons ermitteln


@EndNode

@Node "CREATEICON()" "rexxtricks.guide/CREATEICON()"
@Toc "Funktionen der Library"

Die Funktion CREATEICON()
*************************

@{b}NAME@{ub}
     bool = CREATEICON(dateiname,quellicon,tooltypes,standardprogramm,stackgröße)

@{b}ALIAS@{ub}
     bool = RXTR_CREATEICON(dateiname,quellicon,tooltypes,standardprogramm,stackgröße)

@{b}BESCHREIBUNG@{ub}
     Erstellt ein neues Icon für eine Datei

@{b}ARGUMENTE@{ub}
     dateiname  - Der Dateiname des Icons, das erstellt werden soll,
                  ohne die Endung '.info'!!!
     
     quellicon  - Der Dateiname eines Icons, das als Grundlage für
                  das neue Icon verwendet werden soll.
     
     tooltypes  - Stem-Variable, in der die Tooltypes für das neue Icon
                  angegeben sind, wenn diese Variable nicht angegeben ist
                  werden die Tooltypes aus dem Quellicon übernommen. Die
                  Stem-Variable muß folgenden Inhalt haben:
     
                  tooltypes.0 - muß die die Anzahl der Tooltypes enthalten
                  tooltypes.1 - muß den ersten Tooltype enthalten
                  tooltypes.2 - muß den zweiten Tooltype enthalten
                  tooltypes.n - muß den n-ten Tooltype enthalten
     
     standard-  - Das Standardprogramm für das neue Icon, wenn hier nichts
                  angegeben ist wird das Standardprogramm aus dem Quellicon
                  übernommen.
     programm
     
     stackgröße - Die Stackgröße für das neue Icon, wenn hier nichts angegeben
                  ist wird die Stackgröße aus dem Quellicon übernommen.

@{b}ERGEBNIS@{ub}
     bool       - 1 wenn alles geklappt hat
                  0 wenn ein Fehler aufgetreten ist

@{b}BEISPIEL@{ub}
     /* Icon für eine Textdatei erstellen */
     
     tooltypes.0 = 1
     tooltypes.1 = 'FILETYPE=Text'
     
     IF CREATEICON('DH0:Text.txt','ENV:sys/def_Project','tooltypes','C:Ed',8192) THEN
        SAY 'Das neue Icon wurde erstellt!'
     ELSE
        SAY 'Fehler beim Erstellen des Icons!'

@{b}SIEHE AUCH@{ub}

@EndNode

@Node "WBINFO()" "rexxtricks.guide/WBINFO()"
@Toc "Funktionen der Library"

Die Funktion WBINFO()
*********************

@{b}NAME@{ub}
     bool = WBINFO(dateiname,pubscreen)

@{b}ALIAS@{ub}
     bool = RXTR_WBINFO(dateiname,pubscreen)

@{b}BESCHREIBUNG@{ub}
     Öffnet das Icon-Informationsfenster der Workbench auf einem
     beliebigen Publicscreen.

@{b}ARGUMENTE@{ub}
     dateiname - Der Dateiname des Icons, das im Informationsfenster
                 bearbeitet werden soll, ohne die Endung '.info'!!!
     
     pubscreen - Der Name des Publicscreens, auf dem das Fenster
                 geöffnet werden soll. Wenn kein Screenname angegeben
                 ist wird das Fensteer auf dem Default-Publicscreen
                 geöffnet.

@{b}ERGEBNIS@{ub}
     bool      - 1 wenn das Fenster geöffnet wurde
                 0 wenn beim Öffnen des Fensters ein Fehler aufgetreten ist

@{b}BEISPIEL@{ub}
     /* Icon des Commodities CrossDOS auf einem Publicscreen anzeigen */
     
     IF WBINFO('SYS:Wbstartup/CrossDOS','CygnusEdScreen1') THEN
        SAY 'Das Informationsfenster wurde geöffnet!'
     ELSE
        SAY 'Fehler beim Öffnen des Informationsfensters!'

@{b}SIEHE AUCH@{ub}

@EndNode

@Node "WHATIS()" "rexxtricks.guide/WHATIS()"
@Toc "Funktionen der Library"

Die Funktion WHATIS()
*********************

@{b}NAME@{ub}
     typ = WHATIS(dateiname)

@{b}ALIAS@{ub}
     typ = RXTR_WHATIS(dateiname)

@{b}BESCHREIBUNG@{ub}
     Ermittelt mit Hilfe der 'whatis.library' den Typ einer Datei.

@{b}ARGUMENTE@{ub}
     dateiname - Die Datei, deren Typ ermittelt werden soll

@{b}ERGEBNIS@{ub}
     typ       - Der ermittelte Dateityp. Eine Liste aller möglichen
                 Dateitypen bekommt man mit der Funktion WHATISTYPES()

@{b}BEISPIEL@{ub}
     /* Typ der Datei 'S:User-Startup' ermitteln */
     
     typ = WHATIS('S:User-Startup')
     SAY 'S:User-Startup ist vom Typ:' typ

@{b}SIEHE AUCH@{ub}

 @{" WHATISTYPES() " Link "WHATISTYPES()"}   Alle Dateitypen der 'whatis.library' ermitteln


@EndNode

@Node "WHATISTYPES()" "rexxtricks.guide/WHATISTYPES()"
@Toc "Funktionen der Library"

Die Funktion WHATISTYPES()
**************************

@{b}NAME@{ub}
     bool = WHATISTYPES(destvar)

@{b}ALIAS@{ub}
     bool = RXTR_WHATISTYPES(destvar)

@{b}BESCHREIBUNG@{ub}
     Ermittelt alle der 'whatis.library' bekannten Dateitypen und speichert
     die Kennungen der gefundenen Typen in einer Stem-Variablen ab.

@{b}ARGUMENTE@{ub}
     destvar - Stem-Variable, in der die Dateitypen gespeichert werden
               sollen. Die Dateitypen werden wie folgt gespeichert:
     
               destvar.0 - enthält die Anzahl der Dateitypen
               destvar.1 - enthält die Kennung des ersten Typs
               destvar.2 - enthält die Kennung des zweiten Typs
               destvar.n - enthält die Kennung des n-ten Typs

@{b}ERGEBNIS@{ub}
     bool    - 1 wenn alles geklappt hat
               0 wenn ein Fehler aufgetreten ist

@{b}BEISPIEL@{ub}
     /* Alle Dateitypen der 'whatis.library' anzeigen */
     
     IF WHATISTYPES('destvar') THEN DO
        SAY 'Anzahl bekannter Dateitypen:' destvar.0
        DO i = 1 TO destvar.0
           SAY destvar.i
        END
     END

@{b}SIEHE AUCH@{ub}

 @{" WHATIS() " Link "WHATIS()"}   Dateityp mit Hilfe der 'whatis.library' ermitteln


@EndNode

@Node "FILEID_IDENTIFY()" "rexxtricks.guide/FILEID_IDENTIFY()"
@Toc "Funktionen der Library"

Die Funktion FILEID_IDENTIFY()
******************************

@{b}NAME@{ub}
     typ = FILEID_IDENTIFY(dateiname,modus)

@{b}ALIAS@{ub}
     typ = RXTR_FILEID_IDENTIFY(dateiname,modus)

@{b}BESCHREIBUNG@{ub}
     Ermittelt mit Hilfe der 'FileID.library' den Typ einer Datei. Durch
     Angabe des Arguments 'modus' kann gewählt werden ob eine kurze
     Beschreibung oder eine ID-Nummer zurückgegeben werden soll.

@{b}ARGUMENTE@{ub}
     dateiname - Die Datei, deren Typ ermittelt werden soll
     
     modus     - Hier kann die Art des Rückgabewertes angegeben werden.
     
                 Mögliche Angaben sind:
     
                 'DESCRIPTION' oder 'D' - Der Rückgabewert ist eine kurze
                                          Beschreibung des Dateityps als
                                          Text.
     
                 'ID' oder 'I'          - Der Rückgabewert ist die 'FileID'
                                          interne ID-Nummer.
     
                                          Siehe auch @{"FILEID_GETHIGHID()" Link "FILEID_GETHIGHID()"}.
                                          Siehe auch @{"FILEID_GETIDSTRING()" Link "FILEID_GETIDSTRING()"}.
     
                 'DESCRIPTION' ist Standard, wenn 'modus' nicht angegeben
                 ist wird eine kurze Beschreibung zurückgegeben.

@{b}ERGEBNIS@{ub}
     typ       - Der ermittelte Dateityp, wie unter 'modus' angegeben.

@{b}BEISPIEL@{ub}
     /* Typ der Datei 'LIBS:rexxtricks.library' ermitteln */
     
     typ = FILEID_IDENTIFY('LIBS:rexxtricks.library','ID')
     SAY 'LIBS:rexxtricks.library ist ID:' typ
     
     typ = FILEID_IDENTIFY('LIBS:rexxtricks.library')
     SAY 'LIBS:rexxtricks.library ist:' typ

@{b}SIEHE AUCH@{ub}

 @{" FILEID_GETHIGHID() " Link "FILEID_GETHIGHID()"}     Größte ID-Nummer der 'FileID.library' ermitteln
 @{" FILEID_GETIDSTRING() " Link "FILEID_GETIDSTRING()"}   Zu einer ID-Nummer gehörende Beschreibung ermitteln
 @{" FILEID_GETTYPES() " Link "FILEID_GETTYPES()"}      Alle Dateitypen der 'FileID.library' ermitteln


@EndNode

@Node "FILEID_GETHIGHID()" "rexxtricks.guide/FILEID_GETHIGHID()"
@Toc "Funktionen der Library"

Die Funktion FILEID_GETHIGHID()
*******************************

@{b}NAME@{ub}
     id = FILEID_GETHIGHID()

@{b}ALIAS@{ub}
     id = RXTR_FILEID_GETHIGHID()

@{b}BESCHREIBUNG@{ub}
     Ermittelt die größte ID-Nummer der 'FileID.library', dies ist
     gleichzeitig die Anzahl der bekannten Dateitypen.

@{b}ARGUMENTE@{ub}
     -/-

@{b}ERGEBNIS@{ub}
     id - Die größte ID-Nummer, Anzahl der bekannten Dateitypen

@{b}BEISPIEL@{ub}
     /* Anzahl der Dateitypen der 'FileID.library' anzeigen */
     
     SAY 'Anzahl bekannter Dateitypen:' FILEID_GETHIGHID()

@{b}SIEHE AUCH@{ub}

 @{" FILEID_IDENTIFY() " Link "FILEID_IDENTIFY()"}      Dateityp mit Hilfe der 'FileID.library' ermitteln
 @{" FILEID_GETIDSTRING() " Link "FILEID_GETIDSTRING()"}   Zu einer ID-Nummer gehörende Beschreibung ermitteln
 @{" FILEID_GETTYPES() " Link "FILEID_GETTYPES()"}      Alle Dateitypen der 'FileID.library' ermitteln


@EndNode

@Node "FILEID_GETIDSTRING()" "rexxtricks.guide/FILEID_GETIDSTRING()"
@Toc "Funktionen der Library"

Die Funktion FILEID_GETIDSTRING()
*********************************

@{b}NAME@{ub}
     string = FILEID_GETIDSTRING(id)

@{b}ALIAS@{ub}
     string = RXTR_FILEID_GETIDSTRING(id)

@{b}BESCHREIBUNG@{ub}
     Ermittelt die zu einer ID-Nummer gehörende kurze Beschreibung des
     Dateityps.

@{b}ARGUMENTE@{ub}
     id     - ID-Nummer, zu der die Beschreibung ermittelt werden soll.

@{b}ERGEBNIS@{ub}
     string - Kurze Beschreibung des Dateityps mit der angegebenen ID.

@{b}BEISPIEL@{ub}
     /* Beschreibung zur ID 25 anzeigen */
     
     SAY 'ID Nummer 25 ist:' FILEID_GETIDSTRING(25)

@{b}SIEHE AUCH@{ub}

 @{" FILEID_IDENTIFY() " Link "FILEID_IDENTIFY()"}      Dateityp mit Hilfe der 'FileID.library' ermitteln
 @{" FILEID_GETHIGHID() " Link "FILEID_GETHIGHID()"}     Größte ID-Nummer der 'FileID.library' ermitteln
 @{" FILEID_GETTYPES() " Link "FILEID_GETTYPES()"}      Alle Dateitypen der 'FileID.library' ermitteln


@EndNode

@Node "FILEID_GETTYPES()" "rexxtricks.guide/FILEID_GETTYPES()"
@Toc "Funktionen der Library"

Die Funktion FILEID_GETTYPES()
******************************

@{b}NAME@{ub}
     bool = FILEID_GETTYPES(destvar)

@{b}ALIAS@{ub}
     bool = RXTR_FILEID_GETTYPES(destvar)

@{b}BESCHREIBUNG@{ub}
     Ermittelt alle der 'FileID.library' bekannten Dateitypen und speichert
     die Beschreibungen der gefundenen Typen in einer Stem-Variablen ab.

@{b}ARGUMENTE@{ub}
     destvar - Stem-Variable, in der die Dateitypen gespeichert werden
               sollen. Die Dateitypen werden wie folgt gespeichert:
     
               destvar.0 - enthält die Anzahl der Dateitypen
               destvar.1 - enthält die Kennung des Typs mit ID 1
               destvar.2 - enthält die Kennung des Typs mit ID 2
               destvar.n - enthält die Kennung des Typs mit ID n
     
               Der Dateityp mit der ID 0 kann nicht in der Stem-Variablen
               gespeichert werden, da das Feld 'stemvar.0' die Anzahl der
               Dateitypen enthält.
     
               Dateityp mit ID 0 ist: 'unbekannte Datei'

@{b}ERGEBNIS@{ub}
     bool    - 1 wenn alles geklappt hat, 0 wenn ein Fehler aufgetreten ist

@{b}BEISPIEL@{ub}
     /* Alle Dateitypen der 'FileID.library' anzeigen */
     
     IF FILEID_GETTYPES('destvar') THEN DO
        SAY 'Anzahl bekannter Dateitypen:' destvar.0
        DO i = 1 TO destvar.0
           SAY RIGHT(i,4) destvar.i
        END
     END

@{b}SIEHE AUCH@{ub}

 @{" FILEID_IDENTIFY() " Link "FILEID_IDENTIFY()"}      Dateityp mit Hilfe der 'FileID.library' ermitteln
 @{" FILEID_GETHIGHID() " Link "FILEID_GETHIGHID()"}     Größte ID-Nummer der 'FileID.library' ermitteln
 @{" FILEID_GETIDSTRING() " Link "FILEID_GETIDSTRING()"}   Zu einer ID-Nummer gehörende Beschreibung ermitteln


@EndNode

@Node "CRC32()" "rexxtricks.guide/CRC32()"
@Toc "Funktionen der Library"

Die Funktion CRC32()
********************

@{b}NAME@{ub}
     crc = CRC32(dateiname,verbose)

@{b}ALIAS@{ub}
     crc = RXTR_CRC32(dateiname,verbose)

@{b}BESCHREIBUNG@{ub}
     Berechnet die 32-Bit CRC Prüfsumme einer Datei.

@{b}ARGUMENTE@{ub}
     dateiname - Die Datei, deren Prüfsumme berechnet werden soll
     
     verbose   - Mit diesem Argument kann die Art des Ergebnisses
                 beeinflußt werden.
     
                 Mögliche Angaben sind 'VERBOSE' oder 'V', dann wird
                 ein aus vier Worten bestehender Text zurückgegeben:
     
                    1. Wort - Prüfsumme hexadezimal
                    2. Wort - Prüfsumme dezimal
                    3. Wort - Komplement der Prüfsumme hexadezimal
                    4. Wort - Komplement der Prüfsumme dezimal
     
                 Wenn dieses Argument nicht angegeben ist wird
                 nur das Komplement der Prüfsumme in hexadezimaler
                 Schreibweise zurückgegeben.

@{b}ERGEBNIS@{ub}
     crc       - Die Checksumme der Datei, abhängig vom Argument 'verbose'.

@{b}BEISPIEL@{ub}
     /* Prüfsumme der Datei 'S:User-Startup' berechnen */
     
     crc = CRC32('S:User-Startup')
     SAY 'Prüfsumme =' crc

@{b}SIEHE AUCH@{ub}

@EndNode

@Node "COUNTCHARS()" "rexxtricks.guide/COUNTCHARS()"
@Toc "Funktionen der Library"

Die Funktion COUNTCHARS()
*************************

@{b}NAME@{ub}
     anzahl = COUNTCHARS(text,zeichen)

@{b}ALIAS@{ub}
     anzahl = RXTR_COUNTCHARS(text,zeichen)

@{b}BESCHREIBUNG@{ub}
     Zählt wie oft die in 'zeichen' angegebenen Zeichen insgesamt in
     'text' vorkommen, dabei wird zwischen Groß- und Kleinbuchstaben
     unterschieden.

@{b}ARGUMENTE@{ub}
     text    - Der Text, in dem die Zeichen gezählt werden sollen
     
     zeichen - Die Zeichen, die gezählt werden sollen. Dies können auch
               mehrere sein, dann wird die Gesamtanzahl gezählt.

@{b}ERGEBNIS@{ub}
     anzahl  - Die Anzahl der Zeichen, die gefunden wurden
     
               COUNTCHARS('aa,bb,cc,dd,ee','c,') ergibt 6
               COUNTCHARS('aa,bb,cc,dd,ee',',')  ergibt 4
               COUNTCHARS('aa,bb,cc,dd,ee','c')  ergibt 2

@{b}BEISPIEL@{ub}
     /* Zeichen in einem Text zählen */
     
     anzahl = COUNTCHARS('Halli, hallo!','hH')
     SAY 'Die Zeichen h und H kommen in dem Text insgesamt' anzahl 'mal vor.'

@{b}SIEHE AUCH@{ub}

@EndNode

@Node "RAND()" "rexxtricks.guide/RAND()"
@Toc "Funktionen der Library"

Die Funktion RAND()
*******************

@{b}NAME@{ub}
     integer = RAND(min,max)

@{b}ALIAS@{ub}
     integer = RXTR_RAND(min,max)

@{b}BESCHREIBUNG@{ub}
     Gibt eine Zufallszahl zurück.

@{b}ARGUMENTE@{ub}
     min  - Die kleinste erlaubte Zahl
     
     max  - Die größte erlaubte Zahl

@{b}ERGEBNIS@{ub}
     integer - Zufallszahl im angegebenen Bereich

@{b}BEISPIEL@{ub}
     /* Zufallszahlen zwischen 1 und 100 ermitteln */
     
     DO i = 1 TO 20
        SAY RAND(1,100)
     END

@{b}SIEHE AUCH@{ub}

@EndNode

@Node "REXXTRICKSVERSION()" "rexxtricks.guide/REXXTRICKSVERSION()"
@Toc "Funktionen der Library"

Die Funktion REXXTRICKSVERSION()
********************************

@{b}NAME@{ub}
     version = REXXTRICKSVERSION()

@{b}ALIAS@{ub}
     version = RXTR_REXXTRICKSVERSION()

@{b}BESCHREIBUNG@{ub}
     Gibt die Version der 'rexxtricks.library' zurück.

@{b}ARGUMENTE@{ub}
     -/-

@{b}ERGEBNIS@{ub}
     Version - Die Version der 'rexxtricks.library' im Format
     VERSION.REVISION

@{b}BEISPIEL@{ub}
     /* Version der 'rexxtricks.library' ermitteln */
     
     version = REXXTRICKSVERSION()
     SAY 'Sie verwenden die Version' version 'der rexxtricks.library.'

@{b}SIEHE AUCH@{ub}

@EndNode

@Node "UUDECODE()" "rexxtricks.guide/UUDECODE()"
@Toc "Funktionen der Library"

Die Funktion UUDECODE()
***********************

@{b}NAME@{ub}
     bool = UUDECODE(quelldatei,zielverzeichnis,zieldatei)

@{b}ALIAS@{ub}
     bool = RXTR_UUDECODE(quelldatei,zielverzeichnis,zieldatei)

@{b}BESCHREIBUNG@{ub}
     Dekodiert eine uuencodete Datei und speichert die erzeugten
     Binärdateien im Zielverzeichnis ab.

@{b}ARGUMENTE@{ub}
     quelldatei      - Name der Datei, die eine oder mehrere Binärdateien in
                       uuencodeter Form enthält, es werden alle enthaltenen
                       Dateien dekodiert.
     
                       Außerdem ist es möglich Dateien zu dekodieren, die aus
                       mehreren uuencodeten Teilen bestehen. Die uuencodeten
                       Teile müssen sich im gleichen Verzeichnis befinden und
                       folgenden Aufbau haben (z.B. bei 3 Teilen):
     
                       1. Datei - Name:   Test.uaa
     
                                  Inhalt: begin 644 Test.lha
                                          ...
                                          include test.uab
     
                       2. Datei - Name:   Test.uab
     
                                  Inhalt: begin part b Test.uab
                                          ...
                                          include test.uac
     
                       3. Datei - Name:   Test.uac
     
                                  Inhalt: begin part c Test.uac
                                          ...
                                          end
     
                       Um solche Dateien zu dekodieren muß nur der Name der
                       ersten Teildatei angegeben werden, alles weitere wird
                       über die 'include' Zeilen gesteuert. Alle Teildateien
                       müssen den richtigen Namen haben!
     
     zielverzeichnis - In dem hier angegebenen Verzeichnis werden die
                       dekodierten Binärdateien gespeichert.
     
     zieldatei       - Dieses Argument ist optional und nur für besondere
                       Fälle gedacht. Wenn hier ein Dateiname angegeben ist
                       wird dieser für die dekodierte Binärdatei verwendet,
                       der in der 'begin' Zeile der Quelldatei angegebene
                       Dateiname wird dann ignoriert.

@{b}ERGEBNIS@{ub}
     bool            - 1 wenn alles geklappt hat, 0 im Fehlerfall
     
                       Wenn UUDECODE() fehlschlägt werden in folgenden
                       Variablen Informationen über den Fehler gespeichert:
     
                       @{b}uuerror_number@{ub}
     
                          Diese Variable enthält eine Fehlernummer:
                          ----------------------------------------------
                          1 - Datei konnte nicht geöffnet werden
                          2 - Falsche oder nicht vorhandene Include-Datei
                          3 - Keine 'begin' Zeile gefunden
                          4 - In einer Zeile stimmt die Checksumme nicht
                          5 - Fehler beim Lesen aus einer Datei
                          6 - Fehler beim Schreiben in eine Datei
                          7 - Falsche Länge der dekodierten Binärdatei
                          8 - Vorzeitiges Ende der Quelldatei
     
                       @{b}uuerror_text@{ub}
     
                          Diese Variable enthält eine Fehlermeldung.
     
                       @{b}uuerror_file@{ub}
     
                          Diese Variable enthält den Namen der Datei, in
                          der der Fehler aufgetreten ist
     
                       @{b}uuerror_line@{ub}
     
                          Diese Variable enthält bei Fehler 4 die Nummer
                          der Zeile, in der die Checksumme nicht stimmt.
                          Bei allen anderen Fehlern wird die Variable auf
                          0 gesetzt.
     
                       @{b}uuerror_size@{ub}
     
                          Diese Variable enthält bei Fehler 7 die erwartete
                          Länge der dekodierten Binärdatei. Bei allen
                          anderen Fehlern wird die Variable auf 0 gesetzt.

@{b}BEISPIEL@{ub}
     /* Datei 'DH0:Test.uaa' nach 'RAM:' dekodieren */
     
     IF UUDECODE('DH0:Test.uaa','RAM:') THEN
        SAY 'Datei dekodiert, keine Fehler!'
     ELSE
        SAY 'Fehler beim Dekodieren:' uuerror_text

@{b}SIEHE AUCH@{ub}

 @{" UUENCODE() " Link "UUENCODE()"}   Binärdatei uuencoden


@EndNode

@Node "UUENCODE()" "rexxtricks.guide/UUENCODE()"
@Toc "Funktionen der Library"

Die Funktion UUENCODE()
***********************

@{b}NAME@{ub}
     bool = UUENCODE(datei,uudatei,limit,suffix)

@{b}ALIAS@{ub}
     bool = RXTR_UUENCODE(datei,uudatei,limit,suffix)

@{b}BESCHREIBUNG@{ub}
     Wandelt eine Binärdatei in einen uuencodeten ASCII Text, so daß die
     Datei über Netze verschickt werden kann, die kein Verschicken von
     Binärdateien erlauben.

@{b}ARGUMENTE@{ub}
     datei   - Name der Binärdatei, die uuencodet werden soll.
     
     uudatei - Name der Ausgabedatei, an den hier angegebenen Namen werden
               die Endungen '.uaa', '.uab', '.uac' usw. angehängt, je nach
               Anzahl der erzeugten Ausgabedateien. Eine bereits vorhandene
               Endung, z.B. '.lha', wird vorher entfernt.
     
               Das Format der Ausgabedateien entspricht dem bei 'UUDECODE()'
               beschriebenen. Siehe auch @{"UUDECODE()" Link "UUDECODE()"}.
     
     limit   - Die maximale Größe der kodierten Dateien in KB, erlaubt sind
               16, 32, 64, 128, 256 oder 512. 'limit' ist optional, wenn
               nichts angegeben ist wird nur eine kodierte Datei erzeugt.
     
     suffix  - Mit diesem Schalter kann angegeben werden, daß bereits
               existierende Dateiendungen nicht überschrieben werden
               sollen. Mögliche Angaben sind 'SUFFIX' oder 'S'.
     
               Wenn dieses Argument nicht angegeben ist werden bereits
               existierende Endungen überschrieben.

@{b}ERGEBNIS@{ub}
     bool    - 1 wenn alles geklappt hat, 0 im Fehlerfall

@{b}BEISPIEL@{ub}
     /* Datei 'DH0:Test.lha' nach 'RAM:Test.uXX' uuencoden, */
     /* die Ausgabedateien dürfen maximal 64KB groß sein  */
     
     IF UUENCODE('DH0:Test.lha','RAM:Test',64) THEN
        SAY 'Datei wurde kodiert, keine Fehler!'
     ELSE
        SAY 'Fehler beim Kodieren!'

@{b}SIEHE AUCH@{ub}

 @{" UUDECODE() " Link "UUDECODE()"}   uuencodete Datei dekodieren


@EndNode

@Node "Das VIEWLIST() Fenster" "rexxtricks.guide/Das VIEWLIST() Fenster"
@Next "Index"
@Prev "Funktionen der Library"
@Toc "Main"

Bedienung des Auswahlfensters
*****************************

@{b}Darstellung von Einträgen im Fenster:@{ub}
     Normaler Eintrag   - wird in der Screen-Textfarbe ohne Hintergrund
                          dargestellt
     
     Markierter Eintrag - wird in den gleichen Farben wie der Text im
                          Fensterrahmen dargestellt
     
     Aktueller Eintrag  - wird durch einen Rahmen dargestellt

@{b}Gadgets:@{ub}
     Scroller      - bestimmt den Ausschnitt der Liste, der angezeigt
                     werden soll
     
     Alle          - markiert alle Einträge
     
     Nach Muster   - markiert alle Einträge, die mit dem im Eingabefeld
                     angegebenen Namensmuster übereinstimmen, wenn kein
                     Namensmuster angegeben ist wird das Eingabefeld
                     aktiviert
     
     Umschalten    - schaltet den Zustand aller Einträge um, markierte
                     Einträge werden demarkiert und umgekehrt
     
     Keine         - hebt alle bisherigen Markierungen wieder auf
     
     Suchen        - sucht ab dem aktuellen Eintrag nach dem im
                     Eingabefeld eingegebenen Muster, wenn kein
                     Namensmuster angegeben ist wird das Eingabefeld
                     aktiviert
     
     Eingabefeld   - der Text nach dem gesucht werden soll, die AmigaDOS-
                     Namensmuster werden vollständig unterstützt
     
     Benutzen      - schließt das Fenster und Übergibt die Inhalte aller
                     markierten Eintäge an das aufrufende ARexx-Script
     
     Abbrechen     - schließt das Fenster ohne Übergabe von Ergebnissen
     
     Schließsymbol - schließt das Fenster ohne Übergabe von Ergebnissen

@{b}Maustasten:@{ub}
     Linke Maustaste       - markiert einen Eintrag und demarkiert
                             gleichzeitig alle anderen
     
     Shift-Linke Maustaste - markiert einen Eintrag, ist der angeklickte
                             Eintrag bereits markiert wird er demarkiert
     
     Doppelklick           - schließt das Fenster und Übergibt die Inhalte
                             aller markierten Eintäge an das aufrufende
                             ARexx-Script. Als ausgewähltes Gadget wird
                             1, also das ganz linke Gadget, zurückgegeben.

@{b}Tastatur:@{ub}
     Cursortasten        - bewegen den aktuellen Eintrag um einen Eintrag nach
                           oben oder unten, bei Bedarf wird die Liste gescrollt
     
     Shift-Cursortasten  - bewegen den aktuellen Eintrag um eine Seite nach
                           oben oder unten, bei Bedarf wird die Liste gescrollt
     
     Ctrl-Cursortasten   - bewegen den aktuellen Eintrag an den Anfang oder das
                           Ende der Liste, bei Bedarf wird die Liste gescrollt
     
     Return, Enter       - markiert den aktuellen Eintrag, Mehrfachmarkierung
                           ist möglich
     
     Leertaste           - markiert den aktuellen Eintrag, Mehrfachmarkierung
                           ist möglich
     
     <Alle-Taste>        - markiert alle Einträge
     
     <Nach Muster-Taste> - markiert alle Einträge, die mit dem im Eingabefeld
                           angegebenen Namensmuster übereinstimmen
     
     <Umschalten-Taste>  - schaltet den Zustand aller Einträge um, markierte
                           Einträge werden demarkiert und umgekehrt
     
     <Keine-Taste>       - hebt alle bisherigen Markierungen wieder auf
     
     <Suchen-Taste>      - sucht ab dem aktuellen Eintrag nach dem im
                           Eingabefeld eingegebenen Muster
     
     Tab                 - Aktiviert das Eingabefeld
     
     <Benutzen-Taste>    - schließt das Fenster und Übergibt die Inhalte aller
                           markierten Eintäge an das aufrufende ARexx-Script
     
     <Abbrechen-Taste>   - schließt das Fenster ohne Übergabe von Ergebnissen
     
     Esc                 - schließt das Fenster ohne Übergabe von Ergebnissen


@EndNode

@Node "Index" "rexxtricks.guide/Index"
@Prev "Das VIEWLIST() Fenster"
@Toc "Main"

Index und Stichwortverzeichnis
******************************

@Index "Index"



 @{" 32-Bit CRC Prüfsumme einer Datei berechnen " Link "CRC32()"} CRC32()
 @{" Adresse des Autors " Link "Adresse des Autors"}                   Adresse des Autors
 @{" Alle Dateitypen der 'FileID.library' ermitteln " Link "FILEID_GETTYPES()"} FILEID_GETTYPES()
 @{" Alle Dateitypen der 'whatis.library' ermitteln " Link "WHATISTYPES()"} WHATISTYPES()
 @{" Anzahl bestimmter Zeichen zählen " Link "COUNTCHARS()"}    COUNTCHARS()
 @{" Argument eines Tooltypes einstellen " Link "SETTOOLTYPEVALUE()"}  SETTOOLTYPEVALUE()
 @{" Argument eines Tooltypes ermitteln " Link "GETTOOLTYPEVALUE()"}   GETTOOLTYPEVALUE()
 @{" Auf einen Tastendruck warten " Link "GETKEY()"}         GETKEY()
 @{" Auswahlfenster " Link "Das VIEWLIST() Fenster"}                       Das VIEWLIST() Fenster
 @{" Autor " Link "Adresse des Autors"}                                Adresse des Autors
 @{" Bedienung des Auswahlfensters " Link "Das VIEWLIST() Fenster"}        Das VIEWLIST() Fenster
 @{" BEEP() " Link "BEEP()"}                               BEEP()
 @{" Bildschirm blitzen " Link "BEEP()"}                   BEEP()
 @{" Binärdatei uuencoden " Link "UUENCODE()"}                UUENCODE()
 @{" BSEARCH() " Link "BSEARCH()"}                            BSEARCH()
 @{" Copyright " Link "Copyright"}                            Copyright
 @{" COUNTCHARS() " Link "COUNTCHARS()"}                         COUNTCHARS()
 @{" CRC32() " Link "CRC32()"}                              CRC32()
 @{" CRC32() " Link "CRC32()"}                              CRC32()
 @{" CREATEICON() " Link "CREATEICON()"}                         CREATEICON()
 @{" Danksagungen " Link "Danksagungen"}                         Danksagungen
 @{" Das VIEWLIST() Fenster " Link "Das VIEWLIST() Fenster"}               Das VIEWLIST() Fenster
 @{" Datei nach Namensmuster durchsuchen " Link "SEARCHPATTERN()"}  SEARCHPATTERN()
 @{" Dateikommentar auslesen " Link "GETCOMMENT()"}              GETCOMMENT()
 @{" Dateikommentar einstellen " Link "SETCOMMENT()"}            SETCOMMENT()
 @{" Dateiname eines Pfades ermitteln " Link "FILEPART()"}     FILEPART()
 @{" Dateinamen mit neuer Endung versehen " Link "MAKESUFFIX()"} MAKESUFFIX()
 @{" Dateityp mit Hilfe der 'FileID.library' ermitteln " Link "FILEID_IDENTIFY()"} FILEID_IDENTIFY()
 @{" Dateityp mit Hilfe der 'whatis.library' ermitteln " Link "WHATIS()"} WHATIS()
 @{" Default-Publicscreen ermitteln " Link "GETDEFAULTPUBSCREEN()"}       GETDEFAULTPUBSCREEN()
 @{" Ein neues Icon erstellen " Link "CREATEICON()"}             CREATEICON()
 @{" Elemente einer Stem-Variablen entfernen " Link "STEMREMOVE()"} STEMREMOVE()
 @{" Elemente in eine Stem-Variable einfügen " Link "STEMINSERT()"} STEMINSERT()
 @{" Endung eines Dateinamens ermitteln " Link "SUFFIXPART()"}   SUFFIXPART()
 @{" Entstehungsgeschichte " Link "History"}                History
 @{" Environment-Variable auslesen " Link "GETENV()"}        GETENV()
 @{" Environment-Variable einstellen " Link "SETENV()"}      SETENV()
 @{" Environment-Variable löschen " Link "UNSETENV()"}        UNSETENV()
 @{" Feststellen, ob ein SCSI-Gerät betriebsbereit ist " Link "SCSI_TESTREADY()"} SCSI_TESTREADY()
 @{" FILEID_GETHIGHID() " Link "FILEID_GETHIGHID()"}                   FILEID_GETHIGHID()
 @{" FILEID_GETIDSTRING() " Link "FILEID_GETIDSTRING()"}                 FILEID_GETIDSTRING()
 @{" FILEID_GETTYPES() " Link "FILEID_GETTYPES()"}                    FILEID_GETTYPES()
 @{" FILEID_IDENTIFY() " Link "FILEID_IDENTIFY()"}                    FILEID_IDENTIFY()
 @{" FILEPART() " Link "FILEPART()"}                           FILEPART()
 @{" Funktion BEEP() " Link "BEEP()"}                      BEEP()
 @{" Funktion BSEARCH() " Link "BSEARCH()"}                   BSEARCH()
 @{" Funktion COUNTCHARS() " Link "COUNTCHARS()"}                COUNTCHARS()
 @{" Funktion CRC32() " Link "CRC32()"}                     CRC32()
 @{" Funktion CREATEICON() " Link "CREATEICON()"}                CREATEICON()
 @{" Funktion FILEID_GETHIGHID() " Link "FILEID_GETHIGHID()"}          FILEID_GETHIGHID()
 @{" Funktion FILEID_GETIDSTRING() " Link "FILEID_GETIDSTRING()"}        FILEID_GETIDSTRING()
 @{" Funktion FILEID_GETTYPES() " Link "FILEID_GETTYPES()"}           FILEID_GETTYPES()
 @{" Funktion FILEID_IDENTIFY() " Link "FILEID_IDENTIFY()"}           FILEID_IDENTIFY()
 @{" Funktion FILEPART() " Link "FILEPART()"}                  FILEPART()
 @{" Funktion GETCOMMENT() " Link "GETCOMMENT()"}                GETCOMMENT()
 @{" Funktion GETDEFAULTPUBSCREEN() " Link "GETDEFAULTPUBSCREEN()"}       GETDEFAULTPUBSCREEN()
 @{" Funktion GETDEFAULTTOOL() " Link "GETDEFAULTTOOL()"}            GETDEFAULTTOOL()
 @{" Funktion GETDIR() " Link "GETDIR()"}                    GETDIR()
 @{" Funktion GETENV() " Link "GETENV()"}                    GETENV()
 @{" Funktion GETKEY() " Link "GETKEY()"}                    GETKEY()
 @{" Funktion GETPROTECTION() " Link "GETPROTECTION()"}             GETPROTECTION()
 @{" Funktion GETPUBSCREENMODES() " Link "GETPUBSCREENMODES()"}         GETPUBSCREENMODES()
 @{" Funktion GETSTACK() " Link "GETSTACK()"}                  GETSTACK()
 @{" Funktion GETTOOLTYPES() " Link "GETTOOLTYPES()"}              GETTOOLTYPES()
 @{" Funktion GETTOOLTYPEVALUE() " Link "GETTOOLTYPEVALUE()"}          GETTOOLTYPEVALUE()
 @{" Funktion LSEARCH() " Link "LSEARCH()"}                   LSEARCH()
 @{" Funktion MAKEPATH() " Link "MAKEPATH()"}                  MAKEPATH()
 @{" Funktion MAKESUFFIX() " Link "MAKESUFFIX()"}                MAKESUFFIX()
 @{" Funktion MATCHPATTERN() " Link "MATCHPATTERN()"}              MATCHPATTERN()
 @{" Funktion PATHPART() " Link "PATHPART()"}                  PATHPART()
 @{" Funktion PUBSCREENLIST() " Link "PUBSCREENLIST()"}             PUBSCREENLIST()
 @{" Funktion PUBSCREENTOBACK() " Link "PUBSCREENTOBACK()"}           PUBSCREENTOBACK()
 @{" Funktion PUBSCREENTOFRONT() " Link "PUBSCREENTOFRONT()"}          PUBSCREENTOFRONT()
 @{" Funktion QSORT() " Link "QSORT()"}                     QSORT()
 @{" Funktion RAND() " Link "RAND()"}                      RAND()
 @{" Funktion READCLIPBOARD() " Link "READCLIPBOARD()"}             READCLIPBOARD()
 @{" Funktion READFILE() " Link "READFILE()"}                  READFILE()
 @{" Funktion READLINES() " Link "READLINES()"}                 READLINES()
 @{" Funktion REXXTRICKSVERSION() " Link "REXXTRICKSVERSION()"}         REXXTRICKSVERSION()
 @{" Funktion SCSI_DEVICETYPE() " Link "SCSI_DEVICETYPE()"}           SCSI_DEVICETYPE()
 @{" Funktion SCSI_MANUFACTURER() " Link "SCSI_MANUFACTURER()"}         SCSI_MANUFACTURER()
 @{" Funktion SCSI_PRODUCT() " Link "SCSI_PRODUCT()"}              SCSI_PRODUCT()
 @{" Funktion SCSI_REVISION() " Link "SCSI_REVISION()"}             SCSI_REVISION()
 @{" Funktion SCSI_TESTREADY() " Link "SCSI_TESTREADY()"}            SCSI_TESTREADY()
 @{" Funktion SEARCHPATTERN() " Link "SEARCHPATTERN()"}             SEARCHPATTERN()
 @{" Funktion SETCOMMENT() " Link "SETCOMMENT()"}                SETCOMMENT()
 @{" Funktion SETDEFAULTPUBSCREEN() " Link "SETDEFAULTPUBSCREEN()"}       SETDEFAULTPUBSCREEN()
 @{" Funktion SETDEFAULTTOOL() " Link "SETDEFAULTTOOL()"}            SETDEFAULTTOOL()
 @{" Funktion SETENV() " Link "SETENV()"}                    SETENV()
 @{" Funktion SETPROTECTION() " Link "SETPROTECTION()"}             SETPROTECTION()
 @{" Funktion SETPUBSCREENMODES() " Link "SETPUBSCREENMODES()"}         SETPUBSCREENMODES()
 @{" Funktion SETSTACK() " Link "SETSTACK()"}                  SETSTACK()
 @{" Funktion SETTOOLTYPES() " Link "SETTOOLTYPES()"}              SETTOOLTYPES()
 @{" Funktion SETTOOLTYPEVALUE() " Link "SETTOOLTYPEVALUE()"}          SETTOOLTYPEVALUE()
 @{" Funktion STEMCOPY() " Link "STEMCOPY()"}                  STEMCOPY()
 @{" Funktion STEMINSERT() " Link "STEMINSERT()"}                STEMINSERT()
 @{" Funktion STEMREMOVE() " Link "STEMREMOVE()"}                STEMREMOVE()
 @{" Funktion SUFFIXPART() " Link "SUFFIXPART()"}                SUFFIXPART()
 @{" Funktion UNSETENV() " Link "UNSETENV()"}                  UNSETENV()
 @{" Funktion UUDECODE() " Link "UUDECODE()"}                  UUDECODE()
 @{" Funktion UUENCODE() " Link "UUENCODE()"}                  UUENCODE()
 @{" Funktion VIEWLIST() " Link "VIEWLIST()"}                  VIEWLIST()
 @{" Funktion WBINFO() " Link "WBINFO()"}                    WBINFO()
 @{" Funktion WHATIS() " Link "WHATIS()"}                    WHATIS()
 @{" Funktion WHATISTYPES() " Link "WHATISTYPES()"}               WHATISTYPES()
 @{" Funktion WRITECLIPBOARD() " Link "WRITECLIPBOARD()"}            WRITECLIPBOARD()
 @{" Funktion WRITEFILE() " Link "WRITEFILE()"}                 WRITEFILE()
 @{" Funktion WRITELINES() " Link "WRITELINES()"}                WRITELINES()
 @{" Funktionen der Library " Link "Funktionen der Library"}               Funktionen der Library
 @{" Funktionsübersicht " Link "Funktionen der Library"}                  Funktionen der Library
 @{" GETCOMMENT() " Link "GETCOMMENT()"}                         GETCOMMENT()
 @{" GETDEFAULTPUBSCREEN() " Link "GETDEFAULTPUBSCREEN()"}                GETDEFAULTPUBSCREEN()
 @{" GETDEFAULTPUBSCREEN() " Link "GETDEFAULTPUBSCREEN()"}                GETDEFAULTPUBSCREEN()
 @{" GETDEFAULTTOOL() " Link "GETDEFAULTTOOL()"}                     GETDEFAULTTOOL()
 @{" GETDIR() " Link "GETDIR()"}                             GETDIR()
 @{" GETENV() " Link "GETENV()"}                             GETENV()
 @{" GETKEY() " Link "GETKEY()"}                             GETKEY()
 @{" GETPROTECTION() " Link "GETPROTECTION()"}                      GETPROTECTION()
 @{" GETPUBSCREENMODES() " Link "GETPUBSCREENMODES()"}                  GETPUBSCREENMODES()
 @{" GETPUBSCREENMODES() " Link "GETPUBSCREENMODES()"}                  GETPUBSCREENMODES()
 @{" GETSTACK() " Link "GETSTACK()"}                           GETSTACK()
 @{" GETTOOLTYPES() " Link "GETTOOLTYPES()"}                       GETTOOLTYPES()
 @{" GETTOOLTYPEVALUE() " Link "GETTOOLTYPEVALUE()"}                   GETTOOLTYPEVALUE()
 @{" Größte ID-Nummer der 'FileID.library' ermitteln " Link "FILEID_GETHIGHID()"} FILEID_GETHIGHID()
 @{" Hersteller eines SCSI-Gerätes ermitteln " Link "SCSI_MANUFACTURER()"} SCSI_MANUFACTURER()
 @{" History " Link "History"}                              History
 @{" Index " Link "Index"}                                Index
 @{" Informationsfenster der WB öffnen " Link "WBINFO()"}   WBINFO()
 @{" Installation " Link "Installation"}                         Installation
 @{" Liste aller Publicscreens erstellen " Link "PUBSCREENLIST()"}  PUBSCREENLIST()
 @{" Liste im Auswahlfenster anzeigen " Link "VIEWLIST()"}     VIEWLIST()
 @{" Liste mit QuickSort sortieren " Link "QSORT()"}        QSORT()
 @{" LSEARCH() " Link "LSEARCH()"}                            LSEARCH()
 @{" MAKEPATH() " Link "MAKEPATH()"}                           MAKEPATH()
 @{" MAKESUFFIX() " Link "MAKESUFFIX()"}                         MAKESUFFIX()
 @{" MATCHPATTERN() " Link "MATCHPATTERN()"}                       MATCHPATTERN()
 @{" Neue Publicscreen-Modi einstellen " Link "SETPUBSCREENMODES()"}    SETPUBSCREENMODES()
 @{" Neuen Default-Publicscreen einstellen " Link "SETDEFAULTPUBSCREEN()"} SETDEFAULTPUBSCREEN()
 @{" PATHPART() " Link "PATHPART()"}                           PATHPART()
 @{" Pfad zusammensetzen " Link "MAKEPATH()"}                  MAKEPATH()
 @{" Produktbezeichnung eines SCSI-Gerätes ermitteln " Link "SCSI_PRODUCT()"} SCSI_PRODUCT()
 @{" Publicscreen nach hinten legen " Link "PUBSCREENTOBACK()"}       PUBSCREENTOBACK()
 @{" Publicscreen nach vorne bringen " Link "PUBSCREENTOFRONT()"}      PUBSCREENTOFRONT()
 @{" Publicscreen-Modi ermitteln " Link "GETPUBSCREENMODES()"}          GETPUBSCREENMODES()
 @{" PUBSCREENLIST() " Link "PUBSCREENLIST()"}                      PUBSCREENLIST()
 @{" PUBSCREENLIST() " Link "PUBSCREENLIST()"}                      PUBSCREENLIST()
 @{" PUBSCREENTOBACK() " Link "PUBSCREENTOBACK()"}                    PUBSCREENTOBACK()
 @{" PUBSCREENTOBACK() " Link "PUBSCREENTOBACK()"}                    PUBSCREENTOBACK()
 @{" PUBSCREENTOFRONT() " Link "PUBSCREENTOFRONT()"}                   PUBSCREENTOFRONT()
 @{" PUBSCREENTOFRONT() " Link "PUBSCREENTOFRONT()"}                   PUBSCREENTOFRONT()
 @{" QSORT() " Link "QSORT()"}                              QSORT()
 @{" RAND() " Link "RAND()"}                               RAND()
 @{" READCLIPBOARD() " Link "READCLIPBOARD()"}                      READCLIPBOARD()
 @{" READFILE() " Link "READFILE()"}                           READFILE()
 @{" READLINES() " Link "READLINES()"}                          READLINES()
 @{" Rechtliches " Link "Copyright"}                          Copyright
 @{" Revision eines SCSI-Gerätes ermitteln " Link "SCSI_REVISION()"} SCSI_REVISION()
 @{" REXXTRICKSVERSION() " Link "REXXTRICKSVERSION()"}                  REXXTRICKSVERSION()
 @{" Schutzbits einer Datei auslesen " Link "GETPROTECTION()"}      GETPROTECTION()
 @{" Schutzbits einer Datei einstellen " Link "SETPROTECTION()"}    SETPROTECTION()
 @{" SCSI_DEVICETYPE() " Link "SCSI_DEVICETYPE()"}                    SCSI_DEVICETYPE()
 @{" SCSI_MANUFACTURER() " Link "SCSI_MANUFACTURER()"}                  SCSI_MANUFACTURER()
 @{" SCSI_PRODUCT() " Link "SCSI_PRODUCT()"}                       SCSI_PRODUCT()
 @{" SCSI_REVISION() " Link "SCSI_REVISION()"}                      SCSI_REVISION()
 @{" SCSI_TESTREADY() " Link "SCSI_TESTREADY()"}                     SCSI_TESTREADY()
 @{" SEARCHPATTERN() " Link "SEARCHPATTERN()"}                      SEARCHPATTERN()
 @{" SETCOMMENT() " Link "SETCOMMENT()"}                         SETCOMMENT()
 @{" SETDEFAULTPUBSCREEN() " Link "SETDEFAULTPUBSCREEN()"}                SETDEFAULTPUBSCREEN()
 @{" SETDEFAULTPUBSCREEN() " Link "SETDEFAULTPUBSCREEN()"}                SETDEFAULTPUBSCREEN()
 @{" SETDEFAULTTOOL() " Link "SETDEFAULTTOOL()"}                     SETDEFAULTTOOL()
 @{" SETENV() " Link "SETENV()"}                             SETENV()
 @{" SETPROTECTION() " Link "SETPROTECTION()"}                      SETPROTECTION()
 @{" SETPUBSCREENMODES() " Link "SETPUBSCREENMODES()"}                  SETPUBSCREENMODES()
 @{" SETPUBSCREENMODES() " Link "SETPUBSCREENMODES()"}                  SETPUBSCREENMODES()
 @{" SETSTACK() " Link "SETSTACK()"}                           SETSTACK()
 @{" SETTOOLTYPES() " Link "SETTOOLTYPES()"}                       SETTOOLTYPES()
 @{" SETTOOLTYPEVALUE() " Link "SETTOOLTYPEVALUE()"}                   SETTOOLTYPEVALUE()
 @{" Stackgröße eines Icons einstellen " Link "SETSTACK()"}  SETSTACK()
 @{" Stackgröße eines Icons ermitteln " Link "GETSTACK()"}   GETSTACK()
 @{" Standardprogramm einstellen " Link "SETDEFAULTTOOL()"}          SETDEFAULTTOOL()
 @{" Standardprogramm ermitteln " Link "GETDEFAULTTOOL()"}           GETDEFAULTTOOL()
 @{" Stem-Variable als Textdatei speichern " Link "WRITEFILE()"} WRITEFILE()
 @{" Stem-Variable ganz oder teilweise kopieren " Link "STEMCOPY()"} STEMCOPY()
 @{" STEMCOPY() " Link "STEMCOPY()"}                           STEMCOPY()
 @{" STEMINSERT() " Link "STEMINSERT()"}                         STEMINSERT()
 @{" STEMREMOVE() " Link "STEMREMOVE()"}                         STEMREMOVE()
 @{" Stichwortverzeichnis " Link "Index"}                 Index
 @{" String mit Binärsuche suchen " Link "BSEARCH()"}        BSEARCH()
 @{" String mit Linearsuche suchen " Link "LSEARCH()"}        LSEARCH()
 @{" String mit Namensmuster vergleichen " Link "MATCHPATTERN()"}  MATCHPATTERN()
 @{" SUFFIXPART() " Link "SUFFIXPART()"}                         SUFFIXPART()
 @{" Support-Mailbox " Link "Adresse des Autors"}                      Adresse des Autors
 @{" Systemvoraussetzungen " Link "Systemvoraussetzungen"}                Systemvoraussetzungen
 @{" Tastaturbedienung " Link "Das VIEWLIST() Fenster"}                    Das VIEWLIST() Fenster
 @{" Teil einer Textdatei in Stem-Variable einlesen " Link "READLINES()"} READLINES()
 @{" Text aus dem Clipboard einlesen " Link "READCLIPBOARD()"}      READCLIPBOARD()
 @{" Text im Clipboard speichern " Link "WRITECLIPBOARD()"}          WRITECLIPBOARD()
 @{" Textdatei in Stem-Variable einlesen " Link "READFILE()"}  READFILE()
 @{" Textdatei teilweise überschreiben, Zeilen einfügen " Link "WRITELINES()"} WRITELINES()
 @{" Tooltypes eines Icons ermitteln " Link "GETTOOLTYPES()"}      GETTOOLTYPES()
 @{" Tooltypes eines Icons neu einstellen " Link "SETTOOLTYPES()"} SETTOOLTYPES()
 @{" Typ eines SCSI-Gerätes ermitteln, DISK, TAPE etc. " Link "SCSI_DEVICETYPE()"} SCSI_DEVICETYPE()
 @{" UNSETENV() " Link "UNSETENV()"}                           UNSETENV()
 @{" UUDECODE() " Link "UUDECODE()"}                           UUDECODE()
 @{" UUENCODE() " Link "UUENCODE()"}                           UUENCODE()
 @{" uuencodete Datei dekodieren " Link "UUDECODE()"}          UUDECODE()
 @{" Version der 'rexxtricks.library' ermitteln " Link "REXXTRICKSVERSION()"} REXXTRICKSVERSION()
 @{" Verzeichnis eines Pfades ermitteln " Link "PATHPART()"}   PATHPART()
 @{" Verzeichnis in Stem-Variable einlesen " Link "GETDIR()"} GETDIR()
 @{" VIEWLIST() " Link "VIEWLIST()"}                           VIEWLIST()
 @{" WBINFO() " Link "WBINFO()"}                             WBINFO()
 @{" WHATIS() " Link "WHATIS()"}                             WHATIS()
 @{" WHATISTYPES() " Link "WHATISTYPES()"}                        WHATISTYPES()
 @{" WHATISTYPES() " Link "WHATISTYPES()"}                        WHATISTYPES()
 @{" WRITECLIPBOARD() " Link "WRITECLIPBOARD()"}                     WRITECLIPBOARD()
 @{" WRITEFILE() " Link "WRITEFILE()"}                          WRITEFILE()
 @{" WRITELINES() " Link "WRITELINES()"}                         WRITELINES()
 @{" Zu einer ID-Nummer gehörende Beschreibung ermitteln " Link "FILEID_GETIDSTRING()"} FILEID_GETIDSTRING()
 @{" Zufallszahl ermitteln " Link "RAND()"}                RAND()

@EndNode

